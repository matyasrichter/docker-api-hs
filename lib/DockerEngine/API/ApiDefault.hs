{-
   Docker Engine API

   The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.36) is used. For example, calling `/info` is the same as calling `/v1.36/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 

   OpenAPI Version: 3.0.1
   Docker Engine API API version: 1.36
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : DockerEngine.API.ApiDefault
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module DockerEngine.API.ApiDefault where

import DockerEngine.Core
import DockerEngine.MimeTypes
import DockerEngine.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Default

-- *** taskLogs

-- | @GET \/tasks\/{id}\/logs@
-- 
-- Get task logs
-- 
-- Get `stdout` and `stderr` logs from a task.  **Note**: This endpoint works only for services with the `json-file` or `journald` logging drivers. 
-- 
taskLogs
  :: Accept accept -- ^ request accept ('MimeType')
  -> Id -- ^ "id" -  ID of the task
  -> DockerEngineRequest TaskLogs MimeNoContent Text accept
taskLogs  _ (Id id) =
  _mkRequest "GET" ["/tasks/",toPath id,"/logs"]

data TaskLogs  

-- | /Optional Param/ "details" - Show task context and extra details provided to logs.
instance HasOptionalParam TaskLogs Details where
  applyOptionalParam req (Details xs) =
    req `addQuery` toQuery ("details", Just xs)

-- | /Optional Param/ "follow" - Return the logs as a stream.  This will return a `101` HTTP response with a `Connection: upgrade` header, then hijack the HTTP connection to send raw output. For more information about hijacking and the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach). 
instance HasOptionalParam TaskLogs Follow where
  applyOptionalParam req (Follow xs) =
    req `addQuery` toQuery ("follow", Just xs)

-- | /Optional Param/ "stdout" - Return logs from `stdout`
instance HasOptionalParam TaskLogs Stdout where
  applyOptionalParam req (Stdout xs) =
    req `addQuery` toQuery ("stdout", Just xs)

-- | /Optional Param/ "stderr" - Return logs from `stderr`
instance HasOptionalParam TaskLogs Stderr where
  applyOptionalParam req (Stderr xs) =
    req `addQuery` toQuery ("stderr", Just xs)

-- | /Optional Param/ "since" - Only return logs since this time, as a UNIX timestamp
instance HasOptionalParam TaskLogs Since where
  applyOptionalParam req (Since xs) =
    req `addQuery` toQuery ("since", Just xs)

-- | /Optional Param/ "timestamps" - Add timestamps to every log line
instance HasOptionalParam TaskLogs Timestamps where
  applyOptionalParam req (Timestamps xs) =
    req `addQuery` toQuery ("timestamps", Just xs)

-- | /Optional Param/ "tail" - Only return this number of log lines from the end of the logs. Specify as an integer or `all` to output all log lines.
instance HasOptionalParam TaskLogs Tail where
  applyOptionalParam req (Tail xs) =
    req `addQuery` toQuery ("tail", Just xs)
-- | @application/json@
instance Produces TaskLogs MimeJSON
-- | @application/vnd.docker.raw-stream@
instance Produces TaskLogs MimeVndDockerRawStream

