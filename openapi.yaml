openapi: 3.0.1
info:
  description: |
    The Engine API is an HTTP API served by Docker Engine. It is the API the
    Docker client uses to communicate with the Engine, so everything the Docker
    client can do can be done with the API.

    Most of the client's commands map directly to API endpoints (e.g. `docker ps`
    is `GET /containers/json`). The notable exception is running containers,
    which consists of several API calls.

    # Errors

    The API uses standard HTTP status codes to indicate the success or failure
    of the API call. The body of the response will be JSON in the following
    format:

    ```
    {
      "message": "page not found"
    }
    ```

    # Versioning

    The API is usually changed in each release, so API calls are versioned to
    ensure that clients don't break. To lock to a specific version of the API,
    you prefix the URL with its version, for example, call `/v1.30/info` to use
    the v1.30 version of the `/info` endpoint. If the API version specified in
    the URL is not supported by the daemon, a HTTP `400 Bad Request` error message
    is returned.

    If you omit the version-prefix, the current version of the API (v1.41) is used.
    For example, calling `/info` is the same as calling `/v1.41/info`. Using the
    API without a version-prefix is deprecated and will be removed in a future release.

    Engine releases in the near future should support this version of the API,
    so your client will continue to work even if it is talking to a newer Engine.

    The API uses an open schema model, which means server may add extra properties
    to responses. Likewise, the server will ignore any extra query parameters and
    request body properties. When you write clients, you need to ignore additional
    properties in responses to ensure they do not break when talking to newer
    daemons.


    # Authentication

    Authentication for registries is handled client side. The client has to send
    authentication details to various endpoints that need to communicate with
    registries, such as `POST /images/(name)/push`. These are sent as
    `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5)
    (JSON) string with the following structure:

    ```
    {
      "username": "string",
      "password": "string",
      "email": "string",
      "serveraddress": "string"
    }
    ```

    The `serveraddress` is a domain/IP without a protocol. Throughout this
    structure, double quotes are required.

    If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth),
    you can just pass this instead of credentials:

    ```
    {
      "identitytoken": "9cbaf023786cd7..."
    }
    ```
  title: Docker Engine API
  version: "1.41"
  x-logo:
    url: /images/logo-docker-main.png
servers:
- url: /v1.41
tags:
- description: |
    Create and manage containers.
  name: Container
  x-displayName: Containers
- name: Image
  x-displayName: Images
- description: |
    Networks are user-defined networks that containers can be attached to.
    See the [networking documentation](/network/)
    for more information.
  name: Network
  x-displayName: Networks
- description: |
    Create and manage persistent storage that can be attached to containers.
  name: Volume
  x-displayName: Volumes
- description: |
    Run new commands inside running containers. Refer to the
    [command-line reference](/engine/reference/commandline/exec/)
    for more information.

    To exec a command in a container, you first need to create an exec instance,
    then start it. These two API endpoints are wrapped up in a single command-line
    command, `docker exec`.
  name: Exec
  x-displayName: Exec
- description: |
    Engines can be clustered together in a swarm. Refer to the
    [swarm mode documentation](/engine/swarm/)
    for more information.
  name: Swarm
  x-displayName: Swarm
- description: |
    Nodes are instances of the Engine participating in a swarm. Swarm mode
    must be enabled for these endpoints to work.
  name: Node
  x-displayName: Nodes
- description: |
    Services are the definitions of tasks to run on a swarm. Swarm mode must
    be enabled for these endpoints to work.
  name: Service
  x-displayName: Services
- description: |
    A task is a container running on a swarm. It is the atomic scheduling unit
    of swarm. Swarm mode must be enabled for these endpoints to work.
  name: Task
  x-displayName: Tasks
- description: |
    Secrets are sensitive data that can be used by services. Swarm mode must
    be enabled for these endpoints to work.
  name: Secret
  x-displayName: Secrets
- description: |
    Configs are application configurations that can be used by services. Swarm
    mode must be enabled for these endpoints to work.
  name: Config
  x-displayName: Configs
- name: Plugin
  x-displayName: Plugins
- name: System
  x-displayName: System
paths:
  /containers/json:
    get:
      description: |
        Returns a list of containers. For details on the format, see the
        [inspect endpoint](#operation/ContainerInspect).

        Note that it uses a different, smaller representation of a container
        than inspecting a single container. For example, the list of linked
        containers is not propagated .
      operationId: ContainerList
      parameters:
      - description: |
          Return all containers. By default, only running containers are shown.
        in: query
        name: all
        schema:
          default: false
          type: boolean
      - description: |
          Return this number of most recently created containers, including
          non-running ones.
        in: query
        name: limit
        schema:
          type: integer
      - description: |
          Return the size of container as fields `SizeRw` and `SizeRootFs`.
        in: query
        name: size
        schema:
          default: false
          type: boolean
      - description: |
          Filters to process on the container list, encoded as JSON (a
          `map[string][]string`). For example, `{"status": ["paused"]}` will
          only return paused containers.

          Available filters:

          - `ancestor`=(`<image-name>[:<tag>]`, `<image id>`, or `<image@digest>`)
          - `before`=(`<container id>` or `<container name>`)
          - `expose`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)
          - `exited=<int>` containers with exit code of `<int>`
          - `health`=(`starting`|`healthy`|`unhealthy`|`none`)
          - `id=<ID>` a container's ID
          - `isolation=`(`default`|`process`|`hyperv`) (Windows daemon only)
          - `is-task=`(`true`|`false`)
          - `label=key` or `label="key=value"` of a container label
          - `name=<name>` a container's name
          - `network`=(`<network id>` or `<network name>`)
          - `publish`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)
          - `since`=(`<container id>` or `<container name>`)
          - `status=`(`created`|`restarting`|`running`|`removing`|`paused`|`exited`|`dead`)
          - `volume`=(`<volume name>` or `<mount point destination>`)
        in: query
        name: filters
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
              - Id: 8dfafdbc3a40
                Names:
                - /boring_feynman
                Image: ubuntu:latest
                ImageID: d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82
                Command: echo 1
                Created: 1367854155
                State: Exited
                Status: Exit 0
                Ports:
                - PrivatePort: 2222
                  PublicPort: 3333
                  Type: tcp
                Labels:
                  com.example.vendor: Acme
                  com.example.license: GPL
                  com.example.version: "1.0"
                SizeRw: 12288
                SizeRootFs: 0
                HostConfig:
                  NetworkMode: default
                NetworkSettings:
                  Networks:
                    bridge:
                      NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
                      EndpointID: 2cdc4edb1ded3631c81f57966563e5c8525b81121bb3706a9a9a3ae102711f3f
                      Gateway: 172.17.0.1
                      IPAddress: 172.17.0.2
                      IPPrefixLen: 16
                      IPv6Gateway: ""
                      GlobalIPv6Address: ""
                      GlobalIPv6PrefixLen: 0
                      MacAddress: 02:42:ac:11:00:02
                Mounts:
                - Name: fac362...80535
                  Source: /data
                  Destination: /data
                  Driver: local
                  Mode: ro,Z
                  RW: false
                  Propagation: ""
              - Id: 9cd87474be90
                Names:
                - /coolName
                Image: ubuntu:latest
                ImageID: d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82
                Command: echo 222222
                Created: 1367854155
                State: Exited
                Status: Exit 0
                Ports: []
                Labels: {}
                SizeRw: 12288
                SizeRootFs: 0
                HostConfig:
                  NetworkMode: default
                NetworkSettings:
                  Networks:
                    bridge:
                      NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
                      EndpointID: 88eaed7b37b38c2a3f0c4bc796494fdf51b270c2d22656412a2ca5d559a64d7a
                      Gateway: 172.17.0.1
                      IPAddress: 172.17.0.8
                      IPPrefixLen: 16
                      IPv6Gateway: ""
                      GlobalIPv6Address: ""
                      GlobalIPv6PrefixLen: 0
                      MacAddress: 02:42:ac:11:00:08
                Mounts: []
              - Id: 3176a2479c92
                Names:
                - /sleepy_dog
                Image: ubuntu:latest
                ImageID: d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82
                Command: echo 3333333333333333
                Created: 1367854154
                State: Exited
                Status: Exit 0
                Ports: []
                Labels: {}
                SizeRw: 12288
                SizeRootFs: 0
                HostConfig:
                  NetworkMode: default
                NetworkSettings:
                  Networks:
                    bridge:
                      NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
                      EndpointID: 8b27c041c30326d59cd6e6f510d4f8d1d570a228466f956edf7815508f78e30d
                      Gateway: 172.17.0.1
                      IPAddress: 172.17.0.6
                      IPPrefixLen: 16
                      IPv6Gateway: ""
                      GlobalIPv6Address: ""
                      GlobalIPv6PrefixLen: 0
                      MacAddress: 02:42:ac:11:00:06
                Mounts: []
              - Id: 4cb07b47f9fb
                Names:
                - /running_cat
                Image: ubuntu:latest
                ImageID: d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82
                Command: echo 444444444444444444444444444444444
                Created: 1367854152
                State: Exited
                Status: Exit 0
                Ports: []
                Labels: {}
                SizeRw: 12288
                SizeRootFs: 0
                HostConfig:
                  NetworkMode: default
                NetworkSettings:
                  Networks:
                    bridge:
                      NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
                      EndpointID: d91c7b2f0644403d7ef3095985ea0e2370325cd2332ff3a3225c4247328e66e9
                      Gateway: 172.17.0.1
                      IPAddress: 172.17.0.5
                      IPPrefixLen: 16
                      IPv6Gateway: ""
                      GlobalIPv6Address: ""
                      GlobalIPv6PrefixLen: 0
                      MacAddress: 02:42:ac:11:00:05
                Mounts: []
              schema:
                items:
                  $ref: '#/components/schemas/ContainerSummary'
                type: array
          description: no error
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: List containers
      tags:
      - Container
  /containers/create:
    post:
      operationId: ContainerCreate
      parameters:
      - description: |
          Assign the specified name to the container. Must match
          `/?[a-zA-Z0-9][a-zA-Z0-9_.-]+`.
        in: query
        name: name
        schema:
          pattern: ^/?[a-zA-Z0-9][a-zA-Z0-9_.-]+$
          type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ContainerConfig'
              - properties:
                  HostConfig:
                    $ref: '#/components/schemas/HostConfig'
                  NetworkingConfig:
                    $ref: '#/components/schemas/NetworkingConfig'
                type: object
          application/octet-stream:
            schema:
              allOf:
              - $ref: '#/components/schemas/ContainerConfig'
              - properties:
                  HostConfig:
                    $ref: '#/components/schemas/HostConfig'
                  NetworkingConfig:
                    $ref: '#/components/schemas/NetworkingConfig'
                type: object
        description: Container to create
        required: true
      responses:
        "201":
          content:
            application/json:
              example:
                Id: e90e34656806
                Warnings: []
              schema:
                $ref: '#/components/schemas/ContainerCreateResponse'
          description: Container created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        "404":
          content:
            application/json:
              example:
                message: 'No such image: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such image
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: conflict
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Create a container
      tags:
      - Container
      x-codegen-request-body-name: body
  /containers/{id}/json:
    get:
      description: Return low-level information about a container.
      operationId: ContainerInspect
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Return the size of container as fields `SizeRw` and `SizeRootFs`
        in: query
        name: size
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              example:
                AppArmorProfile: ""
                Args:
                - -c
                - exit 9
                Config:
                  AttachStderr: true
                  AttachStdin: false
                  AttachStdout: true
                  Cmd:
                  - /bin/sh
                  - -c
                  - exit 9
                  Domainname: ""
                  Env:
                  - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
                  Healthcheck:
                    Test:
                    - CMD-SHELL
                    - exit 0
                  Hostname: ba033ac44011
                  Image: ubuntu
                  Labels:
                    com.example.vendor: Acme
                    com.example.license: GPL
                    com.example.version: "1.0"
                  MacAddress: ""
                  NetworkDisabled: false
                  OpenStdin: false
                  StdinOnce: false
                  Tty: false
                  User: ""
                  Volumes:
                    /volumes/data: {}
                  WorkingDir: ""
                  StopSignal: SIGTERM
                  StopTimeout: 10
                Created: 2015-01-06T15:47:31.485331387Z
                Driver: devicemapper
                ExecIDs:
                - b35395de42bc8abd327f9dd65d913b9ba28c74d2f0734eeeae84fa1c616a0fca
                - 3fc1232e5cd20c8de182ed81178503dc6437f4e7ef12b52cc5e8de020652f1c4
                HostConfig:
                  MaximumIOps: 0
                  MaximumIOBps: 0
                  BlkioWeight: 0
                  BlkioWeightDevice:
                  - {}
                  BlkioDeviceReadBps:
                  - {}
                  BlkioDeviceWriteBps:
                  - {}
                  BlkioDeviceReadIOps:
                  - {}
                  BlkioDeviceWriteIOps:
                  - {}
                  ContainerIDFile: ""
                  CpusetCpus: ""
                  CpusetMems: ""
                  CpuPercent: 80
                  CpuShares: 0
                  CpuPeriod: 100000
                  CpuRealtimePeriod: 1000000
                  CpuRealtimeRuntime: 10000
                  Devices: []
                  DeviceRequests:
                  - Driver: nvidia
                    Count: -1
                    DeviceIDs":
                    - "0"
                    - "1"
                    - GPU-fef8089b-4820-abfc-e83e-94318197576e
                    Capabilities:
                    - - gpu
                      - nvidia
                      - compute
                    Options:
                      property1: string
                      property2: string
                  IpcMode: ""
                  Memory: 0
                  MemorySwap: 0
                  MemoryReservation: 0
                  KernelMemory: 0
                  OomKillDisable: false
                  OomScoreAdj: 500
                  NetworkMode: bridge
                  PidMode: ""
                  PortBindings: {}
                  Privileged: false
                  ReadonlyRootfs: false
                  PublishAllPorts: false
                  RestartPolicy:
                    MaximumRetryCount: 2
                    Name: on-failure
                  LogConfig:
                    Type: json-file
                  Sysctls:
                    net.ipv4.ip_forward: "1"
                  Ulimits:
                  - {}
                  VolumeDriver: ""
                  ShmSize: 67108864
                HostnamePath: /var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hostname
                HostsPath: /var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hosts
                LogPath: /var/lib/docker/containers/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b-json.log
                Id: ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39
                Image: 04c5d3b7b0656168630d3ba35d8889bd0e9caafcaeb3004d2bfbc47e7c5d35d2
                MountLabel: ""
                Name: /boring_euclid
                NetworkSettings:
                  Bridge: ""
                  SandboxID: ""
                  HairpinMode: false
                  LinkLocalIPv6Address: ""
                  LinkLocalIPv6PrefixLen: 0
                  SandboxKey: ""
                  EndpointID: ""
                  Gateway: ""
                  GlobalIPv6Address: ""
                  GlobalIPv6PrefixLen: 0
                  IPAddress: ""
                  IPPrefixLen: 0
                  IPv6Gateway: ""
                  MacAddress: ""
                  Networks:
                    bridge:
                      NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
                      EndpointID: 7587b82f0dada3656fda26588aee72630c6fab1536d36e394b2bfbcf898c971d
                      Gateway: 172.17.0.1
                      IPAddress: 172.17.0.2
                      IPPrefixLen: 16
                      IPv6Gateway: ""
                      GlobalIPv6Address: ""
                      GlobalIPv6PrefixLen: 0
                      MacAddress: 02:42:ac:12:00:02
                Path: /bin/sh
                ProcessLabel: ""
                ResolvConfPath: /var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/resolv.conf
                RestartCount: 1
                State:
                  Error: ""
                  ExitCode: 9
                  FinishedAt: 2015-01-06T15:47:32.080254511Z
                  Health:
                    Status: healthy
                    FailingStreak: 0
                    Log:
                    - Start: 2019-12-22T10:59:05.6385933Z
                      End: 2019-12-22T10:59:05.8078452Z
                      ExitCode: 0
                      Output: ""
                  OOMKilled: false
                  Dead: false
                  Paused: false
                  Pid: 0
                  Restarting: false
                  Running: true
                  StartedAt: 2015-01-06T15:47:32.072697474Z
                  Status: running
                Mounts:
                - Name: fac362...80535
                  Source: /data
                  Destination: /data
                  Driver: local
                  Mode: ro,Z
                  RW: false
                  Propagation: ""
              schema:
                $ref: '#/components/schemas/ContainerInspectResponse'
          description: no error
        "404":
          content:
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Inspect a container
      tags:
      - Container
  /containers/{id}/top:
    get:
      description: |
        On Unix systems, this is done by running the `ps` command. This endpoint
        is not supported on Windows.
      operationId: ContainerTop
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The arguments to pass to `ps`. For example, `aux`
        in: query
        name: ps_args
        schema:
          default: -ef
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                Titles:
                - UID
                - PID
                - PPID
                - C
                - STIME
                - TTY
                - TIME
                - CMD
                Processes:
                - - root
                  - "13642"
                  - "882"
                  - "0"
                  - 17:03
                  - pts/0
                  - 00:00:00
                  - /bin/bash
                - - root
                  - "13735"
                  - "13642"
                  - "0"
                  - 17:06
                  - pts/0
                  - 00:00:00
                  - sleep 10
              schema:
                $ref: '#/components/schemas/ContainerTopResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ContainerTopResponse'
          description: no error
        "404":
          content:
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: List processes running inside a container
      tags:
      - Container
  /containers/{id}/logs:
    get:
      description: |
        Get `stdout` and `stderr` logs from a container.

        Note: This endpoint works only for containers with the `json-file` or
        `journald` logging driver.
      operationId: ContainerLogs
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Keep connection after returning logs.
        in: query
        name: follow
        schema:
          default: false
          type: boolean
      - description: Return logs from `stdout`
        in: query
        name: stdout
        schema:
          default: false
          type: boolean
      - description: Return logs from `stderr`
        in: query
        name: stderr
        schema:
          default: false
          type: boolean
      - description: Only return logs since this time, as a UNIX timestamp
        in: query
        name: since
        schema:
          default: 0
          type: integer
      - description: Only return logs before this time, as a UNIX timestamp
        in: query
        name: until
        schema:
          default: 0
          type: integer
      - description: Add timestamps to every log line
        in: query
        name: timestamps
        schema:
          default: false
          type: boolean
      - description: |
          Only return this number of log lines from the end of the logs.
          Specify as an integer or `all` to output all log lines.
        in: query
        name: tail
        schema:
          default: all
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: binary
                type: string
            text/plain:
              schema:
                format: binary
                type: string
          description: |
            logs returned as a stream in response body.
            For the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).
            Note that unlike the attach endpoint, the logs endpoint does not
            upgrade the connection and does not set Content-Type.
        "404":
          content:
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Get container logs
      tags:
      - Container
  /containers/{id}/changes:
    get:
      description: |
        Returns which files in a container's filesystem have been added, deleted,
        or modified. The `Kind` of modification can be one of:

        - `0`: Modified
        - `1`: Added
        - `2`: Deleted
      operationId: ContainerChanges
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
              - Path: /dev
                Kind: 0
              - Path: /dev/kmsg
                Kind: 1
              - Path: /test
                Kind: 1
              schema:
                items:
                  $ref: '#/components/schemas/ContainerChangeResponseItem'
                type: array
          description: The list of changes
        "404":
          content:
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Get changes on a container’s filesystem
      tags:
      - Container
  /containers/{id}/export:
    get:
      description: Export the contents of a container as a tarball.
      operationId: ContainerExport
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: no error
        "404":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
          description: no such container
        "500":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Export a container
      tags:
      - Container
  /containers/{id}/stats:
    get:
      description: |
        This endpoint returns a live stream of a container’s resource usage
        statistics.

        The `precpu_stats` is the CPU statistic of the *previous* read, and is
        used to calculate the CPU usage percentage. It is not an exact copy
        of the `cpu_stats` field.

        If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is
        nil then for compatibility with older daemons the length of the
        corresponding `cpu_usage.percpu_usage` array should be used.

        On a cgroup v2 host, the following fields are not set
        * `blkio_stats`: all fields other than `io_service_bytes_recursive`
        * `cpu_stats`: `cpu_usage.percpu_usage`
        * `memory_stats`: `max_usage` and `failcnt`
        Also, `memory_stats.stats` fields are incompatible with cgroup v1.

        To calculate the values shown by the `stats` command of the docker cli tool
        the following formulas can be used:
        * used_memory = `memory_stats.usage - memory_stats.stats.cache`
        * available_memory = `memory_stats.limit`
        * Memory usage % = `(used_memory / available_memory) * 100.0`
        * cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage`
        * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage`
        * number_cpus = `lenght(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus`
        * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0`
      operationId: ContainerStats
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |
          Stream the output. If false, the stats will be output once and then
          it will disconnect.
        in: query
        name: stream
        schema:
          default: true
          type: boolean
      - description: |
          Only get a single stat instead of waiting for 2 cycles. Must be used
          with `stream=false`.
        in: query
        name: one-shot
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              example:
                read: 2015-01-08T22:57:31.547920715Z
                pids_stats:
                  current: 3
                networks:
                  eth0:
                    rx_bytes: 5338
                    rx_dropped: 0
                    rx_errors: 0
                    rx_packets: 36
                    tx_bytes: 648
                    tx_dropped: 0
                    tx_errors: 0
                    tx_packets: 8
                  eth5:
                    rx_bytes: 4641
                    rx_dropped: 0
                    rx_errors: 0
                    rx_packets: 26
                    tx_bytes: 690
                    tx_dropped: 0
                    tx_errors: 0
                    tx_packets: 9
                memory_stats:
                  stats:
                    total_pgmajfault: 0
                    cache: 0
                    mapped_file: 0
                    total_inactive_file: 0
                    pgpgout: 414
                    rss: 6537216
                    total_mapped_file: 0
                    writeback: 0
                    unevictable: 0
                    pgpgin: 477
                    total_unevictable: 0
                    pgmajfault: 0
                    total_rss: 6537216
                    total_rss_huge: 6291456
                    total_writeback: 0
                    total_inactive_anon: 0
                    rss_huge: 6291456
                    hierarchical_memory_limit: 67108864
                    total_pgfault: 964
                    total_active_file: 0
                    active_anon: 6537216
                    total_active_anon: 6537216
                    total_pgpgout: 414
                    total_cache: 0
                    inactive_anon: 0
                    active_file: 0
                    pgfault: 964
                    inactive_file: 0
                    total_pgpgin: 477
                  max_usage: 6651904
                  usage: 6537216
                  failcnt: 0
                  limit: 67108864
                blkio_stats: {}
                cpu_stats:
                  cpu_usage:
                    percpu_usage:
                    - 8646879
                    - 24472255
                    - 36438778
                    - 30657443
                    usage_in_usermode: 50000000
                    total_usage: 100215355
                    usage_in_kernelmode: 30000000
                  system_cpu_usage: 739306590000000
                  online_cpus: 4
                  throttling_data:
                    periods: 0
                    throttled_periods: 0
                    throttled_time: 0
                precpu_stats:
                  cpu_usage:
                    percpu_usage:
                    - 8646879
                    - 24350896
                    - 36438778
                    - 30657443
                    usage_in_usermode: 50000000
                    total_usage: 100093996
                    usage_in_kernelmode: 30000000
                  system_cpu_usage: 9492140000000
                  online_cpus: 4
                  throttling_data:
                    periods: 0
                    throttled_periods: 0
                    throttled_time: 0
              schema:
                type: object
          description: no error
        "404":
          content:
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Get container stats based on resource usage
      tags:
      - Container
  /containers/{id}/resize:
    post:
      description: Resize the TTY for a container.
      operationId: ContainerResize
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Height of the TTY session in characters
        in: query
        name: h
        schema:
          type: integer
      - description: Width of the TTY session in characters
        in: query
        name: w
        schema:
          type: integer
      responses:
        "200":
          content: {}
          description: no error
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
          description: no such container
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: cannot resize container
      summary: Resize a container TTY
      tags:
      - Container
  /containers/{id}/start:
    post:
      operationId: ContainerStart
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |
          Override the key sequence for detaching a container. Format is a
          single character `[a-Z]` or `ctrl-<value>` where `<value>` is one
          of: `a-z`, `@`, `^`, `[`, `,` or `_`.
        in: query
        name: detachKeys
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: no error
        "304":
          content: {}
          description: container already started
        "404":
          content:
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Start a container
      tags:
      - Container
  /containers/{id}/stop:
    post:
      operationId: ContainerStop
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Number of seconds to wait before killing the container
        in: query
        name: t
        schema:
          type: integer
      responses:
        "204":
          content: {}
          description: no error
        "304":
          content: {}
          description: container already stopped
        "404":
          content:
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Stop a container
      tags:
      - Container
  /containers/{id}/restart:
    post:
      operationId: ContainerRestart
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Number of seconds to wait before killing the container
        in: query
        name: t
        schema:
          type: integer
      responses:
        "204":
          content: {}
          description: no error
        "404":
          content:
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Restart a container
      tags:
      - Container
  /containers/{id}/kill:
    post:
      description: |
        Send a POSIX signal to a container, defaulting to killing to the
        container.
      operationId: ContainerKill
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Signal to send to the container as an integer or string (e.g.
          `SIGINT`)
        in: query
        name: signal
        schema:
          default: SIGKILL
          type: string
      responses:
        "204":
          content: {}
          description: no error
        "404":
          content:
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        "409":
          content:
            application/json:
              example:
                message: Container d37cde0fe4ad63c3a7252023b2f9800282894247d145cb5933ddf6e52cc03a28
                  is not running
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: container is not running
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Kill a container
      tags:
      - Container
  /containers/{id}/update:
    post:
      description: |
        Change various configuration options of a container without having to
        recreate it.
      operationId: ContainerUpdate
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Resources'
              - properties:
                  RestartPolicy:
                    $ref: '#/components/schemas/RestartPolicy'
                type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerUpdateResponse'
          description: The container has been updated.
        "404":
          content:
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Update a container
      tags:
      - Container
      x-codegen-request-body-name: update
  /containers/{id}/rename:
    post:
      operationId: ContainerRename
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: New name for the container
        in: query
        name: name
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: no error
        "404":
          content:
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: name already in use
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Rename a container
      tags:
      - Container
  /containers/{id}/pause:
    post:
      description: |
        Use the freezer cgroup to suspend all processes in a container.

        Traditionally, when suspending a process the `SIGSTOP` signal is used,
        which is observable by the process being suspended. With the freezer
        cgroup the process is unaware, and unable to capture, that it is being
        suspended, and subsequently resumed.
      operationId: ContainerPause
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: no error
        "404":
          content:
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Pause a container
      tags:
      - Container
  /containers/{id}/unpause:
    post:
      description: Resume a container which has been paused.
      operationId: ContainerUnpause
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: no error
        "404":
          content:
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Unpause a container
      tags:
      - Container
  /containers/{id}/attach:
    post:
      description: |
        Attach to a container to read its output or send it input. You can attach
        to the same container multiple times and you can reattach to containers
        that have been detached.

        Either the `stream` or `logs` parameter must be `true` for this endpoint
        to do anything.

        See the [documentation for the `docker attach` command](/engine/reference/commandline/attach/)
        for more details.

        ### Hijacking

        This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`,
        and `stderr` on the same socket.

        This is the response from the daemon for an attach request:

        ```
        HTTP/1.1 200 OK
        Content-Type: application/vnd.docker.raw-stream

        [STREAM]
        ```

        After the headers and two new lines, the TCP connection can now be used
        for raw, bidirectional communication between the client and server.

        To hint potential proxies about connection hijacking, the Docker client
        can also optionally send connection upgrade headers.

        For example, the client sends this request to upgrade the connection:

        ```
        POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1
        Upgrade: tcp
        Connection: Upgrade
        ```

        The Docker daemon will respond with a `101 UPGRADED` response, and will
        similarly follow with the raw stream:

        ```
        HTTP/1.1 101 UPGRADED
        Content-Type: application/vnd.docker.raw-stream
        Connection: Upgrade
        Upgrade: tcp

        [STREAM]
        ```

        ### Stream format

        When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate),
        the stream over the hijacked connected is multiplexed to separate out
        `stdout` and `stderr`. The stream consists of a series of frames, each
        containing a header and a payload.

        The header contains the information which the stream writes (`stdout` or
        `stderr`). It also contains the size of the associated frame encoded in
        the last four bytes (`uint32`).

        It is encoded on the first eight bytes like this:

        ```go
        header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}
        ```

        `STREAM_TYPE` can be:

        - 0: `stdin` (is written on `stdout`)
        - 1: `stdout`
        - 2: `stderr`

        `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size
        encoded as big endian.

        Following the header is the payload, which is the specified number of
        bytes of `STREAM_TYPE`.

        The simplest way to implement this protocol is the following:

        1. Read 8 bytes.
        2. Choose `stdout` or `stderr` depending on the first byte.
        3. Extract the frame size from the last four bytes.
        4. Read the extracted size and output it on the correct output.
        5. Goto 1.

        ### Stream format when using a TTY

        When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate),
        the stream is not multiplexed. The data exchanged over the hijacked
        connection is simply the raw data from the process PTY and client's
        `stdin`.
      operationId: ContainerAttach
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |
          Override the key sequence for detaching a container.Format is a single
          character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`,
          `@`, `^`, `[`, `,` or `_`.
        in: query
        name: detachKeys
        schema:
          type: string
      - description: |
          Replay previous logs from the container.

          This is useful for attaching to a container that has started and you
          want to output everything since the container started.

          If `stream` is also enabled, once all the previous output has been
          returned, it will seamlessly transition into streaming current
          output.
        in: query
        name: logs
        schema:
          default: false
          type: boolean
      - description: |
          Stream attached streams from the time the request was made onwards.
        in: query
        name: stream
        schema:
          default: false
          type: boolean
      - description: Attach to `stdin`
        in: query
        name: stdin
        schema:
          default: false
          type: boolean
      - description: Attach to `stdout`
        in: query
        name: stdout
        schema:
          default: false
          type: boolean
      - description: Attach to `stderr`
        in: query
        name: stderr
        schema:
          default: false
          type: boolean
      responses:
        "101":
          content: {}
          description: no error, hints proxy about hijacking
        "200":
          content: {}
          description: no error, no upgrade header found
        "400":
          content:
            application/vnd.docker.raw-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        "404":
          content:
            application/vnd.docker.raw-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
          description: no such container
        "500":
          content:
            application/vnd.docker.raw-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Attach to a container
      tags:
      - Container
  /containers/{id}/attach/ws:
    get:
      operationId: ContainerAttachWebsocket
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |
          Override the key sequence for detaching a container.Format is a single
          character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`,
          `@`, `^`, `[`, `,`, or `_`.
        in: query
        name: detachKeys
        schema:
          type: string
      - description: Return logs
        in: query
        name: logs
        schema:
          default: false
          type: boolean
      - description: Return stream
        in: query
        name: stream
        schema:
          default: false
          type: boolean
      - description: Attach to `stdin`
        in: query
        name: stdin
        schema:
          default: false
          type: boolean
      - description: Attach to `stdout`
        in: query
        name: stdout
        schema:
          default: false
          type: boolean
      - description: Attach to `stderr`
        in: query
        name: stderr
        schema:
          default: false
          type: boolean
      responses:
        "101":
          content: {}
          description: no error, hints proxy about hijacking
        "200":
          content: {}
          description: no error, no upgrade header found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        "404":
          content:
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Attach to a container via a websocket
      tags:
      - Container
  /containers/{id}/wait:
    post:
      description: Block until a container stops, then returns the exit code.
      operationId: ContainerWait
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |
          Wait until a container state reaches the given condition.

          Defaults to `not-running` if omitted or empty.
        in: query
        name: condition
        schema:
          default: not-running
          enum:
          - not-running
          - next-exit
          - removed
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerWaitResponse'
          description: The container has exit.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        "404":
          content:
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Wait for a container
      tags:
      - Container
  /containers/{id}:
    delete:
      operationId: ContainerDelete
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Remove anonymous volumes associated with the container.
        in: query
        name: v
        schema:
          default: false
          type: boolean
      - description: If the container is running, kill it before removing it.
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: Remove the specified link associated with the container.
        in: query
        name: link
        schema:
          default: false
          type: boolean
      responses:
        "204":
          content: {}
          description: no error
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        "404":
          content:
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        "409":
          content:
            application/json:
              example:
                message: |
                  You cannot remove a running container: c2ada9df5af8. Stop the
                  container before attempting removal or force remove
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: conflict
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Remove a container
      tags:
      - Container
  /containers/{id}/archive:
    get:
      description: Get a tar archive of a resource in the filesystem of container
        id.
      operationId: ContainerArchive
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Resource in the container’s filesystem to archive.
        in: query
        name: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: no error
        "400":
          content:
            application/x-tar:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad parameter
        "404":
          content:
            application/x-tar:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
          description: Container or path does not exist
        "500":
          content:
            application/x-tar:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Get an archive of a filesystem resource in a container
      tags:
      - Container
    head:
      description: |
        A response header `X-Docker-Container-Path-Stat` is returned, containing
        a base64 - encoded JSON object with some filesystem header information
        about the path.
      operationId: ContainerArchiveInfo
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Resource in the container’s filesystem to archive.
        in: query
        name: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: no error
          headers:
            X-Docker-Container-Path-Stat:
              description: |
                A base64 - encoded JSON object with some filesystem header
                information about the path
              schema:
                type: string
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad parameter
        "404":
          content:
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Container or path does not exist
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Get information about files in a container
      tags:
      - Container
    put:
      description: |
        Upload a tar archive to be extracted to a path in the filesystem of container id.
        `path` parameter is asserted to be a directory. If it exists as a file, 400 error
        will be returned with message "not a directory".
      operationId: PutContainerArchive
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: 'Path to a directory in the container to extract the archive’s
          contents into. '
        in: query
        name: path
        required: true
        schema:
          type: string
      - description: |
          If `1`, `true`, or `True` then it will be an error if unpacking the
          given content would cause an existing directory to be replaced with
          a non-directory and vice versa.
        in: query
        name: noOverwriteDirNonDir
        schema:
          type: string
      - description: |
          If `1`, `true`, then it will copy UID/GID maps to the dest file or
          dir
        in: query
        name: copyUIDGID
        schema:
          type: string
      requestBody:
        content:
          application/x-tar:
            schema:
              format: binary
              type: string
          application/octet-stream:
            schema:
              format: binary
              type: string
        description: |
          The input stream must be a tar archive compressed with one of the
          following algorithms: `identity` (no compression), `gzip`, `bzip2`,
          or `xz`.
        required: true
      responses:
        "200":
          content: {}
          description: The content was extracted successfully
        "400":
          content:
            application/json:
              example:
                message: not a directory
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad parameter
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Permission denied, the volume or container rootfs is marked
            as read-only.
        "404":
          content:
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such container or path does not exist inside the container
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Extract an archive of files or folders to a directory in a container
      tags:
      - Container
      x-codegen-request-body-name: inputStream
  /containers/prune:
    post:
      operationId: ContainerPrune
      parameters:
      - description: |
          Filters to process on the prune list, encoded as JSON (a `map[string][]string`).

          Available filters:
          - `until=<timestamp>` Prune containers created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
          - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune containers with (or without, in case `label!=...` is used) the specified labels.
        in: query
        name: filters
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerPruneResponse'
          description: No error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Delete stopped containers
      tags:
      - Container
  /images/json:
    get:
      description: Returns a list of images on the server. Note that it uses a different,
        smaller representation of an image than inspecting a single image.
      operationId: ImageList
      parameters:
      - description: Show all images. Only images from a final layer (no children)
          are shown by default.
        in: query
        name: all
        schema:
          default: false
          type: boolean
      - description: |
          A JSON encoded value of the filters (a `map[string][]string`) to
          process on the images list.

          Available filters:

          - `before`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
          - `dangling=true`
          - `label=key` or `label="key=value"` of an image label
          - `reference`=(`<image-name>[:<tag>]`)
          - `since`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
        in: query
        name: filters
        schema:
          type: string
      - description: Show digest information as a `RepoDigests` field on each image.
        in: query
        name: digests
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              example:
              - Id: sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8
                ParentId: ""
                RepoTags:
                - ubuntu:12.04
                - ubuntu:precise
                RepoDigests:
                - ubuntu@sha256:992069aee4016783df6345315302fa59681aae51a8eeb2f889dea59290f21787
                Created: 1474925151
                Size: 103579269
                VirtualSize: 103579269
                SharedSize: 0
                Labels: {}
                Containers: 2
              - Id: sha256:3e314f95dcace0f5e4fd37b10862fe8398e3c60ed36600bc0ca5fda78b087175
                ParentId: ""
                RepoTags:
                - ubuntu:12.10
                - ubuntu:quantal
                RepoDigests:
                - ubuntu@sha256:002fba3e3255af10be97ea26e476692a7ebed0bb074a9ab960b2e7a1526b15d7
                - ubuntu@sha256:68ea0200f0b90df725d99d823905b04cf844f6039ef60c60bf3e019915017bd3
                Created: 1403128455
                Size: 172064416
                VirtualSize: 172064416
                SharedSize: 0
                Labels: {}
                Containers: 5
              schema:
                items:
                  $ref: '#/components/schemas/ImageSummary'
                type: array
          description: Summary image data for the images matching the query
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: List Images
      tags:
      - Image
  /build:
    post:
      description: |
        Build an image from a tar archive with a `Dockerfile` in it.

        The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](/engine/reference/builder/).

        The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.

        The build is canceled if the client drops the connection by quitting or being killed.
      operationId: ImageBuild
      parameters:
      - description: Path within the build context to the `Dockerfile`. This is ignored
          if `remote` is specified and points to an external `Dockerfile`.
        in: query
        name: dockerfile
        schema:
          default: Dockerfile
          type: string
      - description: A name and optional tag to apply to the image in the `name:tag`
          format. If you omit the tag the default `latest` value is assumed. You can
          provide several `t` parameters.
        in: query
        name: t
        schema:
          type: string
      - description: Extra hosts to add to /etc/hosts
        in: query
        name: extrahosts
        schema:
          type: string
      - description: A Git repository URI or HTTP/HTTPS context URI. If the URI points
          to a single text file, the file’s contents are placed into a file called
          `Dockerfile` and the image is built from that file. If the URI points to
          a tarball, the file is downloaded by the daemon and the contents therein
          used as the context for the build. If the URI points to a tarball and the
          `dockerfile` parameter is also specified, there must be a file with the
          corresponding path inside the tarball.
        in: query
        name: remote
        schema:
          type: string
      - description: Suppress verbose build output.
        in: query
        name: q
        schema:
          default: false
          type: boolean
      - description: Do not use the cache when building the image.
        in: query
        name: nocache
        schema:
          default: false
          type: boolean
      - description: JSON array of images used for build cache resolution.
        in: query
        name: cachefrom
        schema:
          type: string
      - description: Attempt to pull the image even if an older image exists locally.
        in: query
        name: pull
        schema:
          type: string
      - description: Remove intermediate containers after a successful build.
        in: query
        name: rm
        schema:
          default: true
          type: boolean
      - description: Always remove intermediate containers, even upon failure.
        in: query
        name: forcerm
        schema:
          default: false
          type: boolean
      - description: Set memory limit for build.
        in: query
        name: memory
        schema:
          type: integer
      - description: Total memory (memory + swap). Set as `-1` to disable swap.
        in: query
        name: memswap
        schema:
          type: integer
      - description: CPU shares (relative weight).
        in: query
        name: cpushares
        schema:
          type: integer
      - description: CPUs in which to allow execution (e.g., `0-3`, `0,1`).
        in: query
        name: cpusetcpus
        schema:
          type: string
      - description: The length of a CPU period in microseconds.
        in: query
        name: cpuperiod
        schema:
          type: integer
      - description: Microseconds of CPU time that the container can get in a CPU
          period.
        in: query
        name: cpuquota
        schema:
          type: integer
      - description: |
          JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the `Dockerfile` RUN instruction, or for variable expansion in other `Dockerfile` instructions. This is not meant for passing secret values.

          For example, the build arg `FOO=bar` would become `{"FOO":"bar"}` in JSON. This would result in the query parameter `buildargs={"FOO":"bar"}`. Note that `{"FOO":"bar"}` should be URI component encoded.

          [Read more about the buildargs instruction.](/engine/reference/builder/#arg)
        in: query
        name: buildargs
        schema:
          type: string
      - description: Size of `/dev/shm` in bytes. The size must be greater than 0.
          If omitted the system uses 64MB.
        in: query
        name: shmsize
        schema:
          type: integer
      - description: Squash the resulting images layers into a single layer. *(Experimental
          release only.)*
        in: query
        name: squash
        schema:
          type: boolean
      - description: Arbitrary key/value labels to set on the image, as a JSON map
          of string pairs.
        in: query
        name: labels
        schema:
          type: string
      - description: |
          Sets the networking mode for the run commands during build. Supported
          standard values are: `bridge`, `host`, `none`, and `container:<name|id>`.
          Any other value is taken as a custom network's name or ID to which this
          container should connect to.
        in: query
        name: networkmode
        schema:
          type: string
      - in: header
        name: Content-type
        schema:
          default: application/x-tar
          enum:
          - application/x-tar
          type: string
      - description: |
          This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.

          The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:

          ```
          {
            "docker.example.com": {
              "username": "janedoe",
              "password": "hunter2"
            },
            "https://index.docker.io/v1/": {
              "username": "mobydock",
              "password": "conta1n3rize14"
            }
          }
          ```

          Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a `https://` prefix and a `/v1/` suffix even though Docker will prefer to use the v2 registry API.
        in: header
        name: X-Registry-Config
        schema:
          type: string
      - description: Platform in the format os[/arch[/variant]]
        in: query
        name: platform
        schema:
          type: string
      - description: Target build stage
        in: query
        name: target
        schema:
          type: string
      - description: BuildKit output configuration
        in: query
        name: outputs
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
        description: 'A tar archive compressed with one of the following algorithms:
          identity (no compression), gzip, bzip2, xz.'
        required: false
      responses:
        "200":
          content: {}
          description: no error
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad parameter
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Build an image
      tags:
      - Image
      x-codegen-request-body-name: inputStream
  /build/prune:
    post:
      operationId: BuildPrune
      parameters:
      - description: Amount of disk space in bytes to keep for cache
        in: query
        name: keep-storage
        schema:
          format: int64
          type: integer
      - description: Remove all types of build cache
        in: query
        name: all
        schema:
          type: boolean
      - description: |
          A JSON encoded value of the filters (a `map[string][]string`) to
          process on the list of build cache objects.

          Available filters:

          - `until=<duration>`: duration relative to daemon's time, during which build cache was not used, in Go's duration format (e.g., '24h')
          - `id=<id>`
          - `parent=<id>`
          - `type=<string>`
          - `description=<string>`
          - `inuse`
          - `shared`
          - `private`
        in: query
        name: filters
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildPruneResponse'
          description: No error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Delete builder cache
      tags:
      - Image
  /images/create:
    post:
      description: Create an image by either pulling it from a registry or importing
        it.
      operationId: ImageCreate
      parameters:
      - description: Name of the image to pull. The name may include a tag or digest.
          This parameter may only be used when pulling an image. The pull is cancelled
          if the HTTP connection is closed.
        in: query
        name: fromImage
        schema:
          type: string
      - description: Source to import. The value may be a URL from which the image
          can be retrieved or `-` to read the image from the request body. This parameter
          may only be used when importing an image.
        in: query
        name: fromSrc
        schema:
          type: string
      - description: Repository name given to an image when it is imported. The repo
          may include a tag. This parameter may only be used when importing an image.
        in: query
        name: repo
        schema:
          type: string
      - description: Tag or digest. If empty when pulling an image, this causes all
          tags for the given image to be pulled.
        in: query
        name: tag
        schema:
          type: string
      - description: Set commit message for imported image.
        in: query
        name: message
        schema:
          type: string
      - description: |
          A base64url-encoded auth configuration.

          Refer to the [authentication section](#section/Authentication) for
          details.
        in: header
        name: X-Registry-Auth
        schema:
          type: string
      - description: |
          Apply `Dockerfile` instructions to the image that is created,
          for example: `changes=ENV DEBUG=true`.
          Note that `ENV DEBUG=true` should be URI component encoded.

          Supported `Dockerfile` instructions:
          `CMD`|`ENTRYPOINT`|`ENV`|`EXPOSE`|`ONBUILD`|`USER`|`VOLUME`|`WORKDIR`
        explode: false
        in: query
        name: changes
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Platform in the format os[/arch[/variant]]
        in: query
        name: platform
        schema:
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
          application/octet-stream:
            schema:
              type: string
        description: Image content if the value `-` has been specified in fromSrc
          query parameter
        required: false
      responses:
        "200":
          content: {}
          description: no error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: repository does not exist or no read access
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Create an image
      tags:
      - Image
      x-codegen-request-body-name: inputImage
  /images/{name}/json:
    get:
      description: Return low-level information about an image.
      operationId: ImageInspect
      parameters:
      - description: Image name or id
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageInspect'
          description: No error
        "404":
          content:
            application/json:
              example:
                message: 'No such image: someimage (tag: latest)'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such image
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Inspect an image
      tags:
      - Image
  /images/{name}/history:
    get:
      description: Return parent layers of an image.
      operationId: ImageHistory
      parameters:
      - description: Image name or ID
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
              - Id: 3db9c44f45209632d6050b35958829c3a2aa256d81b9a7be45b362ff85c54710
                Created: 1398108230
                CreatedBy: '/bin/sh -c #(nop) ADD file:eb15dbd63394e063b805a3c32ca7bf0266ef64676d5a6fab4801f2e81e2a5148
                  in /'
                Tags:
                - ubuntu:lucid
                - ubuntu:10.04
                Size: 182964289
                Comment: ""
              - Id: 6cfa4d1f33fb861d4d114f43b25abd0ac737509268065cdfd69d544a59c85ab8
                Created: 1398108222
                CreatedBy: '/bin/sh -c #(nop) MAINTAINER Tianon Gravi <admwiggin@gmail.com>
                  - mkimage-debootstrap.sh -i iproute,iputils-ping,ubuntu-minimal
                  -t lucid.tar.xz lucid http://archive.ubuntu.com/ubuntu/'
                Tags: []
                Size: 0
                Comment: ""
              - Id: 511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158
                Created: 1371157430
                CreatedBy: ""
                Tags:
                - scratch12:latest
                - scratch:latest
                Size: 0
                Comment: Imported from -
              schema:
                items:
                  $ref: '#/components/schemas/HistoryResponseItem'
                type: array
          description: List of image layers
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such image
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Get the history of an image
      tags:
      - Image
  /images/{name}/push:
    post:
      description: |
        Push an image to a registry.

        If you wish to push an image on to a private registry, that image must
        already have a tag which references the registry. For example,
        `registry.example.com/myimage:latest`.

        The push is cancelled if the HTTP connection is closed.
      operationId: ImagePush
      parameters:
      - description: Image name or ID.
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: The tag to associate with the image on the registry.
        in: query
        name: tag
        schema:
          type: string
      - description: |
          A base64url-encoded auth configuration.

          Refer to the [authentication section](#section/Authentication) for
          details.
        in: header
        name: X-Registry-Auth
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: No error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such image
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Push an image
      tags:
      - Image
  /images/{name}/tag:
    post:
      description: Tag an image so that it becomes part of a repository.
      operationId: ImageTag
      parameters:
      - description: Image name or ID to tag.
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: The repository to tag in. For example, `someuser/someimage`.
        in: query
        name: repo
        schema:
          type: string
      - description: The name of the new tag.
        in: query
        name: tag
        schema:
          type: string
      responses:
        "201":
          content: {}
          description: No error
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad parameter
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such image
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Conflict
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Tag an image
      tags:
      - Image
  /images/{name}:
    delete:
      description: |
        Remove an image, along with any untagged parent images that were
        referenced by that image.

        Images can't be removed if they have descendant images, are being
        used by a running container or are being used by a build.
      operationId: ImageDelete
      parameters:
      - description: Image name or ID
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: Remove the image even if it is being used by stopped containers
          or has other tags
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: Do not delete untagged parent images
        in: query
        name: noprune
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              example:
              - Untagged: 3e2f21a89f
              - Deleted: 3e2f21a89f
              - Deleted: 53b4f83ac9
              schema:
                items:
                  $ref: '#/components/schemas/ImageDeleteResponseItem'
                type: array
          description: The image was deleted successfully
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such image
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Conflict
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Remove an image
      tags:
      - Image
  /images/search:
    get:
      description: Search for an image on Docker Hub.
      operationId: ImageSearch
      parameters:
      - description: Term to search
        in: query
        name: term
        required: true
        schema:
          type: string
      - description: Maximum number of results to return
        in: query
        name: limit
        schema:
          type: integer
      - description: |
          A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:

          - `is-automated=(true|false)`
          - `is-official=(true|false)`
          - `stars=<number>` Matches images that has at least 'number' stars.
        in: query
        name: filters
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
              - description: ""
                is_official: false
                is_automated: false
                name: wma55/u1210sshd
                star_count: 0
              - description: ""
                is_official: false
                is_automated: false
                name: jdswinbank/sshd
                star_count: 0
              - description: ""
                is_official: false
                is_automated: false
                name: vgauthier/sshd
                star_count: 0
              schema:
                items:
                  $ref: '#/components/schemas/ImageSearchResponseItem'
                type: array
          description: No error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Search images
      tags:
      - Image
  /images/prune:
    post:
      operationId: ImagePrune
      parameters:
      - description: |
          Filters to process on the prune list, encoded as JSON (a `map[string][]string`). Available filters:

          - `dangling=<boolean>` When set to `true` (or `1`), prune only
             unused *and* untagged images. When set to `false`
             (or `0`), all unused images are pruned.
          - `until=<string>` Prune images created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
          - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune images with (or without, in case `label!=...` is used) the specified labels.
        in: query
        name: filters
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagePruneResponse'
          description: No error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Delete unused images
      tags:
      - Image
  /auth:
    post:
      description: |
        Validate credentials for a registry and, if available, get an identity
        token for accessing the registry without password.
      operationId: SystemAuth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthConfig'
        description: Authentication to check
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                Status: Login Succeeded
                IdentityToken: 9cbaf023786cd7...
              schema:
                $ref: '#/components/schemas/SystemAuthResponse'
          description: An identity token was generated successfully.
        "204":
          content: {}
          description: No error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Check auth configuration
      tags:
      - System
      x-codegen-request-body-name: authConfig
  /info:
    get:
      operationId: SystemInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemInfo'
          description: No error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Get system information
      tags:
      - System
  /version:
    get:
      description: Returns the version of Docker that is running and various information
        about the system that Docker is running on.
      operationId: SystemVersion
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemVersion'
          description: no error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Get version
      tags:
      - System
  /_ping:
    get:
      description: This is a dummy endpoint you can use to test if the server is accessible.
      operationId: SystemPing
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: OK
                type: string
          description: no error
          headers:
            Docker-Experimental:
              description: If the server is running with experimental mode enabled
              schema:
                type: boolean
            Cache-Control:
              schema:
                default: no-cache, no-store, must-revalidate
                type: string
            Pragma:
              schema:
                default: no-cache
                type: string
            API-Version:
              description: Max API Version the server supports
              schema:
                type: string
            Builder-Version:
              description: Default version of docker image builder
              schema:
                type: string
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
          headers:
            Cache-Control:
              schema:
                default: no-cache, no-store, must-revalidate
                type: string
            Pragma:
              schema:
                default: no-cache
                type: string
      summary: Ping
      tags:
      - System
    head:
      description: This is a dummy endpoint you can use to test if the server is accessible.
      operationId: SystemPingHead
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: (empty)
                type: string
          description: no error
          headers:
            Docker-Experimental:
              description: If the server is running with experimental mode enabled
              schema:
                type: boolean
            Cache-Control:
              schema:
                default: no-cache, no-store, must-revalidate
                type: string
            Pragma:
              schema:
                default: no-cache
                type: string
            API-Version:
              description: Max API Version the server supports
              schema:
                type: string
            Builder-Version:
              description: Default version of docker image builder
              schema:
                type: string
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Ping
      tags:
      - System
  /commit:
    post:
      operationId: ImageCommit
      parameters:
      - description: The ID or name of the container to commit
        in: query
        name: container
        schema:
          type: string
      - description: Repository name for the created image
        in: query
        name: repo
        schema:
          type: string
      - description: Tag name for the create image
        in: query
        name: tag
        schema:
          type: string
      - description: Commit message
        in: query
        name: comment
        schema:
          type: string
      - description: Author of the image (e.g., `John Hannibal Smith <hannibal@a-team.com>`)
        in: query
        name: author
        schema:
          type: string
      - description: Whether to pause the container before committing
        in: query
        name: pause
        schema:
          default: true
          type: boolean
      - description: '`Dockerfile` instructions to apply while committing'
        in: query
        name: changes
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContainerConfig'
        description: The container configuration
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
          description: no error
        "404":
          content:
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Create a new image from a container
      tags:
      - Image
      x-codegen-request-body-name: containerConfig
  /events:
    get:
      description: |
        Stream real-time events from the server.

        Various objects within Docker report events when something happens to them.

        Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, `update`, and `prune`

        Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, `untag`, and `prune`

        Volumes report these events: `create`, `mount`, `unmount`, `destroy`, and `prune`

        Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, `remove`, and `prune`

        The Docker daemon reports these events: `reload`

        Services report these events: `create`, `update`, and `remove`

        Nodes report these events: `create`, `update`, and `remove`

        Secrets report these events: `create`, `update`, and `remove`

        Configs report these events: `create`, `update`, and `remove`

        The Builder reports `prune` events
      operationId: SystemEvents
      parameters:
      - description: Show events created since this timestamp then stream new events.
        in: query
        name: since
        schema:
          type: string
      - description: Show events created until this timestamp then stop streaming.
        in: query
        name: until
        schema:
          type: string
      - description: |
          A JSON encoded value of filters (a `map[string][]string`) to process on the event list. Available filters:

          - `config=<string>` config name or ID
          - `container=<string>` container name or ID
          - `daemon=<string>` daemon name or ID
          - `event=<string>` event type
          - `image=<string>` image name or ID
          - `label=<string>` image or container label
          - `network=<string>` network name or ID
          - `node=<string>` node ID
          - `plugin`=<string> plugin name or ID
          - `scope`=<string> local or swarm
          - `secret=<string>` secret name or ID
          - `service=<string>` service name or ID
          - `type=<string>` object to filter by, one of `container`, `image`, `volume`, `network`, `daemon`, `plugin`, `node`, `service`, `secret` or `config`
          - `volume=<string>` volume name
        in: query
        name: filters
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventMessage'
          description: no error
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Monitor events
      tags:
      - System
  /system/df:
    get:
      operationId: SystemDataUsage
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemDataUsageResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/SystemDataUsageResponse'
          description: no error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Get data usage information
      tags:
      - System
  /images/{name}/get:
    get:
      description: |
        Get a tarball containing all images and metadata for a repository.

        If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.

        ### Image tarball format

        An image tarball contains one directory per image layer (named using its long ID), each containing these files:

        - `VERSION`: currently `1.0` - the file format version
        - `json`: detailed layer information, similar to `docker inspect layer_id`
        - `layer.tar`: A tarfile containing the filesystem changes in this layer

        The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.

        If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.

        ```json
        {
          "hello-world": {
            "latest": "565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1"
          }
        }
        ```
      operationId: ImageGet
      parameters:
      - description: Image name or ID
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/x-tar:
              schema:
                format: binary
                type: string
          description: no error
        "500":
          content:
            application/x-tar:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Export an image
      tags:
      - Image
  /images/get:
    get:
      description: |
        Get a tarball containing all images and metadata for several image
        repositories.

        For each value of the `names` parameter: if it is a specific name and
        tag (e.g. `ubuntu:latest`), then only that image (and its parents) are
        returned; if it is an image ID, similarly only that image (and its parents)
        are returned and there would be no names referenced in the 'repositories'
        file for this image ID.

        For details on the format, see the [export image endpoint](#operation/ImageGet).
      operationId: ImageGetAll
      parameters:
      - description: Image names to filter by
        explode: false
        in: query
        name: names
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/x-tar:
              schema:
                format: binary
                type: string
          description: no error
        "500":
          content:
            application/x-tar:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Export several images
      tags:
      - Image
  /images/load:
    post:
      description: |
        Load a set of images and tags into a repository.

        For details on the format, see the [export image endpoint](#operation/ImageGet).
      operationId: ImageLoad
      parameters:
      - description: Suppress progress details during load.
        in: query
        name: quiet
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/x-tar:
            schema:
              format: binary
              type: string
        description: Tar archive containing images
        required: false
      responses:
        "200":
          content: {}
          description: no error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Import images
      tags:
      - Image
      x-codegen-request-body-name: imagesTarball
  /containers/{id}/exec:
    post:
      description: Run a command inside a running container.
      operationId: ContainerExec
      parameters:
      - description: ID or name of container
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/ExecConfig'
        content:
          application/json:
            schema:
              example:
                AttachStdin: false
                AttachStdout: true
                AttachStderr: true
                DetachKeys: ctrl-p,ctrl-q
                Tty: false
                Cmd:
                - date
                Env:
                - FOO=bar
                - BAZ=quux
              properties:
                AttachStdin:
                  description: Attach to `stdin` of the exec command.
                  type: boolean
                AttachStdout:
                  description: Attach to `stdout` of the exec command.
                  type: boolean
                AttachStderr:
                  description: Attach to `stderr` of the exec command.
                  type: boolean
                DetachKeys:
                  description: |
                    Override the key sequence for detaching a container. Format is
                    a single character `[a-Z]` or `ctrl-<value>` where `<value>`
                    is one of: `a-z`, `@`, `^`, `[`, `,` or `_`.
                  type: string
                Tty:
                  description: Allocate a pseudo-TTY.
                  type: boolean
                Env:
                  description: |
                    A list of environment variables in the form `["VAR=value", ...]`.
                  items:
                    type: string
                  type: array
                Cmd:
                  description: Command to run, as a string or array of strings.
                  items:
                    type: string
                  type: array
                Privileged:
                  default: false
                  description: Runs the exec process with extended privileges.
                  type: boolean
                User:
                  description: |
                    The user, and optionally, group to run the exec process inside
                    the container. Format is one of: `user`, `user:group`, `uid`,
                    or `uid:gid`.
                  type: string
                WorkingDir:
                  description: |
                    The working directory for the exec process inside the container.
                  type: string
              title: ExecConfig
              type: object
        description: Exec configuration
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
          description: no error
        "404":
          content:
            application/json:
              example:
                message: 'No such container: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such container
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: container is paused
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Create an exec instance
      tags:
      - Exec
      x-codegen-request-body-name: execConfig
  /exec/{id}/start:
    post:
      description: |
        Starts a previously set up exec instance. If detach is true, this endpoint
        returns immediately after starting the command. Otherwise, it sets up an
        interactive session with the command.
      operationId: ExecStart
      parameters:
      - description: Exec instance ID
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/ExecStartConfig'
        content:
          application/json:
            schema:
              example:
                Detach: false
                Tty: false
              properties:
                Detach:
                  description: Detach from the command.
                  type: boolean
                Tty:
                  description: Allocate a pseudo-TTY.
                  type: boolean
              title: ExecStartConfig
              type: object
        required: false
      responses:
        "200":
          content: {}
          description: No error
        "404":
          content:
            application/vnd.docker.raw-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such exec instance
        "409":
          content:
            application/vnd.docker.raw-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Container is stopped or paused
      summary: Start an exec instance
      tags:
      - Exec
      x-codegen-request-body-name: execStartConfig
  /exec/{id}/resize:
    post:
      description: |
        Resize the TTY session used by an exec instance. This endpoint only works
        if `tty` was specified as part of creating and starting the exec instance.
      operationId: ExecResize
      parameters:
      - description: Exec instance ID
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Height of the TTY session in characters
        in: query
        name: h
        schema:
          type: integer
      - description: Width of the TTY session in characters
        in: query
        name: w
        schema:
          type: integer
      responses:
        "200":
          content: {}
          description: No error
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such exec instance
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Resize an exec instance
      tags:
      - Exec
  /exec/{id}/json:
    get:
      description: Return low-level information about an exec instance.
      operationId: ExecInspect
      parameters:
      - description: Exec instance ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                CanRemove: false
                ContainerID: b53ee82b53a40c7dca428523e34f741f3abc51d9f297a14ff874bf761b995126
                DetachKeys: ""
                ExitCode: 2
                ID: f33bbfb39f5b142420f4759b2348913bd4a8d1a6d7fd56499cb41a1bb91d7b3b
                OpenStderr: true
                OpenStdin: true
                OpenStdout: true
                ProcessConfig:
                  arguments:
                  - -c
                  - exit 2
                  entrypoint: sh
                  privileged: false
                  tty: true
                  user: "1000"
                Running: false
                Pid: 42000
              schema:
                $ref: '#/components/schemas/ExecInspectResponse'
          description: No error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such exec instance
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Inspect an exec instance
      tags:
      - Exec
  /volumes:
    get:
      operationId: VolumeList
      parameters:
      - description: |
          JSON encoded value of the filters (a `map[string][]string`) to
          process on the volumes list. Available filters:

          - `dangling=<boolean>` When set to `true` (or `1`), returns all
             volumes that are not in use by a container. When set to `false`
             (or `0`), only volumes that are in use by one or more
             containers are returned.
          - `driver=<volume-driver-name>` Matches volumes based on their driver.
          - `label=<key>` or `label=<key>:<value>` Matches volumes based on
             the presence of a `label` alone or a `label` and a value.
          - `name=<volume-name>` Matches all or part of a volume name.
        in: query
        name: filters
        schema:
          format: json
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeListResponse'
          description: Summary volume data that matches the query
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: List volumes
      tags:
      - Volume
  /volumes/create:
    post:
      operationId: VolumeCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VolumeCreateOptions'
        description: Volume configuration
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
          description: The volume was created successfully
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Create a volume
      tags:
      - Volume
      x-codegen-request-body-name: volumeConfig
  /volumes/{name}:
    delete:
      description: Instruct the driver to remove the volume.
      operationId: VolumeDelete
      parameters:
      - description: Volume name or ID
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: Force the removal of the volume
        in: query
        name: force
        schema:
          default: false
          type: boolean
      responses:
        "204":
          content: {}
          description: The volume was removed
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such volume or volume driver
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Volume is in use and cannot be removed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Remove a volume
      tags:
      - Volume
    get:
      operationId: VolumeInspect
      parameters:
      - description: Volume name or ID
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
          description: No error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No such volume
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Inspect a volume
      tags:
      - Volume
  /volumes/prune:
    post:
      operationId: VolumePrune
      parameters:
      - description: |
          Filters to process on the prune list, encoded as JSON (a `map[string][]string`).

          Available filters:
          - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune volumes with (or without, in case `label!=...` is used) the specified labels.
        in: query
        name: filters
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumePruneResponse'
          description: No error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Delete unused volumes
      tags:
      - Volume
  /networks:
    get:
      description: |
        Returns a list of networks. For details on the format, see the
        [network inspect endpoint](#operation/NetworkInspect).

        Note that it uses a different, smaller representation of a network than
        inspecting a single network. For example, the list of containers attached
        to the network is not propagated in API versions 1.28 and up.
      operationId: NetworkList
      parameters:
      - description: |
          JSON encoded value of the filters (a `map[string][]string`) to process
          on the networks list.

          Available filters:

          - `dangling=<boolean>` When set to `true` (or `1`), returns all
             networks that are not in use by a container. When set to `false`
             (or `0`), only networks that are in use by one or more
             containers are returned.
          - `driver=<driver-name>` Matches a network's driver.
          - `id=<network-id>` Matches all or part of a network ID.
          - `label=<key>` or `label=<key>=<value>` of a network label.
          - `name=<network-name>` Matches all or part of a network name.
          - `scope=["swarm"|"global"|"local"]` Filters networks by scope (`swarm`, `global`, or `local`).
          - `type=["custom"|"builtin"]` Filters networks by type. The `custom` keyword returns all user-defined networks.
        in: query
        name: filters
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
              - Name: bridge
                Id: f2de39df4171b0dc801e8002d1d999b77256983dfc63041c0f34030aa3977566
                Created: 2016-10-19T06:21:00.416543526Z
                Scope: local
                Driver: bridge
                EnableIPv6: false
                Internal: false
                Attachable: false
                Ingress: false
                IPAM:
                  Driver: default
                  Config:
                  - Subnet: 172.17.0.0/16
                Options:
                  com.docker.network.bridge.default_bridge: "true"
                  com.docker.network.bridge.enable_icc: "true"
                  com.docker.network.bridge.enable_ip_masquerade: "true"
                  com.docker.network.bridge.host_binding_ipv4: 0.0.0.0
                  com.docker.network.bridge.name: docker0
                  com.docker.network.driver.mtu: "1500"
              - Name: none
                Id: e086a3893b05ab69242d3c44e49483a3bbbd3a26b46baa8f61ab797c1088d794
                Created: 0001-01-01T00:00:00Z
                Scope: local
                Driver: "null"
                EnableIPv6: false
                Internal: false
                Attachable: false
                Ingress: false
                IPAM:
                  Driver: default
                  Config: []
                Containers: {}
                Options: {}
              - Name: host
                Id: 13e871235c677f196c4e1ecebb9dc733b9b2d2ab589e30c539efeda84a24215e
                Created: 0001-01-01T00:00:00Z
                Scope: local
                Driver: host
                EnableIPv6: false
                Internal: false
                Attachable: false
                Ingress: false
                IPAM:
                  Driver: default
                  Config: []
                Containers: {}
                Options: {}
              schema:
                items:
                  $ref: '#/components/schemas/Network'
                type: array
          description: No error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: List networks
      tags:
      - Network
  /networks/{id}:
    delete:
      operationId: NetworkDelete
      parameters:
      - description: Network ID or name
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: operation not supported for pre-defined networks
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such network
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Remove a network
      tags:
      - Network
    get:
      operationId: NetworkInspect
      parameters:
      - description: Network ID or name
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Detailed inspect output for troubleshooting
        in: query
        name: verbose
        schema:
          default: false
          type: boolean
      - description: Filter the network by scope (swarm, global, or local)
        in: query
        name: scope
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Network'
          description: No error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Network not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Inspect a network
      tags:
      - Network
  /networks/create:
    post:
      operationId: NetworkCreate
      requestBody:
        $ref: '#/components/requestBodies/NetworkCreateRequest'
        content:
          application/json:
            schema:
              example:
                Name: isolated_nw
                CheckDuplicate: false
                Driver: bridge
                EnableIPv6: true
                IPAM:
                  Driver: default
                  Config:
                  - Subnet: 172.20.0.0/16
                    IPRange: 172.20.10.0/24
                    Gateway: 172.20.10.11
                  - Subnet: 2001:db8:abcd::/64
                    Gateway: 2001:db8:abcd::1011
                  Options:
                    foo: bar
                Internal: true
                Attachable: false
                Ingress: false
                Options:
                  com.docker.network.bridge.default_bridge: "true"
                  com.docker.network.bridge.enable_icc: "true"
                  com.docker.network.bridge.enable_ip_masquerade: "true"
                  com.docker.network.bridge.host_binding_ipv4: 0.0.0.0
                  com.docker.network.bridge.name: docker0
                  com.docker.network.driver.mtu: "1500"
                Labels:
                  com.example.some-label: some-value
                  com.example.some-other-label: some-other-value
              properties:
                Name:
                  description: The network's name.
                  type: string
                CheckDuplicate:
                  description: |
                    Check for networks with duplicate names. Since Network is
                    primarily keyed based on a random ID and not on the name, and
                    network name is strictly a user-friendly alias to the network
                    which is uniquely identified using ID, there is no guaranteed
                    way to check for duplicates. CheckDuplicate is there to provide
                    a best effort checking of any networks which has the same name
                    but it is not guaranteed to catch all name collisions.
                  type: boolean
                Driver:
                  default: bridge
                  description: Name of the network driver plugin to use.
                  type: string
                Internal:
                  description: Restrict external access to the network.
                  type: boolean
                Attachable:
                  description: |
                    Globally scoped network is manually attachable by regular
                    containers from workers in swarm mode.
                  type: boolean
                Ingress:
                  description: |
                    Ingress network is the network which provides the routing-mesh
                    in swarm mode.
                  type: boolean
                IPAM:
                  $ref: '#/components/schemas/IPAM'
                EnableIPv6:
                  description: Enable IPv6 on the network.
                  type: boolean
                Options:
                  additionalProperties:
                    type: string
                  description: Network specific options to be used by the drivers.
                  type: object
                Labels:
                  additionalProperties:
                    type: string
                  description: User-defined key/value metadata.
                  type: object
              required:
              - Name
              title: NetworkCreateRequest
              type: object
        description: Network configuration
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkCreateResponse'
          description: No error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: operation not supported for pre-defined networks
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: plugin not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Create a network
      tags:
      - Network
      x-codegen-request-body-name: networkConfig
  /networks/{id}/connect:
    post:
      operationId: NetworkConnect
      parameters:
      - description: Network ID or name
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/NetworkDisconnectRequest'
        content:
          application/json:
            schema:
              example:
                Container: 3613f73ba0e4
                EndpointConfig:
                  IPAMConfig:
                    IPv4Address: 172.24.56.89
                    IPv6Address: 2001:db8::5689
              properties:
                Container:
                  description: The ID or name of the container to connect to the network.
                  type: string
                EndpointConfig:
                  $ref: '#/components/schemas/EndpointSettings'
              title: NetworkDisconnectRequest
              type: object
        required: true
      responses:
        "200":
          content: {}
          description: No error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation not supported for swarm scoped networks
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Network or container not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Connect a container to a network
      tags:
      - Network
      x-codegen-request-body-name: container
  /networks/{id}/disconnect:
    post:
      operationId: NetworkDisconnect
      parameters:
      - description: Network ID or name
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/NetworkConnectRequest'
        content:
          application/json:
            schema:
              example:
                Container: Container
                Force: true
              properties:
                Container:
                  description: |
                    The ID or name of the container to disconnect from the network.
                  type: string
                Force:
                  description: |
                    Force the container to disconnect from the network.
                  type: boolean
              title: NetworkConnectRequest
              type: object
        required: true
      responses:
        "200":
          content: {}
          description: No error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation not supported for swarm scoped networks
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Network or container not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Disconnect a container from a network
      tags:
      - Network
      x-codegen-request-body-name: container
  /networks/prune:
    post:
      operationId: NetworkPrune
      parameters:
      - description: |
          Filters to process on the prune list, encoded as JSON (a `map[string][]string`).

          Available filters:
          - `until=<timestamp>` Prune networks created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
          - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune networks with (or without, in case `label!=...` is used) the specified labels.
        in: query
        name: filters
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkPruneResponse'
          description: No error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Delete unused networks
      tags:
      - Network
  /plugins:
    get:
      description: Returns information about installed plugins.
      operationId: PluginList
      parameters:
      - description: |
          A JSON encoded value of the filters (a `map[string][]string`) to
          process on the plugin list.

          Available filters:

          - `capability=<capability name>`
          - `enable=<true>|<false>`
        in: query
        name: filters
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Plugin'
                type: array
          description: No error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: List plugins
      tags:
      - Plugin
  /plugins/privileges:
    get:
      operationId: GetPluginPrivileges
      parameters:
      - description: |
          The name of the plugin. The `:latest` tag is optional, and is the
          default if omitted.
        in: query
        name: remote
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - Name: network
                  Description: ""
                  Value:
                  - host
                - Name: mount
                  Description: ""
                  Value:
                  - /data
                - Name: device
                  Description: ""
                  Value:
                  - /dev/cpu_dma_latency
                items:
                  $ref: '#/components/schemas/PluginPrivilege'
                type: array
            text/plain:
              schema:
                example:
                - Name: network
                  Description: ""
                  Value:
                  - host
                - Name: mount
                  Description: ""
                  Value:
                  - /data
                - Name: device
                  Description: ""
                  Value:
                  - /dev/cpu_dma_latency
                items:
                  $ref: '#/components/schemas/PluginPrivilege'
                type: array
          description: no error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Get plugin privileges
      tags:
      - Plugin
  /plugins/pull:
    post:
      description: |
        Pulls and installs a plugin. After the plugin is installed, it can be
        enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable).
      operationId: PluginPull
      parameters:
      - description: |
          Remote reference for plugin to install.

          The `:latest` tag is optional, and is used as the default if omitted.
        in: query
        name: remote
        required: true
        schema:
          type: string
      - description: |
          Local name for the pulled plugin.

          The `:latest` tag is optional, and is used as the default if omitted.
        in: query
        name: name
        schema:
          type: string
      - description: |
          A base64url-encoded auth configuration to use when pulling a plugin
          from a registry.

          Refer to the [authentication section](#section/Authentication) for
          details.
        in: header
        name: X-Registry-Auth
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              example:
              - Name: network
                Description: ""
                Value:
                - host
              - Name: mount
                Description: ""
                Value:
                - /data
              - Name: device
                Description: ""
                Value:
                - /dev/cpu_dma_latency
              items:
                $ref: '#/components/schemas/PluginPrivilege'
              type: array
          text/plain:
            schema:
              example:
              - Name: network
                Description: ""
                Value:
                - host
              - Name: mount
                Description: ""
                Value:
                - /data
              - Name: device
                Description: ""
                Value:
                - /dev/cpu_dma_latency
              items:
                $ref: '#/components/schemas/PluginPrivilege'
              type: array
        required: false
      responses:
        "204":
          content: {}
          description: no error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Install a plugin
      tags:
      - Plugin
      x-codegen-request-body-name: body
  /plugins/{name}/json:
    get:
      operationId: PluginInspect
      parameters:
      - description: |
          The name of the plugin. The `:latest` tag is optional, and is the
          default if omitted.
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
            text/plain:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: no error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: plugin is not installed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Inspect a plugin
      tags:
      - Plugin
  /plugins/{name}:
    delete:
      operationId: PluginDelete
      parameters:
      - description: |
          The name of the plugin. The `:latest` tag is optional, and is the
          default if omitted.
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: |
          Disable the plugin before removing. This may result in issues if the
          plugin is in use by a container.
        in: query
        name: force
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
            text/plain:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: no error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: plugin is not installed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Remove a plugin
      tags:
      - Plugin
  /plugins/{name}/enable:
    post:
      operationId: PluginEnable
      parameters:
      - description: |
          The name of the plugin. The `:latest` tag is optional, and is the
          default if omitted.
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: Set the HTTP client timeout (in seconds)
        in: query
        name: timeout
        schema:
          default: 0
          type: integer
      responses:
        "200":
          content: {}
          description: no error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: plugin is not installed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Enable a plugin
      tags:
      - Plugin
  /plugins/{name}/disable:
    post:
      operationId: PluginDisable
      parameters:
      - description: |
          The name of the plugin. The `:latest` tag is optional, and is the
          default if omitted.
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: no error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: plugin is not installed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Disable a plugin
      tags:
      - Plugin
  /plugins/{name}/upgrade:
    post:
      operationId: PluginUpgrade
      parameters:
      - description: |
          The name of the plugin. The `:latest` tag is optional, and is the
          default if omitted.
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: |
          Remote reference to upgrade to.

          The `:latest` tag is optional, and is used as the default if omitted.
        in: query
        name: remote
        required: true
        schema:
          type: string
      - description: |
          A base64url-encoded auth configuration to use when pulling a plugin
          from a registry.

          Refer to the [authentication section](#section/Authentication) for
          details.
        in: header
        name: X-Registry-Auth
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              example:
              - Name: network
                Description: ""
                Value:
                - host
              - Name: mount
                Description: ""
                Value:
                - /data
              - Name: device
                Description: ""
                Value:
                - /dev/cpu_dma_latency
              items:
                $ref: '#/components/schemas/PluginPrivilege'
              type: array
          text/plain:
            schema:
              example:
              - Name: network
                Description: ""
                Value:
                - host
              - Name: mount
                Description: ""
                Value:
                - /data
              - Name: device
                Description: ""
                Value:
                - /dev/cpu_dma_latency
              items:
                $ref: '#/components/schemas/PluginPrivilege'
              type: array
        required: false
      responses:
        "204":
          content: {}
          description: no error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: plugin not installed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Upgrade a plugin
      tags:
      - Plugin
      x-codegen-request-body-name: body
  /plugins/create:
    post:
      operationId: PluginCreate
      parameters:
      - description: |
          The name of the plugin. The `:latest` tag is optional, and is the
          default if omitted.
        in: query
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-tar:
            schema:
              format: binary
              type: string
        description: Path to tar containing plugin rootfs and manifest
        required: false
      responses:
        "204":
          content: {}
          description: no error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Create a plugin
      tags:
      - Plugin
      x-codegen-request-body-name: tarContext
  /plugins/{name}/push:
    post:
      description: |
        Push a plugin to the registry.
      operationId: PluginPush
      parameters:
      - description: |
          The name of the plugin. The `:latest` tag is optional, and is the
          default if omitted.
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: no error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: plugin not installed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Push a plugin
      tags:
      - Plugin
  /plugins/{name}/set:
    post:
      operationId: PluginSet
      parameters:
      - description: |
          The name of the plugin. The `:latest` tag is optional, and is the
          default if omitted.
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              example:
              - DEBUG=1
              items:
                type: string
              type: array
        required: false
      responses:
        "204":
          content: {}
          description: No error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Plugin not installed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Configure a plugin
      tags:
      - Plugin
      x-codegen-request-body-name: body
  /nodes:
    get:
      operationId: NodeList
      parameters:
      - description: |
          Filters to process on the nodes list, encoded as JSON (a `map[string][]string`).

          Available filters:
          - `id=<node id>`
          - `label=<engine label>`
          - `membership=`(`accepted`|`pending`)`
          - `name=<node name>`
          - `node.label=<node label>`
          - `role=`(`manager`|`worker`)`
        in: query
        name: filters
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Node'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/Node'
                type: array
          description: no error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: List nodes
      tags:
      - Node
  /nodes/{id}:
    delete:
      operationId: NodeDelete
      parameters:
      - description: The ID or name of the node
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Force remove a node from the swarm
        in: query
        name: force
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content: {}
          description: no error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such node
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Delete a node
      tags:
      - Node
    get:
      operationId: NodeInspect
      parameters:
      - description: The ID or name of the node
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
            text/plain:
              schema:
                $ref: '#/components/schemas/Node'
          description: no error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such node
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Inspect a node
      tags:
      - Node
  /nodes/{id}/update:
    post:
      operationId: NodeUpdate
      parameters:
      - description: The ID of the node
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |
          The version number of the node object being updated. This is required
          to avoid conflicting writes.
        in: query
        name: version
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeSpec'
          text/plain:
            schema:
              $ref: '#/components/schemas/NodeSpec'
        required: false
      responses:
        "200":
          content: {}
          description: no error
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such node
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Update a node
      tags:
      - Node
      x-codegen-request-body-name: body
  /swarm:
    get:
      operationId: SwarmInspect
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swarm'
            text/plain:
              schema:
                $ref: '#/components/schemas/Swarm'
          description: no error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such swarm
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Inspect swarm
      tags:
      - Swarm
  /swarm/init:
    post:
      operationId: SwarmInit
      requestBody:
        $ref: '#/components/requestBodies/SwarmInitRequest'
        content:
          application/json:
            schema:
              example:
                ListenAddr: 0.0.0.0:2377
                AdvertiseAddr: 192.168.1.1:2377
                DataPathPort: 4789
                DefaultAddrPool:
                - 10.10.0.0/8
                - 20.20.0.0/8
                SubnetSize: 24
                ForceNewCluster: false
                Spec:
                  Orchestration: {}
                  Raft: {}
                  Dispatcher: {}
                  CAConfig: {}
                  EncryptionConfig:
                    AutoLockManagers: false
              properties:
                ListenAddr:
                  description: |
                    Listen address used for inter-manager communication, as well
                    as determining the networking interface used for the VXLAN
                    Tunnel Endpoint (VTEP). This can either be an address/port
                    combination in the form `192.168.1.1:4567`, or an interface
                    followed by a port number, like `eth0:4567`. If the port number
                    is omitted, the default swarm listening port is used.
                  type: string
                AdvertiseAddr:
                  description: |
                    Externally reachable address advertised to other nodes. This
                    can either be an address/port combination in the form
                    `192.168.1.1:4567`, or an interface followed by a port number,
                    like `eth0:4567`. If the port number is omitted, the port
                    number from the listen address is used. If `AdvertiseAddr` is
                    not specified, it will be automatically detected when possible.
                  type: string
                DataPathAddr:
                  description: |
                    Address or interface to use for data path traffic (format:
                    `<ip|interface>`), for example,  `192.168.1.1`, or an interface,
                    like `eth0`. If `DataPathAddr` is unspecified, the same address
                    as `AdvertiseAddr` is used.

                    The `DataPathAddr` specifies the address that global scope
                    network drivers will publish towards other  nodes in order to
                    reach the containers running on this node. Using this parameter
                    it is possible to separate the container data traffic from the
                    management traffic of the cluster.
                  type: string
                DataPathPort:
                  description: |
                    DataPathPort specifies the data path port number for data traffic.
                    Acceptable port range is 1024 to 49151.
                    if no port is set or is set to 0, default port 4789 will be used.
                  format: uint32
                  type: integer
                DefaultAddrPool:
                  description: |
                    Default Address Pool specifies default subnet pools for global
                    scope networks.
                  items:
                    example: ""
                    type: string
                  type: array
                ForceNewCluster:
                  description: Force creation of a new swarm.
                  type: boolean
                SubnetSize:
                  description: |
                    SubnetSize specifies the subnet size of the networks created
                    from the default subnet pool.
                  format: uint32
                  type: integer
                Spec:
                  $ref: '#/components/schemas/SwarmSpec'
              title: SwarmInitRequest
              type: object
          text/plain:
            schema:
              example:
                ListenAddr: 0.0.0.0:2377
                AdvertiseAddr: 192.168.1.1:2377
                DataPathPort: 4789
                DefaultAddrPool:
                - 10.10.0.0/8
                - 20.20.0.0/8
                SubnetSize: 24
                ForceNewCluster: false
                Spec:
                  Orchestration: {}
                  Raft: {}
                  Dispatcher: {}
                  CAConfig: {}
                  EncryptionConfig:
                    AutoLockManagers: false
              properties:
                ListenAddr:
                  description: |
                    Listen address used for inter-manager communication, as well
                    as determining the networking interface used for the VXLAN
                    Tunnel Endpoint (VTEP). This can either be an address/port
                    combination in the form `192.168.1.1:4567`, or an interface
                    followed by a port number, like `eth0:4567`. If the port number
                    is omitted, the default swarm listening port is used.
                  type: string
                AdvertiseAddr:
                  description: |
                    Externally reachable address advertised to other nodes. This
                    can either be an address/port combination in the form
                    `192.168.1.1:4567`, or an interface followed by a port number,
                    like `eth0:4567`. If the port number is omitted, the port
                    number from the listen address is used. If `AdvertiseAddr` is
                    not specified, it will be automatically detected when possible.
                  type: string
                DataPathAddr:
                  description: |
                    Address or interface to use for data path traffic (format:
                    `<ip|interface>`), for example,  `192.168.1.1`, or an interface,
                    like `eth0`. If `DataPathAddr` is unspecified, the same address
                    as `AdvertiseAddr` is used.

                    The `DataPathAddr` specifies the address that global scope
                    network drivers will publish towards other  nodes in order to
                    reach the containers running on this node. Using this parameter
                    it is possible to separate the container data traffic from the
                    management traffic of the cluster.
                  type: string
                DataPathPort:
                  description: |
                    DataPathPort specifies the data path port number for data traffic.
                    Acceptable port range is 1024 to 49151.
                    if no port is set or is set to 0, default port 4789 will be used.
                  format: uint32
                  type: integer
                DefaultAddrPool:
                  description: |
                    Default Address Pool specifies default subnet pools for global
                    scope networks.
                  items:
                    example: ""
                    type: string
                  type: array
                ForceNewCluster:
                  description: Force creation of a new swarm.
                  type: boolean
                SubnetSize:
                  description: |
                    SubnetSize specifies the subnet size of the networks created
                    from the default subnet pool.
                  format: uint32
                  type: integer
                Spec:
                  $ref: '#/components/schemas/SwarmSpec'
              title: SwarmInitRequest
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                description: The node ID
                example: 7v2t30z9blmxuhnyo6s4cpenp
                type: string
            text/plain:
              schema:
                description: The node ID
                example: 7v2t30z9blmxuhnyo6s4cpenp
                type: string
          description: no error
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is already part of a swarm
      summary: Initialize a new swarm
      tags:
      - Swarm
      x-codegen-request-body-name: body
  /swarm/join:
    post:
      operationId: SwarmJoin
      requestBody:
        $ref: '#/components/requestBodies/SwarmJoinRequest'
        content:
          application/json:
            schema:
              example:
                ListenAddr: 0.0.0.0:2377
                AdvertiseAddr: 192.168.1.1:2377
                RemoteAddrs:
                - node1:2377
                JoinToken: SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2
              properties:
                ListenAddr:
                  description: |
                    Listen address used for inter-manager communication if the node
                    gets promoted to manager, as well as determining the networking
                    interface used for the VXLAN Tunnel Endpoint (VTEP).
                  type: string
                AdvertiseAddr:
                  description: |
                    Externally reachable address advertised to other nodes. This
                    can either be an address/port combination in the form
                    `192.168.1.1:4567`, or an interface followed by a port number,
                    like `eth0:4567`. If the port number is omitted, the port
                    number from the listen address is used. If `AdvertiseAddr` is
                    not specified, it will be automatically detected when possible.
                  type: string
                DataPathAddr:
                  description: |
                    Address or interface to use for data path traffic (format:
                    `<ip|interface>`), for example,  `192.168.1.1`, or an interface,
                    like `eth0`. If `DataPathAddr` is unspecified, the same addres
                    as `AdvertiseAddr` is used.

                    The `DataPathAddr` specifies the address that global scope
                    network drivers will publish towards other nodes in order to
                    reach the containers running on this node. Using this parameter
                    it is possible to separate the container data traffic from the
                    management traffic of the cluster.
                  type: string
                RemoteAddrs:
                  description: |
                    Addresses of manager nodes already participating in the swarm.
                  items:
                    type: string
                  type: array
                JoinToken:
                  description: Secret token for joining this swarm.
                  type: string
              title: SwarmJoinRequest
              type: object
          text/plain:
            schema:
              example:
                ListenAddr: 0.0.0.0:2377
                AdvertiseAddr: 192.168.1.1:2377
                RemoteAddrs:
                - node1:2377
                JoinToken: SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2
              properties:
                ListenAddr:
                  description: |
                    Listen address used for inter-manager communication if the node
                    gets promoted to manager, as well as determining the networking
                    interface used for the VXLAN Tunnel Endpoint (VTEP).
                  type: string
                AdvertiseAddr:
                  description: |
                    Externally reachable address advertised to other nodes. This
                    can either be an address/port combination in the form
                    `192.168.1.1:4567`, or an interface followed by a port number,
                    like `eth0:4567`. If the port number is omitted, the port
                    number from the listen address is used. If `AdvertiseAddr` is
                    not specified, it will be automatically detected when possible.
                  type: string
                DataPathAddr:
                  description: |
                    Address or interface to use for data path traffic (format:
                    `<ip|interface>`), for example,  `192.168.1.1`, or an interface,
                    like `eth0`. If `DataPathAddr` is unspecified, the same addres
                    as `AdvertiseAddr` is used.

                    The `DataPathAddr` specifies the address that global scope
                    network drivers will publish towards other nodes in order to
                    reach the containers running on this node. Using this parameter
                    it is possible to separate the container data traffic from the
                    management traffic of the cluster.
                  type: string
                RemoteAddrs:
                  description: |
                    Addresses of manager nodes already participating in the swarm.
                  items:
                    type: string
                  type: array
                JoinToken:
                  description: Secret token for joining this swarm.
                  type: string
              title: SwarmJoinRequest
              type: object
        required: true
      responses:
        "200":
          content: {}
          description: no error
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is already part of a swarm
      summary: Join an existing swarm
      tags:
      - Swarm
      x-codegen-request-body-name: body
  /swarm/leave:
    post:
      operationId: SwarmLeave
      parameters:
      - description: |
          Force leave swarm, even if this is the last manager or that it will
          break the cluster.
        in: query
        name: force
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content: {}
          description: no error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Leave a swarm
      tags:
      - Swarm
  /swarm/update:
    post:
      operationId: SwarmUpdate
      parameters:
      - description: |
          The version number of the swarm object being updated. This is
          required to avoid conflicting writes.
        in: query
        name: version
        required: true
        schema:
          format: int64
          type: integer
      - description: Rotate the worker join token.
        in: query
        name: rotateWorkerToken
        schema:
          default: false
          type: boolean
      - description: Rotate the manager join token.
        in: query
        name: rotateManagerToken
        schema:
          default: false
          type: boolean
      - description: Rotate the manager unlock key.
        in: query
        name: rotateManagerUnlockKey
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SwarmSpec'
          text/plain:
            schema:
              $ref: '#/components/schemas/SwarmSpec'
        required: true
      responses:
        "200":
          content: {}
          description: no error
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Update a swarm
      tags:
      - Swarm
      x-codegen-request-body-name: body
  /swarm/unlockkey:
    get:
      operationId: SwarmUnlockkey
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlockKeyResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/UnlockKeyResponse'
          description: no error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Get the unlock key
      tags:
      - Swarm
  /swarm/unlock:
    post:
      operationId: SwarmUnlock
      requestBody:
        $ref: '#/components/requestBodies/SwarmUnlockRequest'
        content:
          application/json:
            schema:
              example:
                UnlockKey: SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8
              properties:
                UnlockKey:
                  description: The swarm's unlock key.
                  type: string
              title: SwarmUnlockRequest
              type: object
        required: true
      responses:
        "200":
          content: {}
          description: no error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Unlock a locked manager
      tags:
      - Swarm
      x-codegen-request-body-name: body
  /services:
    get:
      operationId: ServiceList
      parameters:
      - description: |
          A JSON encoded value of the filters (a `map[string][]string`) to
          process on the services list.

          Available filters:

          - `id=<service id>`
          - `label=<service label>`
          - `mode=["replicated"|"global"]`
          - `name=<service name>`
        in: query
        name: filters
        schema:
          type: string
      - description: |
          Include service status, with count of running and desired tasks.
        in: query
        name: status
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Service'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/Service'
                type: array
          description: no error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: List services
      tags:
      - Service
  /services/create:
    post:
      operationId: ServiceCreate
      parameters:
      - description: |
          A base64url-encoded auth configuration for pulling from private
          registries.

          Refer to the [authentication section](#section/Authentication) for
          details.
        in: header
        name: X-Registry-Auth
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ServiceSpec'
              - example:
                  Name: web
                  TaskTemplate:
                    ContainerSpec:
                      Image: nginx:alpine
                      Mounts:
                      - ReadOnly: true
                        Source: web-data
                        Target: /usr/share/nginx/html
                        Type: volume
                        VolumeOptions:
                          DriverConfig: {}
                          Labels:
                            com.example.something: something-value
                      Hosts:
                      - 10.10.10.10 host1
                      - ABCD:EF01:2345:6789:ABCD:EF01:2345:6789 host2
                      User: "33"
                      DNSConfig:
                        Nameservers:
                        - 8.8.8.8
                        Search:
                        - example.org
                        Options:
                        - timeout:3
                      Secrets:
                      - File:
                          Name: www.example.org.key
                          UID: "33"
                          GID: "33"
                          Mode: 384
                        SecretID: fpjqlhnwb19zds35k8wn80lq9
                        SecretName: example_org_domain_key
                    LogDriver:
                      Name: json-file
                      Options:
                        max-file: "3"
                        max-size: 10M
                    Placement: {}
                    Resources:
                      Limits:
                        MemoryBytes: 104857600
                      Reservations: {}
                    RestartPolicy:
                      Condition: on-failure
                      Delay: 10000000000
                      MaxAttempts: 10
                  Mode:
                    Replicated:
                      Replicas: 4
                  UpdateConfig:
                    Parallelism: 2
                    Delay: 1000000000
                    FailureAction: pause
                    Monitor: 15000000000
                    MaxFailureRatio: 0.15
                  RollbackConfig:
                    Parallelism: 1
                    Delay: 1000000000
                    FailureAction: pause
                    Monitor: 15000000000
                    MaxFailureRatio: 0.15
                  EndpointSpec:
                    Ports:
                    - Protocol: tcp
                      PublishedPort: 8080
                      TargetPort: 80
                  Labels:
                    foo: bar
                type: object
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceCreateResponse'
          description: no error
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: network is not eligible for services
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: name conflicts with an existing service
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Create a service
      tags:
      - Service
      x-codegen-request-body-name: body
  /services/{id}:
    delete:
      operationId: ServiceDelete
      parameters:
      - description: ID or name of service.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: no error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such service
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Delete a service
      tags:
      - Service
    get:
      operationId: ServiceInspect
      parameters:
      - description: ID or name of service.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Fill empty fields with default values.
        in: query
        name: insertDefaults
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
            text/plain:
              schema:
                $ref: '#/components/schemas/Service'
          description: no error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such service
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Inspect a service
      tags:
      - Service
  /services/{id}/update:
    post:
      operationId: ServiceUpdate
      parameters:
      - description: ID or name of service.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |
          The version number of the service object being updated. This is
          required to avoid conflicting writes.
          This version number should be the value as currently set on the
          service *before* the update. You can find the current version by
          calling `GET /services/{id}`
        in: query
        name: version
        required: true
        schema:
          type: integer
      - description: |
          If the `X-Registry-Auth` header is not specified, this parameter
          indicates where to find registry authorization credentials.
        in: query
        name: registryAuthFrom
        schema:
          default: spec
          enum:
          - spec
          - previous-spec
          type: string
      - description: |
          Set to this parameter to `previous` to cause a server-side rollback
          to the previous service spec. The supplied spec will be ignored in
          this case.
        in: query
        name: rollback
        schema:
          type: string
      - description: |
          A base64url-encoded auth configuration for pulling from private
          registries.

          Refer to the [authentication section](#section/Authentication) for
          details.
        in: header
        name: X-Registry-Auth
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ServiceSpec'
              - example:
                  Name: top
                  TaskTemplate:
                    ContainerSpec:
                      Image: busybox
                      Args:
                      - top
                    Resources:
                      Limits: {}
                      Reservations: {}
                    RestartPolicy:
                      Condition: any
                      MaxAttempts: 0
                    Placement: {}
                    ForceUpdate: 0
                  Mode:
                    Replicated:
                      Replicas: 1
                  UpdateConfig:
                    Parallelism: 2
                    Delay: 1000000000
                    FailureAction: pause
                    Monitor: 15000000000
                    MaxFailureRatio: 0.15
                  RollbackConfig:
                    Parallelism: 1
                    Delay: 1000000000
                    FailureAction: pause
                    Monitor: 15000000000
                    MaxFailureRatio: 0.15
                  EndpointSpec:
                    Mode: vip
                type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUpdateResponse'
          description: no error
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such service
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Update a service
      tags:
      - Service
      x-codegen-request-body-name: body
  /services/{id}/logs:
    get:
      description: |
        Get `stdout` and `stderr` logs from a service. See also
        [`/containers/{id}/logs`](#operation/ContainerLogs).

        **Note**: This endpoint works only for services with the `local`,
        `json-file` or `journald` logging drivers.
      operationId: ServiceLogs
      parameters:
      - description: ID or name of the service
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Show service context and extra details provided to logs.
        in: query
        name: details
        schema:
          default: false
          type: boolean
      - description: Keep connection after returning logs.
        in: query
        name: follow
        schema:
          default: false
          type: boolean
      - description: Return logs from `stdout`
        in: query
        name: stdout
        schema:
          default: false
          type: boolean
      - description: Return logs from `stderr`
        in: query
        name: stderr
        schema:
          default: false
          type: boolean
      - description: Only return logs since this time, as a UNIX timestamp
        in: query
        name: since
        schema:
          default: 0
          type: integer
      - description: Add timestamps to every log line
        in: query
        name: timestamps
        schema:
          default: false
          type: boolean
      - description: |
          Only return this number of log lines from the end of the logs.
          Specify as an integer or `all` to output all log lines.
        in: query
        name: tail
        schema:
          default: all
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: binary
                type: string
            text/plain:
              schema:
                format: binary
                type: string
          description: logs returned as a stream in response body
        "404":
          content:
            application/json:
              example:
                message: 'No such service: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such service
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Get service logs
      tags:
      - Service
  /tasks:
    get:
      operationId: TaskList
      parameters:
      - description: |
          A JSON encoded value of the filters (a `map[string][]string`) to
          process on the tasks list.

          Available filters:

          - `desired-state=(running | shutdown | accepted)`
          - `id=<task id>`
          - `label=key` or `label="key=value"`
          - `name=<task name>`
          - `node=<node id or name>`
          - `service=<service name>`
        in: query
        name: filters
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - ID: 0kzzo1i0y4jz6027t0k7aezc7
                  Version:
                    Index: 71
                  CreatedAt: 2016-06-07T21:07:31.171892745Z
                  UpdatedAt: 2016-06-07T21:07:31.376370513Z
                  Spec:
                    ContainerSpec:
                      Image: redis
                    Resources:
                      Limits: {}
                      Reservations: {}
                    RestartPolicy:
                      Condition: any
                      MaxAttempts: 0
                    Placement: {}
                  ServiceID: 9mnpnzenvg8p8tdbtq4wvbkcz
                  Slot: 1
                  NodeID: 60gvrl6tm78dmak4yl7srz94v
                  Status:
                    Timestamp: 2016-06-07T21:07:31.290032978Z
                    State: running
                    Message: started
                    ContainerStatus:
                      ContainerID: e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035
                      PID: 677
                  DesiredState: running
                  NetworksAttachments:
                  - Network:
                      ID: 4qvuz4ko70xaltuqbt8956gd1
                      Version:
                        Index: 18
                      CreatedAt: 2016-06-07T20:31:11.912919752Z
                      UpdatedAt: 2016-06-07T21:07:29.955277358Z
                      Spec:
                        Name: ingress
                        Labels:
                          com.docker.swarm.internal: "true"
                        DriverConfiguration: {}
                        IPAMOptions:
                          Driver: {}
                          Configs:
                          - Subnet: 10.255.0.0/16
                            Gateway: 10.255.0.1
                      DriverState:
                        Name: overlay
                        Options:
                          com.docker.network.driver.overlay.vxlanid_list: "256"
                      IPAMOptions:
                        Driver:
                          Name: default
                        Configs:
                        - Subnet: 10.255.0.0/16
                          Gateway: 10.255.0.1
                    Addresses:
                    - 10.255.0.10/16
                - ID: 1yljwbmlr8er2waf8orvqpwms
                  Version:
                    Index: 30
                  CreatedAt: 2016-06-07T21:07:30.019104782Z
                  UpdatedAt: 2016-06-07T21:07:30.231958098Z
                  Name: hopeful_cori
                  Spec:
                    ContainerSpec:
                      Image: redis
                    Resources:
                      Limits: {}
                      Reservations: {}
                    RestartPolicy:
                      Condition: any
                      MaxAttempts: 0
                    Placement: {}
                  ServiceID: 9mnpnzenvg8p8tdbtq4wvbkcz
                  Slot: 1
                  NodeID: 60gvrl6tm78dmak4yl7srz94v
                  Status:
                    Timestamp: 2016-06-07T21:07:30.202183143Z
                    State: shutdown
                    Message: shutdown
                    ContainerStatus:
                      ContainerID: 1cf8d63d18e79668b0004a4be4c6ee58cddfad2dae29506d8781581d0688a213
                  DesiredState: shutdown
                  NetworksAttachments:
                  - Network:
                      ID: 4qvuz4ko70xaltuqbt8956gd1
                      Version:
                        Index: 18
                      CreatedAt: 2016-06-07T20:31:11.912919752Z
                      UpdatedAt: 2016-06-07T21:07:29.955277358Z
                      Spec:
                        Name: ingress
                        Labels:
                          com.docker.swarm.internal: "true"
                        DriverConfiguration: {}
                        IPAMOptions:
                          Driver: {}
                          Configs:
                          - Subnet: 10.255.0.0/16
                            Gateway: 10.255.0.1
                      DriverState:
                        Name: overlay
                        Options:
                          com.docker.network.driver.overlay.vxlanid_list: "256"
                      IPAMOptions:
                        Driver:
                          Name: default
                        Configs:
                        - Subnet: 10.255.0.0/16
                          Gateway: 10.255.0.1
                    Addresses:
                    - 10.255.0.5/16
                items:
                  $ref: '#/components/schemas/Task'
                type: array
          description: no error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: List tasks
      tags:
      - Task
  /tasks/{id}:
    get:
      operationId: TaskInspect
      parameters:
      - description: ID of the task
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: no error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such task
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Inspect a task
      tags:
      - Task
  /tasks/{id}/logs:
    get:
      description: |
        Get `stdout` and `stderr` logs from a task.
        See also [`/containers/{id}/logs`](#operation/ContainerLogs).

        **Note**: This endpoint works only for services with the `local`,
        `json-file` or `journald` logging drivers.
      operationId: TaskLogs
      parameters:
      - description: ID of the task
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Show task context and extra details provided to logs.
        in: query
        name: details
        schema:
          default: false
          type: boolean
      - description: Keep connection after returning logs.
        in: query
        name: follow
        schema:
          default: false
          type: boolean
      - description: Return logs from `stdout`
        in: query
        name: stdout
        schema:
          default: false
          type: boolean
      - description: Return logs from `stderr`
        in: query
        name: stderr
        schema:
          default: false
          type: boolean
      - description: Only return logs since this time, as a UNIX timestamp
        in: query
        name: since
        schema:
          default: 0
          type: integer
      - description: Add timestamps to every log line
        in: query
        name: timestamps
        schema:
          default: false
          type: boolean
      - description: |
          Only return this number of log lines from the end of the logs.
          Specify as an integer or `all` to output all log lines.
        in: query
        name: tail
        schema:
          default: all
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: binary
                type: string
            text/plain:
              schema:
                format: binary
                type: string
          description: logs returned as a stream in response body
        "404":
          content:
            application/json:
              example:
                message: 'No such task: c2ada9df5af8'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such task
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Get task logs
      tags:
      - Task
  /secrets:
    get:
      operationId: SecretList
      parameters:
      - description: |
          A JSON encoded value of the filters (a `map[string][]string`) to
          process on the secrets list.

          Available filters:

          - `id=<secret id>`
          - `label=<key> or label=<key>=value`
          - `name=<secret name>`
          - `names=<secret name>`
        in: query
        name: filters
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - ID: blt1owaxmitz71s9v5zh81zun
                  Version:
                    Index: 85
                  CreatedAt: 2017-07-20T13:55:28.678958722Z
                  UpdatedAt: 2017-07-20T13:55:28.678958722Z
                  Spec:
                    Name: mysql-passwd
                    Labels:
                      some.label: some.value
                    Driver:
                      Name: secret-bucket
                      Options:
                        OptionA: value for driver option A
                        OptionB: value for driver option B
                - ID: ktnbjxoalbkvbvedmg1urrz8h
                  Version:
                    Index: 11
                  CreatedAt: 2016-11-05T01:20:17.327670065Z
                  UpdatedAt: 2016-11-05T01:20:17.327670065Z
                  Spec:
                    Name: app-dev.crt
                    Labels:
                      foo: bar
                items:
                  $ref: '#/components/schemas/Secret'
                type: array
          description: no error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: List secrets
      tags:
      - Secret
  /secrets/create:
    post:
      operationId: SecretCreate
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/SecretSpec'
              - example:
                  Name: app-key.crt
                  Labels:
                    foo: bar
                  Data: VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==
                  Driver:
                    Name: secret-bucket
                    Options:
                      OptionA: value for driver option A
                      OptionB: value for driver option B
                type: object
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
          description: no error
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: name conflicts with an existing object
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Create a secret
      tags:
      - Secret
      x-codegen-request-body-name: body
  /secrets/{id}:
    delete:
      operationId: SecretDelete
      parameters:
      - description: ID of the secret
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: no error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: secret not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Delete a secret
      tags:
      - Secret
    get:
      operationId: SecretInspect
      parameters:
      - description: ID of the secret
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                ID: ktnbjxoalbkvbvedmg1urrz8h
                Version:
                  Index: 11
                CreatedAt: 2016-11-05T01:20:17.327670065Z
                UpdatedAt: 2016-11-05T01:20:17.327670065Z
                Spec:
                  Name: app-dev.crt
                  Labels:
                    foo: bar
                  Driver:
                    Name: secret-bucket
                    Options:
                      OptionA: value for driver option A
                      OptionB: value for driver option B
              schema:
                $ref: '#/components/schemas/Secret'
          description: no error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: secret not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Inspect a secret
      tags:
      - Secret
  /secrets/{id}/update:
    post:
      operationId: SecretUpdate
      parameters:
      - description: The ID or name of the secret
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |
          The version number of the secret object being updated. This is
          required to avoid conflicting writes.
        in: query
        name: version
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretSpec'
          text/plain:
            schema:
              $ref: '#/components/schemas/SecretSpec'
        description: |
          The spec of the secret to update. Currently, only the Labels field
          can be updated. All other fields must remain unchanged from the
          [SecretInspect endpoint](#operation/SecretInspect) response values.
        required: false
      responses:
        "200":
          content: {}
          description: no error
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such secret
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Update a Secret
      tags:
      - Secret
      x-codegen-request-body-name: body
  /configs:
    get:
      operationId: ConfigList
      parameters:
      - description: |
          A JSON encoded value of the filters (a `map[string][]string`) to
          process on the configs list.

          Available filters:

          - `id=<config id>`
          - `label=<key> or label=<key>=value`
          - `name=<config name>`
          - `names=<config name>`
        in: query
        name: filters
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - ID: ktnbjxoalbkvbvedmg1urrz8h
                  Version:
                    Index: 11
                  CreatedAt: 2016-11-05T01:20:17.327670065Z
                  UpdatedAt: 2016-11-05T01:20:17.327670065Z
                  Spec:
                    Name: server.conf
                items:
                  $ref: '#/components/schemas/Config'
                type: array
          description: no error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: List configs
      tags:
      - Config
  /configs/create:
    post:
      operationId: ConfigCreate
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigSpec'
              - example:
                  Name: server.conf
                  Labels:
                    foo: bar
                  Data: VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==
                type: object
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
          description: no error
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: name conflicts with an existing object
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Create a config
      tags:
      - Config
      x-codegen-request-body-name: body
  /configs/{id}:
    delete:
      operationId: ConfigDelete
      parameters:
      - description: ID of the config
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: no error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: config not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Delete a config
      tags:
      - Config
    get:
      operationId: ConfigInspect
      parameters:
      - description: ID of the config
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                ID: ktnbjxoalbkvbvedmg1urrz8h
                Version:
                  Index: 11
                CreatedAt: 2016-11-05T01:20:17.327670065Z
                UpdatedAt: 2016-11-05T01:20:17.327670065Z
                Spec:
                  Name: app-dev.crt
              schema:
                $ref: '#/components/schemas/Config'
          description: no error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: config not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Inspect a config
      tags:
      - Config
  /configs/{id}/update:
    post:
      operationId: ConfigUpdate
      parameters:
      - description: The ID or name of the config
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |
          The version number of the config object being updated. This is
          required to avoid conflicting writes.
        in: query
        name: version
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigSpec'
          text/plain:
            schema:
              $ref: '#/components/schemas/ConfigSpec'
        description: |
          The spec of the config to update. Currently, only the Labels field
          can be updated. All other fields must remain unchanged from the
          [ConfigInspect endpoint](#operation/ConfigInspect) response values.
        required: false
      responses:
        "200":
          content: {}
          description: no error
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: no such config
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: node is not part of a swarm
      summary: Update a Config
      tags:
      - Config
      x-codegen-request-body-name: body
  /distribution/{name}/json:
    get:
      description: |
        Return image digest and platform information by contacting the registry.
      operationId: DistributionInspect
      parameters:
      - description: Image name or id
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DistributionInspect'
          description: descriptor and platform information
        "401":
          content:
            application/json:
              example:
                message: 'No such image: someimage (tag: latest)'
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Failed authentication or no image found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      summary: Get image information from the registry
      tags:
      - Distribution
  /session:
    post:
      description: |
        Start a new interactive session with a server. Session allows server to
        call back to the client for advanced capabilities.

        ### Hijacking

        This endpoint hijacks the HTTP connection to HTTP2 transport that allows
        the client to expose gPRC services on that connection.

        For example, the client sends this request to upgrade the connection:

        ```
        POST /session HTTP/1.1
        Upgrade: h2c
        Connection: Upgrade
        ```

        The Docker daemon responds with a `101 UPGRADED` response follow with
        the raw stream:

        ```
        HTTP/1.1 101 UPGRADED
        Connection: Upgrade
        Upgrade: h2c
        ```
      operationId: Session
      responses:
        "101":
          content: {}
          description: no error, hijacking successful
        "400":
          content:
            application/vnd.docker.raw-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: bad parameter
        "500":
          content:
            application/vnd.docker.raw-stream:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: server error
      summary: Initialize interactive session
      tags:
      - Session
components:
  requestBodies:
    ExecConfig:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExecConfig'
      required: true
    NetworkCreateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NetworkCreateRequest'
      required: true
    NetworkDisconnectRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NetworkDisconnectRequest'
      required: true
    SwarmJoinRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SwarmJoinRequest'
        text/plain:
          schema:
            $ref: '#/components/schemas/SwarmJoinRequest'
      required: true
    SwarmInitRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SwarmInitRequest'
        text/plain:
          schema:
            $ref: '#/components/schemas/SwarmInitRequest'
      required: true
    SwarmUnlockRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SwarmUnlockRequest'
      required: true
    NetworkConnectRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NetworkConnectRequest'
      required: true
    ExecStartConfig:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExecStartConfig'
      required: false
  schemas:
    Port:
      description: An open port on a container
      example:
        PrivatePort: 8080
        PublicPort: 80
        Type: tcp
      properties:
        IP:
          description: Host IP address that the container's port is mapped to
          format: ip-address
          type: string
        PrivatePort:
          description: Port on the container
          format: uint16
          nullable: false
          type: integer
        PublicPort:
          description: Port exposed on the host
          format: uint16
          type: integer
        Type:
          enum:
          - tcp
          - udp
          - sctp
          nullable: false
          type: string
      required:
      - PrivatePort
      - Type
      type: object
    MountPoint:
      description: |
        MountPoint represents a mount point configuration inside the container.
        This is used for reporting the mountpoints in use by a container.
      example:
        Destination: /usr/share/nginx/html/
        Type: volume
        Propagation: ""
        RW: true
        Mode: z
        Driver: local
        Source: /var/lib/docker/volumes/myvolume/_data
        Name: myvolume
      properties:
        Type:
          description: |
            The mount type:

            - `bind` a mount of a file or directory from the host into the container.
            - `volume` a docker volume with the given `Name`.
            - `tmpfs` a `tmpfs`.
            - `npipe` a named pipe from the host into the container.
          enum:
          - bind
          - volume
          - tmpfs
          - npipe
          example: volume
          type: string
        Name:
          description: |
            Name is the name reference to the underlying data defined by `Source`
            e.g., the volume name.
          example: myvolume
          type: string
        Source:
          description: |
            Source location of the mount.

            For volumes, this contains the storage location of the volume (within
            `/var/lib/docker/volumes/`). For bind-mounts, and `npipe`, this contains
            the source (host) part of the bind-mount. For `tmpfs` mount points, this
            field is empty.
          example: /var/lib/docker/volumes/myvolume/_data
          type: string
        Destination:
          description: |
            Destination is the path relative to the container root (`/`) where
            the `Source` is mounted inside the container.
          example: /usr/share/nginx/html/
          type: string
        Driver:
          description: |
            Driver is the volume driver used to create the volume (if it is a volume).
          example: local
          type: string
        Mode:
          description: |
            Mode is a comma separated list of options supplied by the user when
            creating the bind/volume mount.

            The default is platform-specific (`"z"` on Linux, empty on Windows).
          example: z
          type: string
        RW:
          description: |
            Whether the mount is mounted writable (read-write).
          example: true
          type: boolean
        Propagation:
          description: |
            Propagation describes how mounts are propagated from the host into the
            mount point, and vice-versa. Refer to the [Linux kernel documentation](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt)
            for details. This field is not used on Windows.
          example: ""
          type: string
      type: object
    DeviceMapping:
      description: A device mapping between the host and container
      example:
        PathOnHost: /dev/deviceName
        PathInContainer: /dev/deviceName
        CgroupPermissions: mrw
      properties:
        PathOnHost:
          type: string
        PathInContainer:
          type: string
        CgroupPermissions:
          type: string
      type: object
    DeviceRequest:
      description: A request for devices to be sent to device drivers
      properties:
        Driver:
          example: nvidia
          type: string
        Count:
          example: -1
          type: integer
        DeviceIDs:
          example:
          - "0"
          - "1"
          - GPU-fef8089b-4820-abfc-e83e-94318197576e
          items:
            type: string
          type: array
        Capabilities:
          description: |
            A list of capabilities; an OR list of AND lists of capabilities.
          example:
          - - gpu
            - nvidia
            - compute
          items:
            items:
              type: string
            type: array
          type: array
        Options:
          additionalProperties:
            type: string
          description: |
            Driver-specific options, specified as a key/value pairs. These options
            are passed directly to the driver.
          type: object
      type: object
    ThrottleDevice:
      properties:
        Path:
          description: Device path
          type: string
        Rate:
          description: Rate
          format: int64
          minimum: 0
          type: integer
      type: object
    Mount:
      properties:
        Target:
          description: Container path.
          type: string
        Source:
          description: Mount source (e.g. a volume name, a host path).
          type: string
        Type:
          description: |
            The mount type. Available types:

            - `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container.
            - `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed.
            - `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs.
            - `npipe` Mounts a named pipe from the host into the container. Must exist prior to creating the container.
          enum:
          - bind
          - volume
          - tmpfs
          - npipe
          type: string
        ReadOnly:
          description: Whether the mount should be read-only.
          type: boolean
        Consistency:
          description: 'The consistency requirement for the mount: `default`, `consistent`,
            `cached`, or `delegated`.'
          type: string
        BindOptions:
          $ref: '#/components/schemas/Mount_BindOptions'
        VolumeOptions:
          $ref: '#/components/schemas/Mount_VolumeOptions'
        TmpfsOptions:
          $ref: '#/components/schemas/Mount_TmpfsOptions'
      type: object
    RestartPolicy:
      description: |
        The behavior to apply when the container exits. The default is not to
        restart.

        An ever increasing delay (double the previous delay, starting at 100ms) is
        added before each restart to prevent flooding the server.
      properties:
        Name:
          description: |
            - Empty string means not to restart
            - `no` Do not automatically restart
            - `always` Always restart
            - `unless-stopped` Restart always except when the user has manually stopped the container
            - `on-failure` Restart only when the container exit code is non-zero
          enum:
          - ""
          - "no"
          - always
          - unless-stopped
          - on-failure
          type: string
        MaximumRetryCount:
          description: |
            If `on-failure` is used, the number of times to retry before giving up.
          type: integer
      type: object
    Resources:
      description: A container's resources (cgroups config, ulimits, etc)
      properties:
        CpuShares:
          description: |
            An integer value representing this container's relative CPU weight
            versus other containers.
          type: integer
        Memory:
          default: 0
          description: Memory limit in bytes.
          format: int64
          type: integer
        CgroupParent:
          description: |
            Path to `cgroups` under which the container's `cgroup` is created. If
            the path is not absolute, the path is considered to be relative to the
            `cgroups` path of the init process. Cgroups are created if they do not
            already exist.
          type: string
        BlkioWeight:
          description: Block IO weight (relative weight).
          maximum: 1E+3
          minimum: 0
          type: integer
        BlkioWeightDevice:
          description: |
            Block IO weight (relative device weight) in the form:

            ```
            [{"Path": "device_path", "Weight": weight}]
            ```
          items:
            $ref: '#/components/schemas/Resources_BlkioWeightDevice'
          type: array
        BlkioDeviceReadBps:
          description: |
            Limit read rate (bytes per second) from a device, in the form:

            ```
            [{"Path": "device_path", "Rate": rate}]
            ```
          items:
            $ref: '#/components/schemas/ThrottleDevice'
          type: array
        BlkioDeviceWriteBps:
          description: |
            Limit write rate (bytes per second) to a device, in the form:

            ```
            [{"Path": "device_path", "Rate": rate}]
            ```
          items:
            $ref: '#/components/schemas/ThrottleDevice'
          type: array
        BlkioDeviceReadIOps:
          description: |
            Limit read rate (IO per second) from a device, in the form:

            ```
            [{"Path": "device_path", "Rate": rate}]
            ```
          items:
            $ref: '#/components/schemas/ThrottleDevice'
          type: array
        BlkioDeviceWriteIOps:
          description: |
            Limit write rate (IO per second) to a device, in the form:

            ```
            [{"Path": "device_path", "Rate": rate}]
            ```
          items:
            $ref: '#/components/schemas/ThrottleDevice'
          type: array
        CpuPeriod:
          description: The length of a CPU period in microseconds.
          format: int64
          type: integer
        CpuQuota:
          description: |
            Microseconds of CPU time that the container can get in a CPU period.
          format: int64
          type: integer
        CpuRealtimePeriod:
          description: |
            The length of a CPU real-time period in microseconds. Set to 0 to
            allocate no time allocated to real-time tasks.
          format: int64
          type: integer
        CpuRealtimeRuntime:
          description: |
            The length of a CPU real-time runtime in microseconds. Set to 0 to
            allocate no time allocated to real-time tasks.
          format: int64
          type: integer
        CpusetCpus:
          description: |
            CPUs in which to allow execution (e.g., `0-3`, `0,1`).
          example: 0-3
          type: string
        CpusetMems:
          description: |
            Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only
            effective on NUMA systems.
          type: string
        Devices:
          description: A list of devices to add to the container.
          items:
            $ref: '#/components/schemas/DeviceMapping'
          type: array
        DeviceCgroupRules:
          description: a list of cgroup rules to apply to the container
          items:
            example: c 13:* rwm
            type: string
          type: array
        DeviceRequests:
          description: |
            A list of requests for devices to be sent to device drivers.
          items:
            $ref: '#/components/schemas/DeviceRequest'
          type: array
        KernelMemory:
          description: |
            Kernel memory limit in bytes.

            <p><br /></p>

            > **Deprecated**: This field is deprecated as the kernel 5.4 deprecated
            > `kmem.limit_in_bytes`.
          example: 209715200
          format: int64
          type: integer
        KernelMemoryTCP:
          description: Hard limit for kernel TCP buffer memory (in bytes).
          format: int64
          type: integer
        MemoryReservation:
          description: Memory soft limit in bytes.
          format: int64
          type: integer
        MemorySwap:
          description: |
            Total memory limit (memory + swap). Set as `-1` to enable unlimited
            swap.
          format: int64
          type: integer
        MemorySwappiness:
          description: |
            Tune a container's memory swappiness behavior. Accepts an integer
            between 0 and 100.
          format: int64
          maximum: 1E+2
          minimum: 0
          type: integer
        NanoCpus:
          description: CPU quota in units of 10<sup>-9</sup> CPUs.
          format: int64
          type: integer
        OomKillDisable:
          description: Disable OOM Killer for the container.
          type: boolean
        Init:
          description: |
            Run an init inside the container that forwards signals and reaps
            processes. This field is omitted if empty, and the default (as
            configured on the daemon) is used.
          nullable: true
          type: boolean
        PidsLimit:
          description: |
            Tune a container's PIDs limit. Set `0` or `-1` for unlimited, or `null`
            to not change.
          format: int64
          nullable: true
          type: integer
        Ulimits:
          description: |
            A list of resource limits to set in the container. For example:

            ```
            {"Name": "nofile", "Soft": 1024, "Hard": 2048}
            ```
          items:
            $ref: '#/components/schemas/Resources_Ulimits'
          type: array
        CpuCount:
          description: |
            The number of usable CPUs (Windows only).

            On Windows Server containers, the processor resource controls are
            mutually exclusive. The order of precedence is `CPUCount` first, then
            `CPUShares`, and `CPUPercent` last.
          format: int64
          type: integer
        CpuPercent:
          description: |
            The usable percentage of the available CPUs (Windows only).

            On Windows Server containers, the processor resource controls are
            mutually exclusive. The order of precedence is `CPUCount` first, then
            `CPUShares`, and `CPUPercent` last.
          format: int64
          type: integer
        IOMaximumIOps:
          description: Maximum IOps for the container system drive (Windows only)
          format: int64
          type: integer
        IOMaximumBandwidth:
          description: |
            Maximum IO in bytes per second for the container system drive
            (Windows only).
          format: int64
          type: integer
      type: object
    Limit:
      description: |
        An object describing a limit on resources which can be requested by a task.
      properties:
        NanoCPUs:
          example: 4000000000
          format: int64
          type: integer
        MemoryBytes:
          example: 8272408576
          format: int64
          type: integer
        Pids:
          default: 0
          description: |
            Limits the maximum number of PIDs in the container. Set `0` for unlimited.
          example: 100
          format: int64
          type: integer
      type: object
    ResourceObject:
      description: |
        An object describing the resources which can be advertised by a node and
        requested by a task.
      example:
        NanoCPUs: 4000000000
        GenericResources:
        - DiscreteResourceSpec:
            Kind: SSD
            Value: 3
        - NamedResourceSpec:
            Kind: GPU
            Value: UUID1
        - NamedResourceSpec:
            Kind: GPU
            Value: UUID2
        MemoryBytes: 8272408576
      properties:
        NanoCPUs:
          example: 4000000000
          format: int64
          type: integer
        MemoryBytes:
          example: 8272408576
          format: int64
          type: integer
        GenericResources:
          description: |
            User-defined resources can be either Integer resources (e.g, `SSD=3`) or
            String resources (e.g, `GPU=UUID1`).
          example:
          - DiscreteResourceSpec:
              Kind: SSD
              Value: 3
          - NamedResourceSpec:
              Kind: GPU
              Value: UUID1
          - NamedResourceSpec:
              Kind: GPU
              Value: UUID2
          items:
            properties:
              NamedResourceSpec:
                properties:
                  Kind:
                    type: string
                  Value:
                    type: string
                type: object
              DiscreteResourceSpec:
                properties:
                  Kind:
                    type: string
                  Value:
                    format: int64
                    type: integer
                type: object
            type: object
          type: array
      type: object
    GenericResources:
      description: |
        User-defined resources can be either Integer resources (e.g, `SSD=3`) or
        String resources (e.g, `GPU=UUID1`).
      example:
      - DiscreteResourceSpec:
          Kind: SSD
          Value: 3
      - NamedResourceSpec:
          Kind: GPU
          Value: UUID1
      - NamedResourceSpec:
          Kind: GPU
          Value: UUID2
      items:
        properties:
          NamedResourceSpec:
            properties:
              Kind:
                type: string
              Value:
                type: string
            type: object
          DiscreteResourceSpec:
            properties:
              Kind:
                type: string
              Value:
                format: int64
                type: integer
            type: object
        type: object
      type: array
    HealthConfig:
      description: A test to perform to check that the container is healthy.
      example:
        Test:
        - Test
        - Test
        Timeout: 5
        Retries: 2
        Interval: 5
        StartPeriod: 7
      properties:
        Test:
          description: |
            The test to perform. Possible values are:

            - `[]` inherit healthcheck from image or parent image
            - `["NONE"]` disable healthcheck
            - `["CMD", args...]` exec arguments directly
            - `["CMD-SHELL", command]` run command with system's default shell
          items:
            type: string
          type: array
        Interval:
          description: |
            The time to wait between checks in nanoseconds. It should be 0 or at
            least 1000000 (1 ms). 0 means inherit.
          type: integer
        Timeout:
          description: |
            The time to wait before considering the check to have hung. It should
            be 0 or at least 1000000 (1 ms). 0 means inherit.
          type: integer
        Retries:
          description: |
            The number of consecutive failures needed to consider a container as
            unhealthy. 0 means inherit.
          type: integer
        StartPeriod:
          description: |
            Start period for the container to initialize before starting
            health-retries countdown in nanoseconds. It should be 0 or at least
            1000000 (1 ms). 0 means inherit.
          type: integer
      type: object
    Health:
      description: |
        Health stores information about the container's healthcheck results.
      example:
        Status: healthy
        Log:
        - Start: 2020-01-04T10:44:24.496525531Z
          ExitCode: 0
          Output: Output
          End: 2020-01-04T10:45:21.364524523Z
        - Start: 2020-01-04T10:44:24.496525531Z
          ExitCode: 0
          Output: Output
          End: 2020-01-04T10:45:21.364524523Z
        FailingStreak: 0
      nullable: true
      properties:
        Status:
          description: |
            Status is one of `none`, `starting`, `healthy` or `unhealthy`

            - "none"      Indicates there is no healthcheck
            - "starting"  Starting indicates that the container is not yet ready
            - "healthy"   Healthy indicates that the container is running correctly
            - "unhealthy" Unhealthy indicates that the container has a problem
          enum:
          - none
          - starting
          - healthy
          - unhealthy
          example: healthy
          type: string
        FailingStreak:
          description: FailingStreak is the number of consecutive failures
          example: 0
          type: integer
        Log:
          description: |
            Log contains the last few results (oldest first)
          items:
            $ref: '#/components/schemas/HealthcheckResult'
          type: array
      type: object
      x-nullable: true
    HealthcheckResult:
      description: |
        HealthcheckResult stores information about a single run of a healthcheck probe
      example:
        Start: 2020-01-04T10:44:24.496525531Z
        ExitCode: 0
        Output: Output
        End: 2020-01-04T10:45:21.364524523Z
      properties:
        Start:
          description: |
            Date and time at which this check started in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          example: 2020-01-04T10:44:24.496525531Z
          format: date-time
          type: string
        End:
          description: |
            Date and time at which this check ended in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          example: 2020-01-04T10:45:21.364524523Z
          format: dateTime
          type: string
        ExitCode:
          description: |
            ExitCode meanings:

            - `0` healthy
            - `1` unhealthy
            - `2` reserved (considered unhealthy)
            - other values: error running probe
          example: 0
          type: integer
        Output:
          description: Output from last check
          type: string
      type: object
    HostConfig:
      allOf:
      - $ref: '#/components/schemas/Resources'
      - $ref: '#/components/schemas/HostConfig_allOf'
      description: Container configuration that depends on the host we are running
        on
    ContainerConfig:
      description: |
        Configuration for a container that is portable between hosts.
      example:
        User: User
        OpenStdin: false
        Env:
        - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        Image: example-image:1.0
        StdinOnce: false
        AttachStdout: true
        Shell:
        - /bin/sh
        - -c
        Volumes:
          key: '{}'
        Domainname: Domainname
        AttachStdin: false
        Tty: false
        Cmd:
        - /bin/sh
        StopTimeout: 9
        StopSignal: SIGTERM
        Entrypoint: []
        AttachStderr: true
        ArgsEscaped: false
        Hostname: 439f4e91bd1d
        Labels:
          com.example.some-label: some-value
          com.example.some-other-label: some-other-value
        Healthcheck:
          Test:
          - Test
          - Test
          Timeout: 5
          Retries: 2
          Interval: 5
          StartPeriod: 7
        NetworkDisabled: true
        MacAddress: MacAddress
        ExposedPorts:
          "80/tcp": {}
          "443/tcp": {}
        WorkingDir: /public/
        OnBuild: []
      properties:
        Hostname:
          description: |
            The hostname to use for the container, as a valid RFC 1123 hostname.
          example: 439f4e91bd1d
          type: string
        Domainname:
          description: |
            The domain name to use for the container.
          type: string
        User:
          description: The user that commands are run as inside the container.
          type: string
        AttachStdin:
          default: false
          description: Whether to attach to `stdin`.
          type: boolean
        AttachStdout:
          default: true
          description: Whether to attach to `stdout`.
          type: boolean
        AttachStderr:
          default: true
          description: Whether to attach to `stderr`.
          type: boolean
        ExposedPorts:
          additionalProperties:
            properties: {}
            type: object
          description: |
            An object mapping ports to an empty object in the form:

            `{"<port>/<tcp|udp|sctp>": {}}`
          example:
            "80/tcp": {}
            "443/tcp": {}
          nullable: true
          type: object
        Tty:
          default: false
          description: |
            Attach standard streams to a TTY, including `stdin` if it is not closed.
          type: boolean
        OpenStdin:
          default: false
          description: Open `stdin`
          type: boolean
        StdinOnce:
          default: false
          description: Close `stdin` after one attached client disconnects
          type: boolean
        Env:
          description: |
            A list of environment variables to set inside the container in the
            form `["VAR=value", ...]`. A variable without `=` is removed from the
            environment, rather than to have an empty value.
          example:
          - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          items:
            type: string
          type: array
        Cmd:
          description: |
            Command to run specified as a string or an array of strings.
          example:
          - /bin/sh
          items:
            type: string
          type: array
        Healthcheck:
          $ref: '#/components/schemas/HealthConfig'
        ArgsEscaped:
          default: false
          description: Command is already escaped (Windows only)
          example: false
          nullable: true
          type: boolean
        Image:
          description: |
            The name (or reference) of the image to use when creating the container,
            or which was used when the container was created.
          example: example-image:1.0
          type: string
        Volumes:
          additionalProperties:
            properties: {}
            type: object
          description: |
            An object mapping mount point paths inside the container to empty
            objects.
          type: object
        WorkingDir:
          description: The working directory for commands to run in.
          example: /public/
          type: string
        Entrypoint:
          description: |
            The entry point for the container as a string or an array of strings.

            If the array consists of exactly one empty string (`[""]`) then the
            entry point is reset to system default (i.e., the entry point used by
            docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).
          example: []
          items:
            type: string
          type: array
        NetworkDisabled:
          description: Disable networking for the container.
          nullable: true
          type: boolean
        MacAddress:
          description: MAC address of the container.
          nullable: true
          type: string
        OnBuild:
          description: |
            `ONBUILD` metadata that were defined in the image's `Dockerfile`.
          example: []
          items:
            type: string
          nullable: true
          type: array
        Labels:
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          example:
            com.example.some-label: some-value
            com.example.some-other-label: some-other-value
          type: object
        StopSignal:
          description: |
            Signal to stop a container as a string or unsigned integer.
          example: SIGTERM
          nullable: true
          type: string
        StopTimeout:
          description: Timeout to stop a container in seconds.
          nullable: true
          type: integer
        Shell:
          description: |
            Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.
          example:
          - /bin/sh
          - -c
          items:
            type: string
          nullable: true
          type: array
      type: object
    NetworkingConfig:
      description: |
        NetworkingConfig represents the container's networking configuration for
        each of its interfaces.
        It is used for the networking configs specified in the `docker create`
        and `docker network connect` commands.
      example:
        EndpointsConfig:
          isolated_nw:
            IPAMConfig:
              IPv4Address: 172.20.30.33
              IPv6Address: 2001:db8:abcd::3033
              LinkLocalIPs:
              - 169.254.34.68
              - fe80::3468
            Links:
            - container_1
            - container_2
            Aliases:
            - server_x
            - server_y
      properties:
        EndpointsConfig:
          additionalProperties:
            $ref: '#/components/schemas/EndpointSettings'
          description: |
            A mapping of network name to endpoint configuration for that network.
          type: object
      type: object
    NetworkSettings:
      description: NetworkSettings exposes the network settings in the API
      example:
        HairpinMode: false
        Networks:
          key:
            GlobalIPv6Address: 2001:db8::5689
            IPPrefixLen: 16
            GlobalIPv6PrefixLen: 64
            Aliases:
            - server_x
            - server_y
            NetworkID: 08754567f1f40222263eab4102e1c733ae697e8e354aa9cd6e18d7402835292a
            MacAddress: 02:42:ac:11:00:04
            IPAMConfig:
              LinkLocalIPs:
              - 169.254.34.68
              - fe80::3468
              IPv6Address: 2001:db8:abcd::3033
              IPv4Address: 172.20.30.33
            DriverOpts:
              com.example.some-label: some-value
              com.example.some-other-label: some-other-value
            Gateway: 172.17.0.1
            EndpointID: b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b
            Links:
            - container_1
            - container_2
            IPv6Gateway: 2001:db8:2::100
            IPAddress: 172.17.0.4
        SandboxKey: /var/run/docker/netns/8ab54b426c38
        GlobalIPv6Address: 2001:db8::5689
        Ports:
          "443/tcp":
          - HostIp: 127.0.0.1
            HostPort: "4443"
          "80/tcp":
          - HostIp: 0.0.0.0
            HostPort: "80"
          - HostIp: 0.0.0.0
            HostPort: "8080"
          "80/udp":
          - HostIp: 0.0.0.0
            HostPort: "80"
          "53/udp":
          - HostIp: 0.0.0.0
            HostPort: "53"
        GlobalIPv6PrefixLen: 64
        IPPrefixLen: 16
        MacAddress: 02:42:ac:11:00:04
        SandboxID: 9d12daf2c33f5959c8bf90aa513e4f65b561738661003029ec84830cd503a0c3
        LinkLocalIPv6Address: fe80::42:acff:fe11:1
        LinkLocalIPv6PrefixLen: 64
        Gateway: 172.17.0.1
        EndpointID: b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b
        SecondaryIPv6Addresses:
        - PrefixLen: 3
          Addr: Addr
        - PrefixLen: 3
          Addr: Addr
        IPv6Gateway: 2001:db8:2::100
        SecondaryIPAddresses:
        - PrefixLen: 3
          Addr: Addr
        - PrefixLen: 3
          Addr: Addr
        IPAddress: 172.17.0.4
        Bridge: docker0
      properties:
        Bridge:
          description: Name of the network'a bridge (for example, `docker0`).
          example: docker0
          type: string
        SandboxID:
          description: SandboxID uniquely represents a container's network stack.
          example: 9d12daf2c33f5959c8bf90aa513e4f65b561738661003029ec84830cd503a0c3
          type: string
        HairpinMode:
          description: |
            Indicates if hairpin NAT should be enabled on the virtual interface.
          example: false
          type: boolean
        LinkLocalIPv6Address:
          description: IPv6 unicast address using the link-local prefix.
          example: fe80::42:acff:fe11:1
          type: string
        LinkLocalIPv6PrefixLen:
          description: Prefix length of the IPv6 unicast address.
          example: 64
          type: integer
        Ports:
          additionalProperties:
            items:
              $ref: '#/components/schemas/PortBinding'
            nullable: true
            type: array
          description: |
            PortMap describes the mapping of container ports to host ports, using the
            container's port-number and protocol as key in the format `<port>/<protocol>`,
            for example, `80/udp`.

            If a container's port is mapped for multiple protocols, separate entries
            are added to the mapping table.
          example:
            "443/tcp":
            - HostIp: 127.0.0.1
              HostPort: "4443"
            "80/tcp":
            - HostIp: 0.0.0.0
              HostPort: "80"
            - HostIp: 0.0.0.0
              HostPort: "8080"
            "80/udp":
            - HostIp: 0.0.0.0
              HostPort: "80"
            "53/udp":
            - HostIp: 0.0.0.0
              HostPort: "53"
          type: object
        SandboxKey:
          description: SandboxKey identifies the sandbox
          example: /var/run/docker/netns/8ab54b426c38
          type: string
        SecondaryIPAddresses:
          description: ""
          items:
            $ref: '#/components/schemas/Address'
          nullable: true
          type: array
        SecondaryIPv6Addresses:
          description: ""
          items:
            $ref: '#/components/schemas/Address'
          nullable: true
          type: array
        EndpointID:
          description: |
            EndpointID uniquely represents a service endpoint in a Sandbox.

            <p><br /></p>

            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          example: b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b
          type: string
        Gateway:
          description: |
            Gateway address for the default "bridge" network.

            <p><br /></p>

            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          example: 172.17.0.1
          type: string
        GlobalIPv6Address:
          description: |
            Global IPv6 address for the default "bridge" network.

            <p><br /></p>

            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          example: 2001:db8::5689
          type: string
        GlobalIPv6PrefixLen:
          description: |
            Mask length of the global IPv6 address.

            <p><br /></p>

            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          example: 64
          type: integer
        IPAddress:
          description: |
            IPv4 address for the default "bridge" network.

            <p><br /></p>

            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          example: 172.17.0.4
          type: string
        IPPrefixLen:
          description: |
            Mask length of the IPv4 address.

            <p><br /></p>

            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          example: 16
          type: integer
        IPv6Gateway:
          description: |
            IPv6 gateway address for this network.

            <p><br /></p>

            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          example: 2001:db8:2::100
          type: string
        MacAddress:
          description: |
            MAC address for the container on the default "bridge" network.

            <p><br /></p>

            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          example: 02:42:ac:11:00:04
          type: string
        Networks:
          additionalProperties:
            $ref: '#/components/schemas/EndpointSettings'
          description: |
            Information about all networks that the container is connected to.
          type: object
      type: object
    Address:
      description: Address represents an IPv4 or IPv6 IP address.
      example:
        PrefixLen: 3
        Addr: Addr
      properties:
        Addr:
          description: IP address.
          type: string
        PrefixLen:
          description: Mask length of the IP address.
          type: integer
      type: object
    PortMap:
      additionalProperties:
        items:
          $ref: '#/components/schemas/PortBinding'
        nullable: true
        type: array
      description: |
        PortMap describes the mapping of container ports to host ports, using the
        container's port-number and protocol as key in the format `<port>/<protocol>`,
        for example, `80/udp`.

        If a container's port is mapped for multiple protocols, separate entries
        are added to the mapping table.
      example:
        "443/tcp":
        - HostIp: 127.0.0.1
          HostPort: "4443"
        "80/tcp":
        - HostIp: 0.0.0.0
          HostPort: "80"
        - HostIp: 0.0.0.0
          HostPort: "8080"
        "80/udp":
        - HostIp: 0.0.0.0
          HostPort: "80"
        "53/udp":
        - HostIp: 0.0.0.0
          HostPort: "53"
      type: object
    PortBinding:
      description: |
        PortBinding represents a binding between a host IP address and a host
        port.
      properties:
        HostIp:
          description: Host IP address that the container's port is mapped to.
          example: 127.0.0.1
          type: string
        HostPort:
          description: Host port number that the container's port is mapped to.
          example: "4443"
          type: string
      type: object
    GraphDriverData:
      description: |
        Information about the storage driver used to store the container's and
        image's filesystem.
      example:
        Data:
          MergedDir: /var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/merged
          UpperDir: /var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/diff
          WorkDir: /var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/work
        Name: overlay2
      properties:
        Name:
          description: Name of the storage driver.
          example: overlay2
          nullable: false
          type: string
        Data:
          additionalProperties:
            type: string
          description: |
            Low-level storage metadata, provided as key/value pairs.

            This information is driver-specific, and depends on the storage-driver
            in use, and should be used for informational purposes only.
          example:
            MergedDir: /var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/merged
            UpperDir: /var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/diff
            WorkDir: /var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/work
          nullable: false
          type: object
      required:
      - Data
      - Name
      type: object
    ImageInspect:
      description: |
        Information about an image in the local image cache.
      example:
        RepoDigests:
        - example@sha256:afcc7f1ac1b49db317a7196c902e61c6c3c4607d63599ee1a82d702d249a0ccb
        - internal.registry.example.com:5000/example@sha256:b69959407d21e8a062e0416bf13405bb2b71ed7a84dde4158ebafacfa06f5578
        Comment: ""
        VirtualSize: 1239828
        Architecture: arm
        Os: linux
        Parent: ""
        Config:
          User: User
          OpenStdin: false
          Env:
          - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          Image: example-image:1.0
          StdinOnce: false
          AttachStdout: true
          Shell:
          - /bin/sh
          - -c
          Volumes:
            key: '{}'
          Domainname: Domainname
          AttachStdin: false
          Tty: false
          Cmd:
          - /bin/sh
          StopTimeout: 9
          StopSignal: SIGTERM
          Entrypoint: []
          AttachStderr: true
          ArgsEscaped: false
          Hostname: 439f4e91bd1d
          Labels:
            com.example.some-label: some-value
            com.example.some-other-label: some-other-value
          Healthcheck:
            Test:
            - Test
            - Test
            Timeout: 5
            Retries: 2
            Interval: 5
            StartPeriod: 7
          NetworkDisabled: true
          MacAddress: MacAddress
          ExposedPorts:
            "80/tcp": {}
            "443/tcp": {}
          WorkingDir: /public/
          OnBuild: []
        Size: 1239828
        OsVersion: ""
        Metadata:
          LastTagTime: 2022-02-28T14:40:02.623929178Z
        GraphDriver:
          Data:
            MergedDir: /var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/merged
            UpperDir: /var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/diff
            WorkDir: /var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/work
          Name: overlay2
        Created: 2022-02-04T21:20:12.497794809Z
        ContainerConfig:
          User: User
          OpenStdin: false
          Env:
          - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          Image: example-image:1.0
          StdinOnce: false
          AttachStdout: true
          Shell:
          - /bin/sh
          - -c
          Volumes:
            key: '{}'
          Domainname: Domainname
          AttachStdin: false
          Tty: false
          Cmd:
          - /bin/sh
          StopTimeout: 9
          StopSignal: SIGTERM
          Entrypoint: []
          AttachStderr: true
          ArgsEscaped: false
          Hostname: 439f4e91bd1d
          Labels:
            com.example.some-label: some-value
            com.example.some-other-label: some-other-value
          Healthcheck:
            Test:
            - Test
            - Test
            Timeout: 5
            Retries: 2
            Interval: 5
            StartPeriod: 7
          NetworkDisabled: true
          MacAddress: MacAddress
          ExposedPorts:
            "80/tcp": {}
            "443/tcp": {}
          WorkingDir: /public/
          OnBuild: []
        Variant: v7
        Container: 65974bc86f1770ae4bff79f651ebdbce166ae9aada632ee3fa9af3a264911735
        RootFS:
          Type: layers
          Layers:
          - sha256:1834950e52ce4d5a88a1bbd131c537f4d0e56d10ff0dd69e66be3b7dfa9df7e6
          - sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef
        RepoTags:
        - example:1.0
        - example:latest
        - example:stable
        - internal.registry.example.com:5000/example:1.0
        DockerVersion: 20.10.7
        Author: ""
        Id: sha256:ec3f0931a6e6b6855d76b2d7b0be30e81860baccd891b2e243280bf1cd8ad710
      properties:
        Id:
          description: |
            ID is the content-addressable ID of an image.

            This identified is a content-addressable digest calculated from the
            image's configuration (which includes the digests of layers used by
            the image).

            Note that this digest differs from the `RepoDigests` below, which
            holds digests of image manifests that reference the image.
          example: sha256:ec3f0931a6e6b6855d76b2d7b0be30e81860baccd891b2e243280bf1cd8ad710
          nullable: false
          type: string
        RepoTags:
          description: |
            List of image names/tags in the local image cache that reference this
            image.

            Multiple image tags can refer to the same imagem and this list may be
            empty if no tags reference the image, in which case the image is
            "untagged", in which case it can still be referenced by its ID.
          example:
          - example:1.0
          - example:latest
          - example:stable
          - internal.registry.example.com:5000/example:1.0
          items:
            type: string
          type: array
        RepoDigests:
          description: |
            List of content-addressable digests of locally available image manifests
            that the image is referenced from. Multiple manifests can refer to the
            same image.

            These digests are usually only available if the image was either pulled
            from a registry, or if the image was pushed to a registry, which is when
            the manifest is generated and its digest calculated.
          example:
          - example@sha256:afcc7f1ac1b49db317a7196c902e61c6c3c4607d63599ee1a82d702d249a0ccb
          - internal.registry.example.com:5000/example@sha256:b69959407d21e8a062e0416bf13405bb2b71ed7a84dde4158ebafacfa06f5578
          items:
            type: string
          type: array
        Parent:
          description: |
            ID of the parent image.

            Depending on how the image was created, this field may be empty and
            is only set for images that were built/created locally. This field
            is empty if the image was pulled from an image registry.
          example: ""
          nullable: false
          type: string
        Comment:
          description: |
            Optional message that was set when committing or importing the image.
          example: ""
          nullable: false
          type: string
        Created:
          description: |
            Date and time at which the image was created, formatted in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          example: 2022-02-04T21:20:12.497794809Z
          nullable: false
          type: string
        Container:
          description: |
            The ID of the container that was used to create the image.

            Depending on how the image was created, this field may be empty.
          example: 65974bc86f1770ae4bff79f651ebdbce166ae9aada632ee3fa9af3a264911735
          nullable: false
          type: string
        ContainerConfig:
          $ref: '#/components/schemas/ContainerConfig'
        DockerVersion:
          description: |
            The version of Docker that was used to build the image.

            Depending on how the image was created, this field may be empty.
          example: 20.10.7
          nullable: false
          type: string
        Author:
          description: |
            Name of the author that was specified when committing the image, or as
            specified through MAINTAINER (deprecated) in the Dockerfile.
          example: ""
          nullable: false
          type: string
        Config:
          $ref: '#/components/schemas/ContainerConfig'
        Architecture:
          description: |
            Hardware CPU architecture that the image runs on.
          example: arm
          nullable: false
          type: string
        Variant:
          description: |
            CPU architecture variant (presently ARM-only).
          example: v7
          nullable: true
          type: string
        Os:
          description: |
            Operating System the image is built to run on.
          example: linux
          nullable: false
          type: string
        OsVersion:
          description: |
            Operating System version the image is built to run on (especially
            for Windows).
          example: ""
          nullable: true
          type: string
        Size:
          description: |
            Total size of the image including all layers it is composed of.
          example: 1239828
          format: int64
          nullable: false
          type: integer
        VirtualSize:
          description: |
            Total size of the image including all layers it is composed of.

            In versions of Docker before v1.10, this field was calculated from
            the image itself and all of its parent images. Docker v1.10 and up
            store images self-contained, and no longer use a parent-chain, making
            this field an equivalent of the Size field.

            This field is kept for backward compatibility, but may be removed in
            a future version of the API.
          example: 1239828
          format: int64
          nullable: false
          type: integer
        GraphDriver:
          $ref: '#/components/schemas/GraphDriverData'
        RootFS:
          $ref: '#/components/schemas/ImageInspect_RootFS'
        Metadata:
          $ref: '#/components/schemas/ImageInspect_Metadata'
      type: object
    ImageSummary:
      example:
        ParentId: ParentId
        RepoDigests:
        - RepoDigests
        - RepoDigests
        SharedSize: 1
        VirtualSize: 5
        RepoTags:
        - RepoTags
        - RepoTags
        Size: 6
        Containers: 5
        Labels:
          key: Labels
        Id: Id
        Created: 0
      properties:
        Id:
          nullable: false
          type: string
        ParentId:
          nullable: false
          type: string
        RepoTags:
          items:
            type: string
          nullable: false
          type: array
        RepoDigests:
          items:
            type: string
          nullable: false
          type: array
        Created:
          nullable: false
          type: integer
        Size:
          nullable: false
          type: integer
        SharedSize:
          nullable: false
          type: integer
        VirtualSize:
          nullable: false
          type: integer
        Labels:
          additionalProperties:
            type: string
          nullable: false
          type: object
        Containers:
          nullable: false
          type: integer
      required:
      - Containers
      - Created
      - Id
      - Labels
      - ParentId
      - RepoDigests
      - RepoTags
      - SharedSize
      - Size
      - VirtualSize
      type: object
    AuthConfig:
      example:
        username: hannibal
        password: xxxx
        serveraddress: https://index.docker.io/v1/
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
        serveraddress:
          type: string
      type: object
    ProcessConfig:
      example:
        privileged: true
        entrypoint: entrypoint
        tty: true
        arguments:
        - arguments
        - arguments
        user: user
      properties:
        privileged:
          type: boolean
        user:
          type: string
        tty:
          type: boolean
        entrypoint:
          type: string
        arguments:
          items:
            type: string
          type: array
      type: object
    Volume:
      example:
        Status:
          hello: world
        Options:
          device: tmpfs
          o: size=100m,uid=1000
          type: tmpfs
        Scope: local
        UsageData:
          RefCount: 6
          Size: 0
        CreatedAt: 2016-06-07T20:31:11.853781916Z
        Driver: custom
        Labels:
          com.example.some-label: some-value
          com.example.some-other-label: some-other-value
        Mountpoint: /var/lib/docker/volumes/tardis
        Name: tardis
      properties:
        Name:
          description: Name of the volume.
          example: tardis
          nullable: false
          type: string
        Driver:
          description: Name of the volume driver used by the volume.
          example: custom
          nullable: false
          type: string
        Mountpoint:
          description: Mount path of the volume on the host.
          example: /var/lib/docker/volumes/tardis
          nullable: false
          type: string
        CreatedAt:
          description: Date/Time the volume was created.
          example: 2016-06-07T20:31:11.853781916Z
          format: dateTime
          type: string
        Status:
          additionalProperties:
            properties: {}
            type: object
          description: |
            Low-level details about the volume, provided by the volume driver.
            Details are returned as a map with key/value pairs:
            `{"key":"value","key2":"value2"}`.

            The `Status` field is optional, and is omitted if the volume driver
            does not support this feature.
          example:
            hello: world
          type: object
        Labels:
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          example:
            com.example.some-label: some-value
            com.example.some-other-label: some-other-value
          nullable: false
          type: object
        Scope:
          default: local
          description: |
            The level at which the volume exists. Either `global` for cluster-wide,
            or `local` for machine level.
          enum:
          - local
          - global
          example: local
          nullable: false
          type: string
        Options:
          additionalProperties:
            type: string
          description: |
            The driver specific options used when creating the volume.
          example:
            device: tmpfs
            o: size=100m,uid=1000
            type: tmpfs
          type: object
        UsageData:
          $ref: '#/components/schemas/Volume_UsageData'
      required:
      - Driver
      - Labels
      - Mountpoint
      - Name
      - Options
      - Scope
      type: object
    VolumeCreateOptions:
      description: Volume configuration
      example:
        DriverOpts:
          device: tmpfs
          o: size=100m,uid=1000
          type: tmpfs
        Driver: custom
        Labels:
          com.example.some-label: some-value
          com.example.some-other-label: some-other-value
        Name: tardis
      properties:
        Name:
          description: |
            The new volume's name. If not specified, Docker generates a name.
          example: tardis
          nullable: false
          type: string
        Driver:
          default: local
          description: Name of the volume driver to use.
          example: custom
          nullable: false
          type: string
        DriverOpts:
          additionalProperties:
            type: string
          description: |
            A mapping of driver options and values. These options are
            passed directly to the driver and are driver specific.
          example:
            device: tmpfs
            o: size=100m,uid=1000
            type: tmpfs
          type: object
        Labels:
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          example:
            com.example.some-label: some-value
            com.example.some-other-label: some-other-value
          type: object
      title: VolumeConfig
      type: object
      x-go-name: VolumeCreateBody
    Network:
      example:
        Name: net01
        Id: 7d86d31b1478e7cca9ebed7e73aa0fdeec46c5ca29497431d3007d2d9e15ed99
        Created: 2016-10-19T04:33:30.360899459Z
        Scope: local
        Driver: bridge
        EnableIPv6: false
        IPAM:
          Driver: default
          Config:
          - Subnet: 172.19.0.0/16
            Gateway: 172.19.0.1
          Options:
            foo: bar
        Internal: false
        Attachable: false
        Ingress: false
        Containers:
          "19a4d5d687db25203351ed79d478946f861258f018fe384f229f2efa4b23513c":
            Name: test
            EndpointID: 628cadb8bcb92de107b2a1e516cbffe463e321f548feb37697cce00ad694f21a
            MacAddress: 02:42:ac:13:00:02
            IPv4Address: 172.19.0.2/16
            IPv6Address: ""
        Options:
          com.docker.network.bridge.default_bridge: "true"
          com.docker.network.bridge.enable_icc: "true"
          com.docker.network.bridge.enable_ip_masquerade: "true"
          com.docker.network.bridge.host_binding_ipv4: 0.0.0.0
          com.docker.network.bridge.name: docker0
          com.docker.network.driver.mtu: "1500"
        Labels:
          com.example.some-label: some-value
          com.example.some-other-label: some-other-value
      properties:
        Name:
          type: string
        Id:
          type: string
        Created:
          format: dateTime
          type: string
        Scope:
          type: string
        Driver:
          type: string
        EnableIPv6:
          type: boolean
        IPAM:
          $ref: '#/components/schemas/IPAM'
        Internal:
          type: boolean
        Attachable:
          type: boolean
        Ingress:
          type: boolean
        Containers:
          additionalProperties:
            $ref: '#/components/schemas/NetworkContainer'
          type: object
        Options:
          additionalProperties:
            type: string
          type: object
        Labels:
          additionalProperties:
            type: string
          type: object
      type: object
    IPAM:
      properties:
        Driver:
          default: default
          description: Name of the IPAM driver to use.
          type: string
        Config:
          description: |
            List of IPAM configuration options, specified as a map:

            ```
            {"Subnet": <CIDR>, "IPRange": <CIDR>, "Gateway": <IP address>, "AuxAddress": <device_name:IP address>}
            ```
          items:
            $ref: '#/components/schemas/IPAMConfig'
          type: array
        Options:
          additionalProperties:
            type: string
          description: Driver-specific options, specified as a map.
          type: object
      type: object
    IPAMConfig:
      properties:
        Subnet:
          type: string
        IPRange:
          type: string
        Gateway:
          type: string
        AuxiliaryAddresses:
          additionalProperties:
            type: string
          type: object
      type: object
    NetworkContainer:
      properties:
        Name:
          type: string
        EndpointID:
          type: string
        MacAddress:
          type: string
        IPv4Address:
          type: string
        IPv6Address:
          type: string
      type: object
    BuildInfo:
      properties:
        id:
          type: string
        stream:
          type: string
        error:
          type: string
        errorDetail:
          $ref: '#/components/schemas/ErrorDetail'
        status:
          type: string
        progress:
          type: string
        progressDetail:
          $ref: '#/components/schemas/ProgressDetail'
        aux:
          $ref: '#/components/schemas/ImageID'
      type: object
    BuildCache:
      properties:
        ID:
          type: string
        Parent:
          type: string
        Type:
          type: string
        Description:
          type: string
        InUse:
          type: boolean
        Shared:
          type: boolean
        Size:
          description: |
            Amount of disk space used by the build cache (in bytes).
          type: integer
        CreatedAt:
          description: |
            Date and time at which the build cache was created in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          example: 2016-08-18T10:44:24.496525531Z
          format: dateTime
          type: string
        LastUsedAt:
          description: |
            Date and time at which the build cache was last used in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          example: 2017-08-09T07:09:37.632105588Z
          format: dateTime
          nullable: true
          type: string
        UsageCount:
          type: integer
      type: object
    ImageID:
      description: Image ID or Digest
      example:
        ID: sha256:85f05633ddc1c50679be2b16a0479ab6f7637f8884e0cfe0f4d20e1ebb3d6e7c
      properties:
        ID:
          type: string
      type: object
    CreateImageInfo:
      properties:
        id:
          type: string
        error:
          type: string
        status:
          type: string
        progress:
          type: string
        progressDetail:
          $ref: '#/components/schemas/ProgressDetail'
      type: object
    PushImageInfo:
      properties:
        error:
          type: string
        status:
          type: string
        progress:
          type: string
        progressDetail:
          $ref: '#/components/schemas/ProgressDetail'
      type: object
    ErrorDetail:
      properties:
        code:
          type: integer
        message:
          type: string
      type: object
    ProgressDetail:
      properties:
        current:
          type: integer
        total:
          type: integer
      type: object
    ErrorResponse:
      description: Represents an error.
      example:
        message: Something went wrong.
      properties:
        message:
          description: The error message.
          nullable: false
          type: string
      required:
      - message
      type: object
    IdResponse:
      description: Response to an API call that returns just an Id
      example:
        Id: Id
      properties:
        Id:
          description: The id of the newly created object.
          nullable: false
          type: string
      required:
      - Id
      type: object
    EndpointSettings:
      description: Configuration for a network endpoint.
      example:
        GlobalIPv6Address: 2001:db8::5689
        IPPrefixLen: 16
        GlobalIPv6PrefixLen: 64
        Aliases:
        - server_x
        - server_y
        NetworkID: 08754567f1f40222263eab4102e1c733ae697e8e354aa9cd6e18d7402835292a
        MacAddress: 02:42:ac:11:00:04
        IPAMConfig:
          LinkLocalIPs:
          - 169.254.34.68
          - fe80::3468
          IPv6Address: 2001:db8:abcd::3033
          IPv4Address: 172.20.30.33
        DriverOpts:
          com.example.some-label: some-value
          com.example.some-other-label: some-other-value
        Gateway: 172.17.0.1
        EndpointID: b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b
        Links:
        - container_1
        - container_2
        IPv6Gateway: 2001:db8:2::100
        IPAddress: 172.17.0.4
      properties:
        IPAMConfig:
          $ref: '#/components/schemas/EndpointIPAMConfig'
        Links:
          example:
          - container_1
          - container_2
          items:
            type: string
          type: array
        Aliases:
          example:
          - server_x
          - server_y
          items:
            type: string
          type: array
        NetworkID:
          description: |
            Unique ID of the network.
          example: 08754567f1f40222263eab4102e1c733ae697e8e354aa9cd6e18d7402835292a
          type: string
        EndpointID:
          description: |
            Unique ID for the service endpoint in a Sandbox.
          example: b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b
          type: string
        Gateway:
          description: |
            Gateway address for this network.
          example: 172.17.0.1
          type: string
        IPAddress:
          description: |
            IPv4 address.
          example: 172.17.0.4
          type: string
        IPPrefixLen:
          description: |
            Mask length of the IPv4 address.
          example: 16
          type: integer
        IPv6Gateway:
          description: |
            IPv6 gateway address.
          example: 2001:db8:2::100
          type: string
        GlobalIPv6Address:
          description: |
            Global IPv6 address.
          example: 2001:db8::5689
          type: string
        GlobalIPv6PrefixLen:
          description: |
            Mask length of the global IPv6 address.
          example: 64
          format: int64
          type: integer
        MacAddress:
          description: |
            MAC address for the endpoint on this network.
          example: 02:42:ac:11:00:04
          type: string
        DriverOpts:
          additionalProperties:
            type: string
          description: |
            DriverOpts is a mapping of driver options and values. These options
            are passed directly to the driver and are driver specific.
          example:
            com.example.some-label: some-value
            com.example.some-other-label: some-other-value
          nullable: true
          type: object
      type: object
    EndpointIPAMConfig:
      description: |
        EndpointIPAMConfig represents an endpoint's IPAM configuration.
      example:
        LinkLocalIPs:
        - 169.254.34.68
        - fe80::3468
        IPv6Address: 2001:db8:abcd::3033
        IPv4Address: 172.20.30.33
      nullable: true
      properties:
        IPv4Address:
          example: 172.20.30.33
          type: string
        IPv6Address:
          example: 2001:db8:abcd::3033
          type: string
        LinkLocalIPs:
          example:
          - 169.254.34.68
          - fe80::3468
          items:
            type: string
          type: array
      type: object
      x-nullable: true
    PluginMount:
      example:
        Destination: /mnt/state
        Options:
        - rbind
        - rw
        Type: bind
        Description: This is a mount that's used by the plugin.
        Settable:
        - Settable
        - Settable
        Source: /var/lib/docker/plugins/
        Name: some-mount
      nullable: false
      properties:
        Name:
          example: some-mount
          nullable: false
          type: string
        Description:
          example: This is a mount that's used by the plugin.
          nullable: false
          type: string
        Settable:
          items:
            type: string
          type: array
        Source:
          example: /var/lib/docker/plugins/
          type: string
        Destination:
          example: /mnt/state
          nullable: false
          type: string
        Type:
          example: bind
          nullable: false
          type: string
        Options:
          example:
          - rbind
          - rw
          items:
            type: string
          type: array
      required:
      - Description
      - Destination
      - Name
      - Options
      - Settable
      - Source
      - Type
      type: object
      x-nullable: false
    PluginDevice:
      example:
        Path: /dev/fuse
        Description: Description
        Settable:
        - Settable
        - Settable
        Name: Name
      nullable: false
      properties:
        Name:
          nullable: false
          type: string
        Description:
          nullable: false
          type: string
        Settable:
          items:
            type: string
          type: array
        Path:
          example: /dev/fuse
          type: string
      required:
      - Description
      - Name
      - Path
      - Settable
      type: object
      x-nullable: false
    PluginEnv:
      nullable: false
      properties:
        Name:
          nullable: false
          type: string
        Description:
          nullable: false
          type: string
        Settable:
          items:
            type: string
          type: array
        Value:
          type: string
      required:
      - Description
      - Name
      - Settable
      - Value
      type: object
      x-nullable: false
    PluginInterfaceType:
      nullable: false
      properties:
        Prefix:
          nullable: false
          type: string
        Capability:
          nullable: false
          type: string
        Version:
          nullable: false
          type: string
      required:
      - Capability
      - Prefix
      - Version
      type: object
      x-nullable: false
    PluginPrivilege:
      description: |
        Describes a permission the user has to accept upon installing
        the plugin.
      example:
        Description: Description
        Value:
        - host
        Name: network
      properties:
        Name:
          example: network
          type: string
        Description:
          type: string
        Value:
          example:
          - host
          items:
            type: string
          type: array
      type: object
      x-go-name: PluginPrivilege
    Plugin:
      description: A plugin for the Engine API
      example:
        Config:
          Mounts:
          - Destination: /mnt/state
            Options:
            - rbind
            - rw
            Type: bind
            Description: This is a mount that's used by the plugin.
            Settable:
            - Settable
            - Settable
            Source: /var/lib/docker/plugins/
            Name: some-mount
          - Destination: /mnt/state
            Options:
            - rbind
            - rw
            Type: bind
            Description: This is a mount that's used by the plugin.
            Settable:
            - Settable
            - Settable
            Source: /var/lib/docker/plugins/
            Name: some-mount
          Args:
            Description: command line arguments
            Settable:
            - Settable
            - Settable
            Value:
            - Value
            - Value
            Name: args
          Description: A sample volume plugin for Docker
          User:
            UID: 1000
            GID: 1000
          Entrypoint:
          - /usr/bin/sample-volume-plugin
          - /data
          Documentation: /engine/extend/plugins/
          Env:
          - Name: DEBUG
            Description: If set, prints debug messages
            Value: "0"
          PropagatedMount: /mnt/volumes
          PidHost: false
          DockerVersion: 17.06.0-ce
          Linux:
            Capabilities:
            - CAP_SYS_ADMIN
            - CAP_SYSLOG
            Devices:
            - Path: /dev/fuse
              Description: Description
              Settable:
              - Settable
              - Settable
              Name: Name
            - Path: /dev/fuse
              Description: Description
              Settable:
              - Settable
              - Settable
              Name: Name
            AllowAllDevices: false
          Network:
            Type: host
          rootfs:
            diff_ids:
            - sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887
            - sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8
            type: layers
          WorkDir: /bin/
          Interface:
            Types:
            - docker.volumedriver/1.0
            ProtocolScheme: some.protocol/v1.0
            Socket: plugins.sock
          IpcHost: false
        Enabled: true
        Id: 5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078
        Settings:
          Mounts:
          - Destination: /mnt/state
            Options:
            - rbind
            - rw
            Type: bind
            Description: This is a mount that's used by the plugin.
            Settable:
            - Settable
            - Settable
            Source: /var/lib/docker/plugins/
            Name: some-mount
          - Destination: /mnt/state
            Options:
            - rbind
            - rw
            Type: bind
            Description: This is a mount that's used by the plugin.
            Settable:
            - Settable
            - Settable
            Source: /var/lib/docker/plugins/
            Name: some-mount
          Args:
          - Args
          - Args
          Env:
          - DEBUG=0
          Devices:
          - Path: /dev/fuse
            Description: Description
            Settable:
            - Settable
            - Settable
            Name: Name
          - Path: /dev/fuse
            Description: Description
            Settable:
            - Settable
            - Settable
            Name: Name
        Name: tiborvass/sample-volume-plugin
        PluginReference: localhost:5000/tiborvass/sample-volume-plugin:latest
      properties:
        Id:
          example: 5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078
          type: string
        Name:
          example: tiborvass/sample-volume-plugin
          nullable: false
          type: string
        Enabled:
          description: True if the plugin is running. False if the plugin is not running,
            only installed.
          example: true
          nullable: false
          type: boolean
        Settings:
          $ref: '#/components/schemas/Plugin_Settings'
        PluginReference:
          description: plugin remote reference used to push/pull the plugin
          example: localhost:5000/tiborvass/sample-volume-plugin:latest
          nullable: false
          type: string
        Config:
          $ref: '#/components/schemas/Plugin_Config'
      required:
      - Config
      - Enabled
      - Name
      - Settings
      type: object
    ObjectVersion:
      description: |
        The version number of the object such as node, service, etc. This is needed
        to avoid conflicting writes. The client must send the version number along
        with the modified specification when updating these objects.

        This approach ensures safe concurrency and determinism in that the change
        on the object may not be applied if the version number has changed from the
        last read. In other words, if two update requests specify the same base
        version, only one of the requests can succeed. As a result, two separate
        update requests that happen at the same time will not unintentionally
        overwrite each other.
      example:
        Index: 373531
      properties:
        Index:
          example: 373531
          format: uint64
          type: integer
      type: object
    NodeSpec:
      example:
        Availability: active
        Name: node-name
        Role: manager
        Labels:
          foo: bar
      properties:
        Name:
          description: Name for the node.
          example: my-node
          type: string
        Labels:
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          type: object
        Role:
          description: Role of the node.
          enum:
          - worker
          - manager
          example: manager
          type: string
        Availability:
          description: Availability of the node.
          enum:
          - active
          - pause
          - drain
          example: active
          type: string
      type: object
    Node:
      example:
        Status:
          Message: ""
          State: ready
          Addr: 172.17.0.2
        Description:
          Platform:
            Architecture: x86_64
            OS: linux
          Hostname: bf3067039e47
          TLSInfo:
            TrustRoot: |
              -----BEGIN CERTIFICATE-----
              MIIBajCCARCgAwIBAgIUbYqrLSOSQHoxD8CwG6Bi2PJi9c8wCgYIKoZIzj0EAwIw
              EzERMA8GA1UEAxMIc3dhcm0tY2EwHhcNMTcwNDI0MjE0MzAwWhcNMzcwNDE5MjE0
              MzAwWjATMREwDwYDVQQDEwhzd2FybS1jYTBZMBMGByqGSM49AgEGCCqGSM49AwEH
              A0IABJk/VyMPYdaqDXJb/VXh5n/1Yuv7iNrxV3Qb3l06XD46seovcDWs3IZNV1lf
              3Skyr0ofcchipoiHkXBODojJydSjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMB
              Af8EBTADAQH/MB0GA1UdDgQWBBRUXxuRcnFjDfR/RIAUQab8ZV/n4jAKBggqhkjO
              PQQDAgNIADBFAiAy+JTe6Uc3KyLCMiqGl2GyWGQqQDEcO3/YG36x7om65AIhAJvz
              pxv6zFeVEkAEEkqIYi0omA9+CjanB/6Bz4n1uw8H
              -----END CERTIFICATE-----
            CertIssuerSubject: MBMxETAPBgNVBAMTCHN3YXJtLWNh
            CertIssuerPublicKey: MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEmT9XIw9h1qoNclv9VeHmf/Vi6/uI2vFXdBveXTpcPjqx6i9wNazchk1XWV/dKTKvSh9xyGKmiIeRcE4OiMnJ1A==
          Resources:
            NanoCPUs: 4000000000
            GenericResources:
            - DiscreteResourceSpec:
                Kind: SSD
                Value: 3
            - NamedResourceSpec:
                Kind: GPU
                Value: UUID1
            - NamedResourceSpec:
                Kind: GPU
                Value: UUID2
            MemoryBytes: 8272408576
          Engine:
            EngineVersion: 17.06.0
            Labels:
              foo: bar
            Plugins:
            - Type: Log
              Name: awslogs
            - Type: Log
              Name: fluentd
            - Type: Log
              Name: gcplogs
            - Type: Log
              Name: gelf
            - Type: Log
              Name: journald
            - Type: Log
              Name: json-file
            - Type: Log
              Name: logentries
            - Type: Log
              Name: splunk
            - Type: Log
              Name: syslog
            - Type: Network
              Name: bridge
            - Type: Network
              Name: host
            - Type: Network
              Name: ipvlan
            - Type: Network
              Name: macvlan
            - Type: Network
              Name: "null"
            - Type: Network
              Name: overlay
            - Type: Volume
              Name: local
            - Type: Volume
              Name: localhost:5000/vieux/sshfs:latest
            - Type: Volume
              Name: vieux/sshfs:latest
        Version:
          Index: 373531
        ManagerStatus:
          Leader: true
          Addr: 10.0.0.46:2377
          Reachability: reachable
        CreatedAt: 2016-08-18T10:44:24.496525531Z
        ID: 24ifsmvkjbyhk
        Spec:
          Availability: active
          Name: node-name
          Role: manager
          Labels:
            foo: bar
        UpdatedAt: 2017-08-09T07:09:37.632105588Z
      properties:
        ID:
          example: 24ifsmvkjbyhk
          type: string
        Version:
          $ref: '#/components/schemas/ObjectVersion'
        CreatedAt:
          description: |
            Date and time at which the node was added to the swarm in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          example: 2016-08-18T10:44:24.496525531Z
          format: dateTime
          type: string
        UpdatedAt:
          description: |
            Date and time at which the node was last updated in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          example: 2017-08-09T07:09:37.632105588Z
          format: dateTime
          type: string
        Spec:
          $ref: '#/components/schemas/NodeSpec'
        Description:
          $ref: '#/components/schemas/NodeDescription'
        Status:
          $ref: '#/components/schemas/NodeStatus'
        ManagerStatus:
          $ref: '#/components/schemas/ManagerStatus'
      type: object
    NodeDescription:
      description: |
        NodeDescription encapsulates the properties of the Node as reported by the
        agent.
      example:
        Platform:
          Architecture: x86_64
          OS: linux
        Hostname: bf3067039e47
        TLSInfo:
          TrustRoot: |
            -----BEGIN CERTIFICATE-----
            MIIBajCCARCgAwIBAgIUbYqrLSOSQHoxD8CwG6Bi2PJi9c8wCgYIKoZIzj0EAwIw
            EzERMA8GA1UEAxMIc3dhcm0tY2EwHhcNMTcwNDI0MjE0MzAwWhcNMzcwNDE5MjE0
            MzAwWjATMREwDwYDVQQDEwhzd2FybS1jYTBZMBMGByqGSM49AgEGCCqGSM49AwEH
            A0IABJk/VyMPYdaqDXJb/VXh5n/1Yuv7iNrxV3Qb3l06XD46seovcDWs3IZNV1lf
            3Skyr0ofcchipoiHkXBODojJydSjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMB
            Af8EBTADAQH/MB0GA1UdDgQWBBRUXxuRcnFjDfR/RIAUQab8ZV/n4jAKBggqhkjO
            PQQDAgNIADBFAiAy+JTe6Uc3KyLCMiqGl2GyWGQqQDEcO3/YG36x7om65AIhAJvz
            pxv6zFeVEkAEEkqIYi0omA9+CjanB/6Bz4n1uw8H
            -----END CERTIFICATE-----
          CertIssuerSubject: MBMxETAPBgNVBAMTCHN3YXJtLWNh
          CertIssuerPublicKey: MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEmT9XIw9h1qoNclv9VeHmf/Vi6/uI2vFXdBveXTpcPjqx6i9wNazchk1XWV/dKTKvSh9xyGKmiIeRcE4OiMnJ1A==
        Resources:
          NanoCPUs: 4000000000
          GenericResources:
          - DiscreteResourceSpec:
              Kind: SSD
              Value: 3
          - NamedResourceSpec:
              Kind: GPU
              Value: UUID1
          - NamedResourceSpec:
              Kind: GPU
              Value: UUID2
          MemoryBytes: 8272408576
        Engine:
          EngineVersion: 17.06.0
          Labels:
            foo: bar
          Plugins:
          - Type: Log
            Name: awslogs
          - Type: Log
            Name: fluentd
          - Type: Log
            Name: gcplogs
          - Type: Log
            Name: gelf
          - Type: Log
            Name: journald
          - Type: Log
            Name: json-file
          - Type: Log
            Name: logentries
          - Type: Log
            Name: splunk
          - Type: Log
            Name: syslog
          - Type: Network
            Name: bridge
          - Type: Network
            Name: host
          - Type: Network
            Name: ipvlan
          - Type: Network
            Name: macvlan
          - Type: Network
            Name: "null"
          - Type: Network
            Name: overlay
          - Type: Volume
            Name: local
          - Type: Volume
            Name: localhost:5000/vieux/sshfs:latest
          - Type: Volume
            Name: vieux/sshfs:latest
      properties:
        Hostname:
          example: bf3067039e47
          type: string
        Platform:
          $ref: '#/components/schemas/Platform'
        Resources:
          $ref: '#/components/schemas/ResourceObject'
        Engine:
          $ref: '#/components/schemas/EngineDescription'
        TLSInfo:
          $ref: '#/components/schemas/TLSInfo'
      type: object
    Platform:
      description: |
        Platform represents the platform (Arch/OS).
      example:
        Architecture: x86_64
        OS: linux
      properties:
        Architecture:
          description: |
            Architecture represents the hardware architecture (for example,
            `x86_64`).
          example: x86_64
          type: string
        OS:
          description: |
            OS represents the Operating System (for example, `linux` or `windows`).
          example: linux
          type: string
      type: object
    EngineDescription:
      description: EngineDescription provides information about an engine.
      example:
        EngineVersion: 17.06.0
        Labels:
          foo: bar
        Plugins:
        - Type: Log
          Name: awslogs
        - Type: Log
          Name: fluentd
        - Type: Log
          Name: gcplogs
        - Type: Log
          Name: gelf
        - Type: Log
          Name: journald
        - Type: Log
          Name: json-file
        - Type: Log
          Name: logentries
        - Type: Log
          Name: splunk
        - Type: Log
          Name: syslog
        - Type: Network
          Name: bridge
        - Type: Network
          Name: host
        - Type: Network
          Name: ipvlan
        - Type: Network
          Name: macvlan
        - Type: Network
          Name: "null"
        - Type: Network
          Name: overlay
        - Type: Volume
          Name: local
        - Type: Volume
          Name: localhost:5000/vieux/sshfs:latest
        - Type: Volume
          Name: vieux/sshfs:latest
      properties:
        EngineVersion:
          example: 17.06.0
          type: string
        Labels:
          additionalProperties:
            type: string
          example:
            foo: bar
          type: object
        Plugins:
          example:
          - Type: Log
            Name: awslogs
          - Type: Log
            Name: fluentd
          - Type: Log
            Name: gcplogs
          - Type: Log
            Name: gelf
          - Type: Log
            Name: journald
          - Type: Log
            Name: json-file
          - Type: Log
            Name: logentries
          - Type: Log
            Name: splunk
          - Type: Log
            Name: syslog
          - Type: Network
            Name: bridge
          - Type: Network
            Name: host
          - Type: Network
            Name: ipvlan
          - Type: Network
            Name: macvlan
          - Type: Network
            Name: "null"
          - Type: Network
            Name: overlay
          - Type: Volume
            Name: local
          - Type: Volume
            Name: localhost:5000/vieux/sshfs:latest
          - Type: Volume
            Name: vieux/sshfs:latest
          items:
            $ref: '#/components/schemas/EngineDescription_Plugins'
          type: array
      type: object
    TLSInfo:
      description: |
        Information about the issuer of leaf TLS certificates and the trusted root
        CA certificate.
      example:
        TrustRoot: |
          -----BEGIN CERTIFICATE-----
          MIIBajCCARCgAwIBAgIUbYqrLSOSQHoxD8CwG6Bi2PJi9c8wCgYIKoZIzj0EAwIw
          EzERMA8GA1UEAxMIc3dhcm0tY2EwHhcNMTcwNDI0MjE0MzAwWhcNMzcwNDE5MjE0
          MzAwWjATMREwDwYDVQQDEwhzd2FybS1jYTBZMBMGByqGSM49AgEGCCqGSM49AwEH
          A0IABJk/VyMPYdaqDXJb/VXh5n/1Yuv7iNrxV3Qb3l06XD46seovcDWs3IZNV1lf
          3Skyr0ofcchipoiHkXBODojJydSjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMB
          Af8EBTADAQH/MB0GA1UdDgQWBBRUXxuRcnFjDfR/RIAUQab8ZV/n4jAKBggqhkjO
          PQQDAgNIADBFAiAy+JTe6Uc3KyLCMiqGl2GyWGQqQDEcO3/YG36x7om65AIhAJvz
          pxv6zFeVEkAEEkqIYi0omA9+CjanB/6Bz4n1uw8H
          -----END CERTIFICATE-----
        CertIssuerSubject: MBMxETAPBgNVBAMTCHN3YXJtLWNh
        CertIssuerPublicKey: MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEmT9XIw9h1qoNclv9VeHmf/Vi6/uI2vFXdBveXTpcPjqx6i9wNazchk1XWV/dKTKvSh9xyGKmiIeRcE4OiMnJ1A==
      properties:
        TrustRoot:
          description: |
            The root CA certificate(s) that are used to validate leaf TLS
            certificates.
          type: string
        CertIssuerSubject:
          description: The base64-url-safe-encoded raw subject bytes of the issuer.
          type: string
        CertIssuerPublicKey:
          description: |
            The base64-url-safe-encoded raw public key bytes of the issuer.
          type: string
      type: object
    NodeStatus:
      description: |
        NodeStatus represents the status of a node.

        It provides the current status of the node, as seen by the manager.
      example:
        Message: ""
        State: ready
        Addr: 172.17.0.2
      properties:
        State:
          $ref: '#/components/schemas/NodeState'
        Message:
          example: ""
          type: string
        Addr:
          description: IP address of the node.
          example: 172.17.0.2
          type: string
      type: object
    NodeState:
      description: NodeState represents the state of a node.
      enum:
      - unknown
      - down
      - ready
      - disconnected
      example: ready
      type: string
    ManagerStatus:
      description: |
        ManagerStatus represents the status of a manager.

        It provides the current status of a node's manager component, if the node
        is a manager.
      example:
        Leader: true
        Addr: 10.0.0.46:2377
        Reachability: reachable
      nullable: true
      properties:
        Leader:
          default: false
          example: true
          type: boolean
        Reachability:
          $ref: '#/components/schemas/Reachability'
        Addr:
          description: |
            The IP address and port at which the manager is reachable.
          example: 10.0.0.46:2377
          type: string
      type: object
      x-nullable: true
    Reachability:
      description: Reachability represents the reachability of a node.
      enum:
      - unknown
      - unreachable
      - reachable
      example: reachable
      type: string
    SwarmSpec:
      description: User modifiable swarm configuration.
      example:
        Orchestration:
          TaskHistoryRetentionLimit: 10
        CAConfig:
          SigningCACert: SigningCACert
          ExternalCAs:
          - Options:
              key: Options
            CACert: CACert
            Protocol: cfssl
            URL: URL
          - Options:
              key: Options
            CACert: CACert
            Protocol: cfssl
            URL: URL
          ForceRotate: 6
          NodeCertExpiry: 7776000000000000
          SigningCAKey: SigningCAKey
        Labels:
          com.example.corp.type: production
          com.example.corp.department: engineering
        Raft:
          SnapshotInterval: 10000
          LogEntriesForSlowFollowers: 500
          KeepOldSnapshots: 0
          ElectionTick: 3
          HeartbeatTick: 1
        Dispatcher:
          HeartbeatPeriod: 5000000000
        TaskDefaults:
          LogDriver:
            Options:
              max-file: "10"
              max-size: 100m
            Name: json-file
        EncryptionConfig:
          AutoLockManagers: false
        Name: default
      properties:
        Name:
          description: Name of the swarm.
          example: default
          type: string
        Labels:
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          example:
            com.example.corp.type: production
            com.example.corp.department: engineering
          type: object
        Orchestration:
          $ref: '#/components/schemas/SwarmSpec_Orchestration'
        Raft:
          $ref: '#/components/schemas/SwarmSpec_Raft'
        Dispatcher:
          $ref: '#/components/schemas/SwarmSpec_Dispatcher'
        CAConfig:
          $ref: '#/components/schemas/SwarmSpec_CAConfig'
        EncryptionConfig:
          $ref: '#/components/schemas/SwarmSpec_EncryptionConfig'
        TaskDefaults:
          $ref: '#/components/schemas/SwarmSpec_TaskDefaults'
      type: object
    ClusterInfo:
      description: |
        ClusterInfo represents information about the swarm as is returned by the
        "/info" endpoint. Join-tokens are not included.
      example:
        DefaultAddrPool:
        - ""
        - ""
        RootRotationInProgress: false
        SubnetSize: 24
        Version:
          Index: 373531
        CreatedAt: 2016-08-18T10:44:24.496525531Z
        TLSInfo:
          TrustRoot: |
            -----BEGIN CERTIFICATE-----
            MIIBajCCARCgAwIBAgIUbYqrLSOSQHoxD8CwG6Bi2PJi9c8wCgYIKoZIzj0EAwIw
            EzERMA8GA1UEAxMIc3dhcm0tY2EwHhcNMTcwNDI0MjE0MzAwWhcNMzcwNDE5MjE0
            MzAwWjATMREwDwYDVQQDEwhzd2FybS1jYTBZMBMGByqGSM49AgEGCCqGSM49AwEH
            A0IABJk/VyMPYdaqDXJb/VXh5n/1Yuv7iNrxV3Qb3l06XD46seovcDWs3IZNV1lf
            3Skyr0ofcchipoiHkXBODojJydSjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMB
            Af8EBTADAQH/MB0GA1UdDgQWBBRUXxuRcnFjDfR/RIAUQab8ZV/n4jAKBggqhkjO
            PQQDAgNIADBFAiAy+JTe6Uc3KyLCMiqGl2GyWGQqQDEcO3/YG36x7om65AIhAJvz
            pxv6zFeVEkAEEkqIYi0omA9+CjanB/6Bz4n1uw8H
            -----END CERTIFICATE-----
          CertIssuerSubject: MBMxETAPBgNVBAMTCHN3YXJtLWNh
          CertIssuerPublicKey: MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEmT9XIw9h1qoNclv9VeHmf/Vi6/uI2vFXdBveXTpcPjqx6i9wNazchk1XWV/dKTKvSh9xyGKmiIeRcE4OiMnJ1A==
        DataPathPort: 4789
        ID: abajmipo7b4xz5ip2nrla6b11
        Spec:
          Orchestration:
            TaskHistoryRetentionLimit: 10
          CAConfig:
            SigningCACert: SigningCACert
            ExternalCAs:
            - Options:
                key: Options
              CACert: CACert
              Protocol: cfssl
              URL: URL
            - Options:
                key: Options
              CACert: CACert
              Protocol: cfssl
              URL: URL
            ForceRotate: 6
            NodeCertExpiry: 7776000000000000
            SigningCAKey: SigningCAKey
          Labels:
            com.example.corp.type: production
            com.example.corp.department: engineering
          Raft:
            SnapshotInterval: 10000
            LogEntriesForSlowFollowers: 500
            KeepOldSnapshots: 0
            ElectionTick: 3
            HeartbeatTick: 1
          Dispatcher:
            HeartbeatPeriod: 5000000000
          TaskDefaults:
            LogDriver:
              Options:
                max-file: "10"
                max-size: 100m
              Name: json-file
          EncryptionConfig:
            AutoLockManagers: false
          Name: default
        UpdatedAt: 2017-08-09T07:09:37.632105588Z
      nullable: true
      properties:
        ID:
          description: The ID of the swarm.
          example: abajmipo7b4xz5ip2nrla6b11
          type: string
        Version:
          $ref: '#/components/schemas/ObjectVersion'
        CreatedAt:
          description: |
            Date and time at which the swarm was initialised in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          example: 2016-08-18T10:44:24.496525531Z
          format: dateTime
          type: string
        UpdatedAt:
          description: |
            Date and time at which the swarm was last updated in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          example: 2017-08-09T07:09:37.632105588Z
          format: dateTime
          type: string
        Spec:
          $ref: '#/components/schemas/SwarmSpec'
        TLSInfo:
          $ref: '#/components/schemas/TLSInfo'
        RootRotationInProgress:
          description: |
            Whether there is currently a root CA rotation in progress for the swarm
          example: false
          type: boolean
        DataPathPort:
          description: |
            DataPathPort specifies the data path port number for data traffic.
            Acceptable port range is 1024 to 49151.
            If no port is set or is set to 0, the default port (4789) is used.
          example: 4789
          format: uint32
          type: integer
        DefaultAddrPool:
          description: |
            Default Address Pool specifies default subnet pools for global scope
            networks.
          items:
            example: ""
            format: CIDR
            type: string
          type: array
        SubnetSize:
          description: |
            SubnetSize specifies the subnet size of the networks created from the
            default subnet pool.
          example: 24
          format: uint32
          maximum: 29
          type: integer
      type: object
      x-nullable: true
    JoinTokens:
      description: |
        JoinTokens contains the tokens workers and managers need to join the swarm.
      properties:
        Worker:
          description: |
            The token workers can use to join the swarm.
          example: SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-1awxwuwd3z9j1z3puu7rcgdbx
          type: string
        Manager:
          description: |
            The token managers can use to join the swarm.
          example: SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2
          type: string
      type: object
    Swarm:
      allOf:
      - $ref: '#/components/schemas/ClusterInfo'
      - $ref: '#/components/schemas/Swarm_allOf'
    TaskSpec:
      description: User modifiable task configuration.
      properties:
        PluginSpec:
          $ref: '#/components/schemas/TaskSpec_PluginSpec'
        ContainerSpec:
          $ref: '#/components/schemas/TaskSpec_ContainerSpec'
        NetworkAttachmentSpec:
          $ref: '#/components/schemas/TaskSpec_NetworkAttachmentSpec'
        Resources:
          $ref: '#/components/schemas/TaskSpec_Resources'
        RestartPolicy:
          $ref: '#/components/schemas/TaskSpec_RestartPolicy'
        Placement:
          $ref: '#/components/schemas/TaskSpec_Placement'
        ForceUpdate:
          description: |
            A counter that triggers an update even if no relevant parameters have
            been changed.
          type: integer
        Runtime:
          description: |
            Runtime is the type of runtime specified for the task executor.
          type: string
        Networks:
          description: Specifies which networks the service should attach to.
          items:
            $ref: '#/components/schemas/NetworkAttachmentConfig'
          type: array
        LogDriver:
          $ref: '#/components/schemas/TaskSpec_LogDriver'
      type: object
    TaskState:
      enum:
      - new
      - allocated
      - pending
      - assigned
      - accepted
      - preparing
      - ready
      - starting
      - running
      - complete
      - shutdown
      - failed
      - rejected
      - remove
      - orphaned
      type: string
    Task:
      example:
        ID: 0kzzo1i0y4jz6027t0k7aezc7
        Version:
          Index: 71
        CreatedAt: 2016-06-07T21:07:31.171892745Z
        UpdatedAt: 2016-06-07T21:07:31.376370513Z
        Spec:
          ContainerSpec:
            Image: redis
          Resources:
            Limits: {}
            Reservations: {}
          RestartPolicy:
            Condition: any
            MaxAttempts: 0
          Placement: {}
        ServiceID: 9mnpnzenvg8p8tdbtq4wvbkcz
        Slot: 1
        NodeID: 60gvrl6tm78dmak4yl7srz94v
        Status:
          Timestamp: 2016-06-07T21:07:31.290032978Z
          State: running
          Message: started
          ContainerStatus:
            ContainerID: e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035
            PID: 677
        DesiredState: running
        NetworksAttachments:
        - Network:
            ID: 4qvuz4ko70xaltuqbt8956gd1
            Version:
              Index: 18
            CreatedAt: 2016-06-07T20:31:11.912919752Z
            UpdatedAt: 2016-06-07T21:07:29.955277358Z
            Spec:
              Name: ingress
              Labels:
                com.docker.swarm.internal: "true"
              DriverConfiguration: {}
              IPAMOptions:
                Driver: {}
                Configs:
                - Subnet: 10.255.0.0/16
                  Gateway: 10.255.0.1
            DriverState:
              Name: overlay
              Options:
                com.docker.network.driver.overlay.vxlanid_list: "256"
            IPAMOptions:
              Driver:
                Name: default
              Configs:
              - Subnet: 10.255.0.0/16
                Gateway: 10.255.0.1
          Addresses:
          - 10.255.0.10/16
        AssignedGenericResources:
        - DiscreteResourceSpec:
            Kind: SSD
            Value: 3
        - NamedResourceSpec:
            Kind: GPU
            Value: UUID1
        - NamedResourceSpec:
            Kind: GPU
            Value: UUID2
      properties:
        ID:
          description: The ID of the task.
          type: string
        Version:
          $ref: '#/components/schemas/ObjectVersion'
        CreatedAt:
          format: dateTime
          type: string
        UpdatedAt:
          format: dateTime
          type: string
        Name:
          description: Name of the task.
          type: string
        Labels:
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          type: object
        Spec:
          $ref: '#/components/schemas/TaskSpec'
        ServiceID:
          description: The ID of the service this task is part of.
          type: string
        Slot:
          type: integer
        NodeID:
          description: The ID of the node that this task is on.
          type: string
        AssignedGenericResources:
          description: |
            User-defined resources can be either Integer resources (e.g, `SSD=3`) or
            String resources (e.g, `GPU=UUID1`).
          example:
          - DiscreteResourceSpec:
              Kind: SSD
              Value: 3
          - NamedResourceSpec:
              Kind: GPU
              Value: UUID1
          - NamedResourceSpec:
              Kind: GPU
              Value: UUID2
          items:
            properties:
              NamedResourceSpec:
                properties:
                  Kind:
                    type: string
                  Value:
                    type: string
                type: object
              DiscreteResourceSpec:
                properties:
                  Kind:
                    type: string
                  Value:
                    format: int64
                    type: integer
                type: object
            type: object
          type: array
        Status:
          $ref: '#/components/schemas/Task_Status'
        DesiredState:
          $ref: '#/components/schemas/TaskState'
        JobIteration:
          $ref: '#/components/schemas/ObjectVersion'
      type: object
    ServiceSpec:
      description: User modifiable configuration for a service.
      properties:
        Name:
          description: Name of the service.
          type: string
        Labels:
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          type: object
        TaskTemplate:
          $ref: '#/components/schemas/TaskSpec'
        Mode:
          $ref: '#/components/schemas/ServiceSpec_Mode'
        UpdateConfig:
          $ref: '#/components/schemas/ServiceSpec_UpdateConfig'
        RollbackConfig:
          $ref: '#/components/schemas/ServiceSpec_RollbackConfig'
        Networks:
          description: Specifies which networks the service should attach to.
          items:
            $ref: '#/components/schemas/NetworkAttachmentConfig'
          type: array
        EndpointSpec:
          $ref: '#/components/schemas/EndpointSpec'
      type: object
    EndpointPortConfig:
      properties:
        Name:
          type: string
        Protocol:
          enum:
          - tcp
          - udp
          - sctp
          type: string
        TargetPort:
          description: The port inside the container.
          type: integer
        PublishedPort:
          description: The port on the swarm hosts.
          type: integer
        PublishMode:
          default: ingress
          description: |
            The mode in which port is published.

            <p><br /></p>

            - "ingress" makes the target port accessible on every node,
              regardless of whether there is a task for the service running on
              that node or not.
            - "host" bypasses the routing mesh and publish the port directly on
              the swarm node where that service is running.
          enum:
          - ingress
          - host
          example: ingress
          type: string
      type: object
    EndpointSpec:
      description: Properties that can be configured to access and load balance a
        service.
      properties:
        Mode:
          default: vip
          description: |
            The mode of resolution to use for internal load balancing between tasks.
          enum:
          - vip
          - dnsrr
          type: string
        Ports:
          description: |
            List of exposed ports that this service is accessible on from the
            outside. Ports can only be provided if `vip` resolution mode is used.
          items:
            $ref: '#/components/schemas/EndpointPortConfig'
          type: array
      type: object
    Service:
      example:
        ID: 9mnpnzenvg8p8tdbtq4wvbkcz
        Version:
          Index: 19
        CreatedAt: 2016-06-07T21:05:51.880065305Z
        UpdatedAt: 2016-06-07T21:07:29.962229872Z
        Spec:
          Name: hopeful_cori
          TaskTemplate:
            ContainerSpec:
              Image: redis
            Resources:
              Limits: {}
              Reservations: {}
            RestartPolicy:
              Condition: any
              MaxAttempts: 0
            Placement: {}
            ForceUpdate: 0
          Mode:
            Replicated:
              Replicas: 1
          UpdateConfig:
            Parallelism: 1
            Delay: 1000000000
            FailureAction: pause
            Monitor: 15000000000
            MaxFailureRatio: 0.15
          RollbackConfig:
            Parallelism: 1
            Delay: 1000000000
            FailureAction: pause
            Monitor: 15000000000
            MaxFailureRatio: 0.15
          EndpointSpec:
            Mode: vip
            Ports:
            - Protocol: tcp
              TargetPort: 6379
              PublishedPort: 30001
        Endpoint:
          Spec:
            Mode: vip
            Ports:
            - Protocol: tcp
              TargetPort: 6379
              PublishedPort: 30001
          Ports:
          - Protocol: tcp
            TargetPort: 6379
            PublishedPort: 30001
          VirtualIPs:
          - NetworkID: 4qvuz4ko70xaltuqbt8956gd1
            Addr: 10.255.0.2/16
          - NetworkID: 4qvuz4ko70xaltuqbt8956gd1
            Addr: 10.255.0.3/16
      properties:
        ID:
          type: string
        Version:
          $ref: '#/components/schemas/ObjectVersion'
        CreatedAt:
          format: dateTime
          type: string
        UpdatedAt:
          format: dateTime
          type: string
        Spec:
          $ref: '#/components/schemas/ServiceSpec'
        Endpoint:
          $ref: '#/components/schemas/Service_Endpoint'
        UpdateStatus:
          $ref: '#/components/schemas/Service_UpdateStatus'
        ServiceStatus:
          $ref: '#/components/schemas/Service_ServiceStatus'
        JobStatus:
          $ref: '#/components/schemas/Service_JobStatus'
      type: object
    ImageDeleteResponseItem:
      example:
        Deleted: Deleted
        Untagged: Untagged
      properties:
        Untagged:
          description: The image ID of an image that was untagged
          type: string
        Deleted:
          description: The image ID of an image that was deleted
          type: string
      type: object
    ServiceUpdateResponse:
      example:
        Warning: 'unable to pin image doesnotexist:latest to digest: image library/doesnotexist:latest
          not found'
      properties:
        Warnings:
          description: Optional warning messages
          items:
            type: string
          type: array
      type: object
    ContainerSummary:
      example:
        Status: Status
        Mounts:
        - Destination: /usr/share/nginx/html/
          Type: volume
          Propagation: ""
          RW: true
          Mode: z
          Driver: local
          Source: /var/lib/docker/volumes/myvolume/_data
          Name: myvolume
        - Destination: /usr/share/nginx/html/
          Type: volume
          Propagation: ""
          RW: true
          Mode: z
          Driver: local
          Source: /var/lib/docker/volumes/myvolume/_data
          Name: myvolume
        SizeRw: 6
        Ports:
        - PrivatePort: 8080
          PublicPort: 80
          Type: tcp
        - PrivatePort: 8080
          PublicPort: 80
          Type: tcp
        Labels:
          key: Labels
        Image: Image
        Created: 0
        Names:
        - Names
        - Names
        NetworkSettings:
          Networks:
            key:
              GlobalIPv6Address: 2001:db8::5689
              IPPrefixLen: 16
              GlobalIPv6PrefixLen: 64
              Aliases:
              - server_x
              - server_y
              NetworkID: 08754567f1f40222263eab4102e1c733ae697e8e354aa9cd6e18d7402835292a
              MacAddress: 02:42:ac:11:00:04
              IPAMConfig:
                LinkLocalIPs:
                - 169.254.34.68
                - fe80::3468
                IPv6Address: 2001:db8:abcd::3033
                IPv4Address: 172.20.30.33
              DriverOpts:
                com.example.some-label: some-value
                com.example.some-other-label: some-other-value
              Gateway: 172.17.0.1
              EndpointID: b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b
              Links:
              - container_1
              - container_2
              IPv6Gateway: 2001:db8:2::100
              IPAddress: 172.17.0.4
        SizeRootFs: 1
        Command: Command
        State: State
        ImageID: ImageID
        HostConfig:
          NetworkMode: NetworkMode
        Id: Id
      properties:
        Id:
          description: The ID of this container
          type: string
          x-go-name: ID
        Names:
          description: The names that this container has been given
          items:
            type: string
          type: array
        Image:
          description: The name of the image used when creating this container
          type: string
        ImageID:
          description: The ID of the image that this container was created from
          type: string
        Command:
          description: Command to run when starting the container
          type: string
        Created:
          description: When the container was created
          format: int64
          type: integer
        Ports:
          description: The ports exposed by this container
          items:
            $ref: '#/components/schemas/Port'
          type: array
        SizeRw:
          description: The size of files that have been created or changed by this
            container
          format: int64
          type: integer
        SizeRootFs:
          description: The total size of all the files in this container
          format: int64
          type: integer
        Labels:
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          type: object
        State:
          description: The state of this container (e.g. `Exited`)
          type: string
        Status:
          description: Additional human-readable status of this container (e.g. `Exit
            0`)
          type: string
        HostConfig:
          $ref: '#/components/schemas/ContainerSummary_HostConfig'
        NetworkSettings:
          $ref: '#/components/schemas/ContainerSummary_NetworkSettings'
        Mounts:
          items:
            $ref: '#/components/schemas/MountPoint'
          type: array
      type: object
    Driver:
      description: Driver represents a driver (network, logging, secrets).
      example:
        Options:
          OptionA: value for driver-specific option A
          OptionB: value for driver-specific option B
        Name: some-driver
      properties:
        Name:
          description: Name of the driver.
          example: some-driver
          nullable: false
          type: string
        Options:
          additionalProperties:
            type: string
          description: Key/value map of driver-specific options.
          example:
            OptionA: value for driver-specific option A
            OptionB: value for driver-specific option B
          nullable: false
          type: object
      required:
      - Name
      type: object
    SecretSpec:
      example:
        Driver:
          Options:
            OptionA: value for driver-specific option A
            OptionB: value for driver-specific option B
          Name: some-driver
        Labels:
          com.example.some-label: some-value
          com.example.some-other-label: some-other-value
        Data: ""
        Templating:
          Options:
            OptionA: value for driver-specific option A
            OptionB: value for driver-specific option B
          Name: some-driver
        Name: Name
      properties:
        Name:
          description: User-defined name of the secret.
          type: string
        Labels:
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          example:
            com.example.some-label: some-value
            com.example.some-other-label: some-other-value
          type: object
        Data:
          description: |
            Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5))
            data to store as secret.

            This field is only used to _create_ a secret, and is not returned by
            other endpoints.
          example: ""
          type: string
        Driver:
          $ref: '#/components/schemas/Driver'
        Templating:
          $ref: '#/components/schemas/Driver'
      type: object
    Secret:
      example:
        Version:
          Index: 373531
        CreatedAt: 2017-07-20T13:55:28.678958722Z
        ID: blt1owaxmitz71s9v5zh81zun
        Spec:
          Driver:
            Options:
              OptionA: value for driver-specific option A
              OptionB: value for driver-specific option B
            Name: some-driver
          Labels:
            com.example.some-label: some-value
            com.example.some-other-label: some-other-value
          Data: ""
          Templating:
            Options:
              OptionA: value for driver-specific option A
              OptionB: value for driver-specific option B
            Name: some-driver
          Name: Name
        UpdatedAt: 2017-07-20T13:55:28.678958722Z
      properties:
        ID:
          example: blt1owaxmitz71s9v5zh81zun
          type: string
        Version:
          $ref: '#/components/schemas/ObjectVersion'
        CreatedAt:
          example: 2017-07-20T13:55:28.678958722Z
          format: dateTime
          type: string
        UpdatedAt:
          example: 2017-07-20T13:55:28.678958722Z
          format: dateTime
          type: string
        Spec:
          $ref: '#/components/schemas/SecretSpec'
      type: object
    ConfigSpec:
      example:
        Labels:
          key: Labels
        Data: Data
        Templating:
          Options:
            OptionA: value for driver-specific option A
            OptionB: value for driver-specific option B
          Name: some-driver
        Name: Name
      properties:
        Name:
          description: User-defined name of the config.
          type: string
        Labels:
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          type: object
        Data:
          description: |
            Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5))
            config data.
          type: string
        Templating:
          $ref: '#/components/schemas/Driver'
      type: object
    Config:
      example:
        Version:
          Index: 373531
        CreatedAt: CreatedAt
        ID: ID
        Spec:
          Labels:
            key: Labels
          Data: Data
          Templating:
            Options:
              OptionA: value for driver-specific option A
              OptionB: value for driver-specific option B
            Name: some-driver
          Name: Name
        UpdatedAt: UpdatedAt
      properties:
        ID:
          type: string
        Version:
          $ref: '#/components/schemas/ObjectVersion'
        CreatedAt:
          format: dateTime
          type: string
        UpdatedAt:
          format: dateTime
          type: string
        Spec:
          $ref: '#/components/schemas/ConfigSpec'
      type: object
    ContainerState:
      description: |
        ContainerState stores container's running state. It's part of ContainerJSONBase
        and will be returned by the "inspect" command.
      example:
        Status: running
        Restarting: false
        Dead: false
        Health:
          Status: healthy
          Log:
          - Start: 2020-01-04T10:44:24.496525531Z
            ExitCode: 0
            Output: Output
            End: 2020-01-04T10:45:21.364524523Z
          - Start: 2020-01-04T10:44:24.496525531Z
            ExitCode: 0
            Output: Output
            End: 2020-01-04T10:45:21.364524523Z
          FailingStreak: 0
        ExitCode: 0
        Running: true
        Error: Error
        FinishedAt: 2020-01-06T09:07:59.461876391Z
        OOMKilled: false
        Pid: 1234
        StartedAt: 2020-01-06T09:06:59.461876391Z
        Paused: false
      properties:
        Status:
          description: |
            String representation of the container state. Can be one of "created",
            "running", "paused", "restarting", "removing", "exited", or "dead".
          enum:
          - created
          - running
          - paused
          - restarting
          - removing
          - exited
          - dead
          example: running
          type: string
        Running:
          description: |
            Whether this container is running.

            Note that a running container can be _paused_. The `Running` and `Paused`
            booleans are not mutually exclusive:

            When pausing a container (on Linux), the freezer cgroup is used to suspend
            all processes in the container. Freezing the process requires the process to
            be running. As a result, paused containers are both `Running` _and_ `Paused`.

            Use the `Status` field instead to determine if a container's state is "running".
          example: true
          type: boolean
        Paused:
          description: Whether this container is paused.
          example: false
          type: boolean
        Restarting:
          description: Whether this container is restarting.
          example: false
          type: boolean
        OOMKilled:
          description: |
            Whether this container has been killed because it ran out of memory.
          example: false
          type: boolean
        Dead:
          example: false
          type: boolean
        Pid:
          description: The process ID of this container
          example: 1234
          type: integer
        ExitCode:
          description: The last exit code of this container
          example: 0
          type: integer
        Error:
          type: string
        StartedAt:
          description: The time when this container was last started.
          example: 2020-01-06T09:06:59.461876391Z
          type: string
        FinishedAt:
          description: The time when this container last exited.
          example: 2020-01-06T09:07:59.461876391Z
          type: string
        Health:
          $ref: '#/components/schemas/Health'
      type: object
    ContainerWaitResponse:
      description: OK response to ContainerWait operation
      example:
        Error:
          Message: Message
        StatusCode: 0
      properties:
        StatusCode:
          description: Exit code of the container
          nullable: false
          type: integer
        Error:
          $ref: '#/components/schemas/ContainerWaitExitError'
      required:
      - Error
      - StatusCode
      title: ContainerWaitResponse
      type: object
      x-go-name: ContainerWaitOKBody
    ContainerWaitExitError:
      description: container waiting error, if any
      example:
        Message: Message
      properties:
        Message:
          description: Details of an error
          type: string
      type: object
      x-go-name: ContainerWaitOKBodyError
    SystemVersion:
      description: |
        Response of Engine API: GET "/version"
      example:
        Components:
        - Details: '{}'
          Version: 19.03.12
          Name: Engine
        - Details: '{}'
          Version: 19.03.12
          Name: Engine
        KernelVersion: 4.19.76-linuxkit
        ApiVersion: "1.40"
        Platform:
          Name: Name
        GitCommit: 48a66213fe
        Os: linux
        Version: 19.03.12
        MinAPIVersion: "1.12"
        Experimental: true
        Arch: amd64
        GoVersion: go1.13.14
        BuildTime: 2020-06-22T15:49:27.000000000+00:00
      properties:
        Platform:
          $ref: '#/components/schemas/SystemVersion_Platform'
        Components:
          description: |
            Information about system components
          items:
            $ref: '#/components/schemas/SystemVersion_Components'
          type: array
        Version:
          description: The version of the daemon
          example: 19.03.12
          type: string
        ApiVersion:
          description: |
            The default (and highest) API version that is supported by the daemon
          example: "1.40"
          type: string
        MinAPIVersion:
          description: |
            The minimum API version that is supported by the daemon
          example: "1.12"
          type: string
        GitCommit:
          description: |
            The Git commit of the source code that was used to build the daemon
          example: 48a66213fe
          type: string
        GoVersion:
          description: |
            The version Go used to compile the daemon, and the version of the Go
            runtime in use.
          example: go1.13.14
          type: string
        Os:
          description: |
            The operating system that the daemon is running on ("linux" or "windows")
          example: linux
          type: string
        Arch:
          description: |
            The architecture that the daemon is running on
          example: amd64
          type: string
        KernelVersion:
          description: |
            The kernel version (`uname -r`) that the daemon is running on.

            This field is omitted when empty.
          example: 4.19.76-linuxkit
          type: string
        Experimental:
          description: |
            Indicates if the daemon is started with experimental features enabled.

            This field is omitted when empty / false.
          example: true
          type: boolean
        BuildTime:
          description: |
            The date and time that the daemon was compiled.
          example: 2020-06-22T15:49:27.000000000+00:00
          type: string
      type: object
    SystemInfo:
      example:
        NGoroutines: 174
        Name: node5.corp.example.com
        Swarm:
          NodeAddr: 10.0.0.46
          Managers: 3
          NodeID: k67qz4598weg5unwwffg6z1m1
          Error: Error
          Cluster:
            DefaultAddrPool:
            - ""
            - ""
            RootRotationInProgress: false
            SubnetSize: 24
            Version:
              Index: 373531
            CreatedAt: 2016-08-18T10:44:24.496525531Z
            TLSInfo:
              TrustRoot: |
                -----BEGIN CERTIFICATE-----
                MIIBajCCARCgAwIBAgIUbYqrLSOSQHoxD8CwG6Bi2PJi9c8wCgYIKoZIzj0EAwIw
                EzERMA8GA1UEAxMIc3dhcm0tY2EwHhcNMTcwNDI0MjE0MzAwWhcNMzcwNDE5MjE0
                MzAwWjATMREwDwYDVQQDEwhzd2FybS1jYTBZMBMGByqGSM49AgEGCCqGSM49AwEH
                A0IABJk/VyMPYdaqDXJb/VXh5n/1Yuv7iNrxV3Qb3l06XD46seovcDWs3IZNV1lf
                3Skyr0ofcchipoiHkXBODojJydSjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMB
                Af8EBTADAQH/MB0GA1UdDgQWBBRUXxuRcnFjDfR/RIAUQab8ZV/n4jAKBggqhkjO
                PQQDAgNIADBFAiAy+JTe6Uc3KyLCMiqGl2GyWGQqQDEcO3/YG36x7om65AIhAJvz
                pxv6zFeVEkAEEkqIYi0omA9+CjanB/6Bz4n1uw8H
                -----END CERTIFICATE-----
              CertIssuerSubject: MBMxETAPBgNVBAMTCHN3YXJtLWNh
              CertIssuerPublicKey: MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEmT9XIw9h1qoNclv9VeHmf/Vi6/uI2vFXdBveXTpcPjqx6i9wNazchk1XWV/dKTKvSh9xyGKmiIeRcE4OiMnJ1A==
            DataPathPort: 4789
            ID: abajmipo7b4xz5ip2nrla6b11
            Spec:
              Orchestration:
                TaskHistoryRetentionLimit: 10
              CAConfig:
                SigningCACert: SigningCACert
                ExternalCAs:
                - Options:
                    key: Options
                  CACert: CACert
                  Protocol: cfssl
                  URL: URL
                - Options:
                    key: Options
                  CACert: CACert
                  Protocol: cfssl
                  URL: URL
                ForceRotate: 6
                NodeCertExpiry: 7776000000000000
                SigningCAKey: SigningCAKey
              Labels:
                com.example.corp.type: production
                com.example.corp.department: engineering
              Raft:
                SnapshotInterval: 10000
                LogEntriesForSlowFollowers: 500
                KeepOldSnapshots: 0
                ElectionTick: 3
                HeartbeatTick: 1
              Dispatcher:
                HeartbeatPeriod: 5000000000
              TaskDefaults:
                LogDriver:
                  Options:
                    max-file: "10"
                    max-size: 100m
                  Name: json-file
              EncryptionConfig:
                AutoLockManagers: false
              Name: default
            UpdatedAt: 2017-08-09T07:09:37.632105588Z
          ControlAvailable: true
          LocalNodeState: active
          Nodes: 4
          RemoteManagers:
          - NodeID: 71izy0goik036k48jg985xnds
            Addr: 10.0.0.158:2377
          - NodeID: 79y6h1o4gv8n120drcprv5nmc
            Addr: 10.0.0.159:2377
          - NodeID: k67qz4598weg5unwwffg6z1m1
            Addr: 10.0.0.46:2377
        RuncCommit:
          Expected: 2d41c047c83e09a6d61d464906feb2a2f3c52aa4
          ID: cfb82a876ecc11b5ca0977d1733adbe58599088a
        OSVersion: "16.04"
        Runtimes:
          runc:
            path: runc
          runc-master:
            path: /go/bin/runc
          custom:
            path: /usr/local/bin/my-oci-runtime
            runtimeArgs:
            - --debug
            - --systemd-cgroup=false
        ID: 7TRN:IPZB:QYBB:VPBQ:UMPP:KARE:6ZNR:XE6T:7EWV:PKF4:ZOJD:TPYS
        DriverStatus:
        - - Backing Filesystem
          - extfs
        - - Supports d_type
          - "true"
        - - Native Overlay Diff
          - "true"
        BridgeNfIptables: true
        LiveRestoreEnabled: false
        SystemTime: 2017-08-08T20:28:29.06202363Z
        NoProxy: '*.local, 169.254/16'
        Architecture: x86_64
        NEventsListener: 30
        HttpsProxy: https://xxxxx:xxxxx@proxy.corp.example.com:4443
        Images: 508
        ContainersRunning: 3
        Labels:
        - storage=ssd
        - production
        InitCommit:
          Expected: 2d41c047c83e09a6d61d464906feb2a2f3c52aa4
          ID: cfb82a876ecc11b5ca0977d1733adbe58599088a
        NFd: 64
        KernelVersion: 4.9.38-moby
        LoggingDriver: LoggingDriver
        DefaultAddressPools:
        - Size: 24
          Base: 10.10.0.0/16
        - Size: 24
          Base: 10.10.0.0/16
        OSType: linux
        SecurityOptions:
        - name=apparmor
        - name=seccomp,profile=default
        - name=selinux
        - name=userns
        - name=rootless
        ContainerdCommit:
          Expected: 2d41c047c83e09a6d61d464906feb2a2f3c52aa4
          ID: cfb82a876ecc11b5ca0977d1733adbe58599088a
        GenericResources:
        - DiscreteResourceSpec:
            Kind: SSD
            Value: 3
        - NamedResourceSpec:
            Kind: GPU
            Value: UUID1
        - NamedResourceSpec:
            Kind: GPU
            Value: UUID2
        KernelMemory: true
        OperatingSystem: Alpine Linux v3.5
        RegistryConfig:
          AllowNondistributableArtifactsCIDRs:
          - ::1/128
          - 127.0.0.0/8
          AllowNondistributableArtifactsHostnames:
          - registry.internal.corp.example.com:3000
          - '[2001:db8:a0b:12f0::1]:443'
          InsecureRegistryCIDRs:
          - ::1/128
          - 127.0.0.0/8
          IndexConfigs:
            "127.0.0.1:5000":
              Name: 127.0.0.1:5000
              Mirrors: []
              Secure: false
              Official: false
            '[2001:db8:a0b:12f0::1]:80':
              Name: '[2001:db8:a0b:12f0::1]:80'
              Mirrors: []
              Secure: false
              Official: false
            docker.io:
              Name: docker.io
              Mirrors:
              - https://hub-mirror.corp.example.com:5000/
              Secure: true
              Official: true
            registry.internal.corp.example.com:3000:
              Name: registry.internal.corp.example.com:3000
              Mirrors: []
              Secure: false
              Official: false
          Mirrors:
          - https://hub-mirror.corp.example.com:5000/
          - https://[2001:db8:a0b:12f0::1]/
        ServerVersion: 17.06.0-ce
        OomKillDisable: true
        CpuCfsQuota: true
        Containers: 14
        Driver: overlay2
        KernelMemoryTCP: true
        IPv4Forwarding: true
        ExperimentalBuild: true
        ProductLicense: Community Engine
        ClusterStore: consul://consul.corp.example.com:8600/some/path
        DockerRootDir: /var/lib/docker
        CPUSet: true
        CpuCfsPeriod: true
        DefaultRuntime: runc
        ClusterAdvertise: node5.corp.example.com:8000
        CPUShares: true
        Debug: true
        NCPU: 4
        Plugins:
          Authorization:
          - img-authz-plugin
          - hbm
          Volume:
          - local
          Log:
          - awslogs
          - fluentd
          - gcplogs
          - gelf
          - journald
          - json-file
          - logentries
          - splunk
          - syslog
          Network:
          - bridge
          - host
          - ipvlan
          - macvlan
          - "null"
          - overlay
        SwapLimit: true
        CgroupDriver: cgroupfs
        ContainersPaused: 1
        MemTotal: 2095882240
        IndexServerAddress: https://index.docker.io/v1/
        MemoryLimit: true
        HttpProxy: http://xxxxx:xxxxx@proxy.corp.example.com:8080
        InitBinary: docker-init
        CgroupVersion: "1"
        PidsLimit: true
        Isolation: default
        BridgeNfIp6tables: true
        Warnings:
        - 'WARNING: No memory limit support'
        - 'WARNING: bridge-nf-call-iptables is disabled'
        - 'WARNING: bridge-nf-call-ip6tables is disabled'
        ContainersStopped: 10
      properties:
        ID:
          description: |
            Unique identifier of the daemon.

            <p><br /></p>

            > **Note**: The format of the ID itself is not part of the API, and
            > should not be considered stable.
          example: 7TRN:IPZB:QYBB:VPBQ:UMPP:KARE:6ZNR:XE6T:7EWV:PKF4:ZOJD:TPYS
          type: string
        Containers:
          description: Total number of containers on the host.
          example: 14
          type: integer
        ContainersRunning:
          description: |
            Number of containers with status `"running"`.
          example: 3
          type: integer
        ContainersPaused:
          description: |
            Number of containers with status `"paused"`.
          example: 1
          type: integer
        ContainersStopped:
          description: |
            Number of containers with status `"stopped"`.
          example: 10
          type: integer
        Images:
          description: |
            Total number of images on the host.

            Both _tagged_ and _untagged_ (dangling) images are counted.
          example: 508
          type: integer
        Driver:
          description: Name of the storage driver in use.
          example: overlay2
          type: string
        DriverStatus:
          description: |
            Information specific to the storage driver, provided as
            "label" / "value" pairs.

            This information is provided by the storage driver, and formatted
            in a way consistent with the output of `docker info` on the command
            line.

            <p><br /></p>

            > **Note**: The information returned in this field, including the
            > formatting of values and labels, should not be considered stable,
            > and may change without notice.
          example:
          - - Backing Filesystem
            - extfs
          - - Supports d_type
            - "true"
          - - Native Overlay Diff
            - "true"
          items:
            items:
              type: string
            type: array
          type: array
        DockerRootDir:
          description: |
            Root directory of persistent Docker state.

            Defaults to `/var/lib/docker` on Linux, and `C:\ProgramData\docker`
            on Windows.
          example: /var/lib/docker
          type: string
        Plugins:
          $ref: '#/components/schemas/PluginsInfo'
        MemoryLimit:
          description: Indicates if the host has memory limit support enabled.
          example: true
          type: boolean
        SwapLimit:
          description: Indicates if the host has memory swap limit support enabled.
          example: true
          type: boolean
        KernelMemory:
          description: |
            Indicates if the host has kernel memory limit support enabled.

            <p><br /></p>

            > **Deprecated**: This field is deprecated as the kernel 5.4 deprecated
            > `kmem.limit_in_bytes`.
          example: true
          type: boolean
        KernelMemoryTCP:
          description: |
            Indicates if the host has kernel memory TCP limit support enabled.

            Kernel memory TCP limits are not supported when using cgroups v2, which
            does not support the corresponding `memory.kmem.tcp.limit_in_bytes` cgroup.
          example: true
          type: boolean
        CpuCfsPeriod:
          description: |
            Indicates if CPU CFS(Completely Fair Scheduler) period is supported by
            the host.
          example: true
          type: boolean
        CpuCfsQuota:
          description: |
            Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by
            the host.
          example: true
          type: boolean
        CPUShares:
          description: |
            Indicates if CPU Shares limiting is supported by the host.
          example: true
          type: boolean
        CPUSet:
          description: |
            Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.

            See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)
          example: true
          type: boolean
        PidsLimit:
          description: Indicates if the host kernel has PID limit support enabled.
          example: true
          type: boolean
        OomKillDisable:
          description: Indicates if OOM killer disable is supported on the host.
          type: boolean
        IPv4Forwarding:
          description: Indicates IPv4 forwarding is enabled.
          example: true
          type: boolean
        BridgeNfIptables:
          description: Indicates if `bridge-nf-call-iptables` is available on the
            host.
          example: true
          type: boolean
        BridgeNfIp6tables:
          description: Indicates if `bridge-nf-call-ip6tables` is available on the
            host.
          example: true
          type: boolean
        Debug:
          description: |
            Indicates if the daemon is running in debug-mode / with debug-level
            logging enabled.
          example: true
          type: boolean
        NFd:
          description: |
            The total number of file Descriptors in use by the daemon process.

            This information is only returned if debug-mode is enabled.
          example: 64
          type: integer
        NGoroutines:
          description: |
            The  number of goroutines that currently exist.

            This information is only returned if debug-mode is enabled.
          example: 174
          type: integer
        SystemTime:
          description: |
            Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt)
            format with nano-seconds.
          example: 2017-08-08T20:28:29.06202363Z
          type: string
        LoggingDriver:
          description: |
            The logging driver to use as a default for new containers.
          type: string
        CgroupDriver:
          default: cgroupfs
          description: |
            The driver to use for managing cgroups.
          enum:
          - cgroupfs
          - systemd
          - none
          example: cgroupfs
          type: string
        CgroupVersion:
          default: "1"
          description: |
            The version of the cgroup.
          enum:
          - "1"
          - "2"
          example: "1"
          type: string
        NEventsListener:
          description: Number of event listeners subscribed.
          example: 30
          type: integer
        KernelVersion:
          description: |
            Kernel version of the host.

            On Linux, this information obtained from `uname`. On Windows this
            information is queried from the <kbd>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\</kbd>
            registry value, for example _"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)"_.
          example: 4.9.38-moby
          type: string
        OperatingSystem:
          description: |
            Name of the host's operating system, for example: "Ubuntu 16.04.2 LTS"
            or "Windows Server 2016 Datacenter"
          example: Alpine Linux v3.5
          type: string
        OSVersion:
          description: |
            Version of the host's operating system

            <p><br /></p>

            > **Note**: The information returned in this field, including its
            > very existence, and the formatting of values, should not be considered
            > stable, and may change without notice.
          example: "16.04"
          type: string
        OSType:
          description: |
            Generic type of the operating system of the host, as returned by the
            Go runtime (`GOOS`).

            Currently returned values are "linux" and "windows". A full list of
            possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
          example: linux
          type: string
        Architecture:
          description: |
            Hardware architecture of the host, as returned by the Go runtime
            (`GOARCH`).

            A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
          example: x86_64
          type: string
        NCPU:
          description: |
            The number of logical CPUs usable by the daemon.

            The number of available CPUs is checked by querying the operating
            system when the daemon starts. Changes to operating system CPU
            allocation after the daemon is started are not reflected.
          example: 4
          type: integer
        MemTotal:
          description: |
            Total amount of physical memory available on the host, in bytes.
          example: 2095882240
          format: int64
          type: integer
        IndexServerAddress:
          default: https://index.docker.io/v1/
          description: |
            Address / URL of the index server that is used for image search,
            and as a default for user authentication for Docker Hub and Docker Cloud.
          example: https://index.docker.io/v1/
          type: string
        RegistryConfig:
          $ref: '#/components/schemas/RegistryServiceConfig'
        GenericResources:
          description: |
            User-defined resources can be either Integer resources (e.g, `SSD=3`) or
            String resources (e.g, `GPU=UUID1`).
          example:
          - DiscreteResourceSpec:
              Kind: SSD
              Value: 3
          - NamedResourceSpec:
              Kind: GPU
              Value: UUID1
          - NamedResourceSpec:
              Kind: GPU
              Value: UUID2
          items:
            properties:
              NamedResourceSpec:
                properties:
                  Kind:
                    type: string
                  Value:
                    type: string
                type: object
              DiscreteResourceSpec:
                properties:
                  Kind:
                    type: string
                  Value:
                    format: int64
                    type: integer
                type: object
            type: object
          type: array
        HttpProxy:
          description: |
            HTTP-proxy configured for the daemon. This value is obtained from the
            [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
            Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL
            are masked in the API response.

            Containers do not automatically inherit this configuration.
          example: http://xxxxx:xxxxx@proxy.corp.example.com:8080
          type: string
        HttpsProxy:
          description: |
            HTTPS-proxy configured for the daemon. This value is obtained from the
            [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
            Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL
            are masked in the API response.

            Containers do not automatically inherit this configuration.
          example: https://xxxxx:xxxxx@proxy.corp.example.com:4443
          type: string
        NoProxy:
          description: |
            Comma-separated list of domain extensions for which no proxy should be
            used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html)
            environment variable.

            Containers do not automatically inherit this configuration.
          example: '*.local, 169.254/16'
          type: string
        Name:
          description: Hostname of the host.
          example: node5.corp.example.com
          type: string
        Labels:
          description: |
            User-defined labels (key/value metadata) as set on the daemon.

            <p><br /></p>

            > **Note**: When part of a Swarm, nodes can both have _daemon_ labels,
            > set through the daemon configuration, and _node_ labels, set from a
            > manager node in the Swarm. Node labels are not included in this
            > field. Node labels can be retrieved using the `/nodes/(id)` endpoint
            > on a manager node in the Swarm.
          example:
          - storage=ssd
          - production
          items:
            type: string
          type: array
        ExperimentalBuild:
          description: |
            Indicates if experimental features are enabled on the daemon.
          example: true
          type: boolean
        ServerVersion:
          description: |
            Version string of the daemon.

            > **Note**: the [standalone Swarm API](/swarm/swarm-api/)
            > returns the Swarm version instead of the daemon  version, for example
            > `swarm/1.2.8`.
          example: 17.06.0-ce
          type: string
        ClusterStore:
          description: |
            URL of the distributed storage backend.


            The storage backend is used for multihost networking (to store
            network and endpoint information) and by the node discovery mechanism.

            <p><br /></p>

            > **Deprecated**: This field is only propagated when using standalone Swarm
            > mode, and overlay networking using an external k/v store. Overlay
            > networks with Swarm mode enabled use the built-in raft store, and
            > this field will be empty.
          example: consul://consul.corp.example.com:8600/some/path
          type: string
        ClusterAdvertise:
          description: |
            The network endpoint that the Engine advertises for the purpose of
            node discovery. ClusterAdvertise is a `host:port` combination on which
            the daemon is reachable by other hosts.

            <p><br /></p>

            > **Deprecated**: This field is only propagated when using standalone Swarm
            > mode, and overlay networking using an external k/v store. Overlay
            > networks with Swarm mode enabled use the built-in raft store, and
            > this field will be empty.
          example: node5.corp.example.com:8000
          type: string
        Runtimes:
          additionalProperties:
            $ref: '#/components/schemas/Runtime'
          description: |
            List of [OCI compliant](https://github.com/opencontainers/runtime-spec)
            runtimes configured on the daemon. Keys hold the "name" used to
            reference the runtime.

            The Docker daemon relies on an OCI compliant runtime (invoked via the
            `containerd` daemon) as its interface to the Linux kernel namespaces,
            cgroups, and SELinux.

            The default runtime is `runc`, and automatically configured. Additional
            runtimes can be configured by the user and will be listed here.
          example:
            runc:
              path: runc
            runc-master:
              path: /go/bin/runc
            custom:
              path: /usr/local/bin/my-oci-runtime
              runtimeArgs:
              - --debug
              - --systemd-cgroup=false
          type: object
        DefaultRuntime:
          default: runc
          description: |
            Name of the default OCI runtime that is used when starting containers.

            The default can be overridden per-container at create time.
          example: runc
          type: string
        Swarm:
          $ref: '#/components/schemas/SwarmInfo'
        LiveRestoreEnabled:
          default: false
          description: |
            Indicates if live restore is enabled.

            If enabled, containers are kept running when the daemon is shutdown
            or upon daemon start if running containers are detected.
          example: false
          type: boolean
        Isolation:
          default: default
          description: |
            Represents the isolation technology to use as a default for containers.
            The supported values are platform-specific.

            If no isolation value is specified on daemon start, on Windows client,
            the default is `hyperv`, and on Windows server, the default is `process`.

            This option is currently not used on other platforms.
          enum:
          - default
          - hyperv
          - process
          type: string
        InitBinary:
          description: |
            Name and, optional, path of the `docker-init` binary.

            If the path is omitted, the daemon searches the host's `$PATH` for the
            binary and uses the first result.
          example: docker-init
          type: string
        ContainerdCommit:
          $ref: '#/components/schemas/Commit'
        RuncCommit:
          $ref: '#/components/schemas/Commit'
        InitCommit:
          $ref: '#/components/schemas/Commit'
        SecurityOptions:
          description: |
            List of security features that are enabled on the daemon, such as
            apparmor, seccomp, SELinux, user-namespaces (userns), and rootless.

            Additional configuration options for each security feature may
            be present, and are included as a comma-separated list of key/value
            pairs.
          example:
          - name=apparmor
          - name=seccomp,profile=default
          - name=selinux
          - name=userns
          - name=rootless
          items:
            type: string
          type: array
        ProductLicense:
          description: |
            Reports a summary of the product license on the daemon.

            If a commercial license has been applied to the daemon, information
            such as number of nodes, and expiration are included.
          example: Community Engine
          type: string
        DefaultAddressPools:
          description: |
            List of custom default address pools for local networks, which can be
            specified in the daemon.json file or dockerd option.

            Example: a Base "10.10.0.0/16" with Size 24 will define the set of 256
            10.10.[0-255].0/24 address pools.
          items:
            $ref: '#/components/schemas/SystemInfo_DefaultAddressPools'
          type: array
        Warnings:
          description: |
            List of warnings / informational messages about missing features, or
            issues related to the daemon configuration.

            These messages can be printed by the client as information to the user.
          example:
          - 'WARNING: No memory limit support'
          - 'WARNING: bridge-nf-call-iptables is disabled'
          - 'WARNING: bridge-nf-call-ip6tables is disabled'
          items:
            type: string
          type: array
      type: object
    PluginsInfo:
      description: |
        Available plugins per type.

        <p><br /></p>

        > **Note**: Only unmanaged (V1) plugins are included in this list.
        > V1 plugins are "lazily" loaded, and are not returned in this list
        > if there is no resource using the plugin.
      example:
        Authorization:
        - img-authz-plugin
        - hbm
        Volume:
        - local
        Log:
        - awslogs
        - fluentd
        - gcplogs
        - gelf
        - journald
        - json-file
        - logentries
        - splunk
        - syslog
        Network:
        - bridge
        - host
        - ipvlan
        - macvlan
        - "null"
        - overlay
      properties:
        Volume:
          description: Names of available volume-drivers, and network-driver plugins.
          example:
          - local
          items:
            type: string
          type: array
        Network:
          description: Names of available network-drivers, and network-driver plugins.
          example:
          - bridge
          - host
          - ipvlan
          - macvlan
          - "null"
          - overlay
          items:
            type: string
          type: array
        Authorization:
          description: Names of available authorization plugins.
          example:
          - img-authz-plugin
          - hbm
          items:
            type: string
          type: array
        Log:
          description: Names of available logging-drivers, and logging-driver plugins.
          example:
          - awslogs
          - fluentd
          - gcplogs
          - gelf
          - journald
          - json-file
          - logentries
          - splunk
          - syslog
          items:
            type: string
          type: array
      type: object
    RegistryServiceConfig:
      description: |
        RegistryServiceConfig stores daemon registry services configuration.
      example:
        AllowNondistributableArtifactsCIDRs:
        - ::1/128
        - 127.0.0.0/8
        AllowNondistributableArtifactsHostnames:
        - registry.internal.corp.example.com:3000
        - '[2001:db8:a0b:12f0::1]:443'
        InsecureRegistryCIDRs:
        - ::1/128
        - 127.0.0.0/8
        IndexConfigs:
          "127.0.0.1:5000":
            Name: 127.0.0.1:5000
            Mirrors: []
            Secure: false
            Official: false
          '[2001:db8:a0b:12f0::1]:80':
            Name: '[2001:db8:a0b:12f0::1]:80'
            Mirrors: []
            Secure: false
            Official: false
          docker.io:
            Name: docker.io
            Mirrors:
            - https://hub-mirror.corp.example.com:5000/
            Secure: true
            Official: true
          registry.internal.corp.example.com:3000:
            Name: registry.internal.corp.example.com:3000
            Mirrors: []
            Secure: false
            Official: false
        Mirrors:
        - https://hub-mirror.corp.example.com:5000/
        - https://[2001:db8:a0b:12f0::1]/
      nullable: true
      properties:
        AllowNondistributableArtifactsCIDRs:
          description: |
            List of IP ranges to which nondistributable artifacts can be pushed,
            using the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).

            Some images (for example, Windows base images) contain artifacts
            whose distribution is restricted by license. When these images are
            pushed to a registry, restricted artifacts are not included.

            This configuration override this behavior, and enables the daemon to
            push nondistributable artifacts to all registries whose resolved IP
            address is within the subnet described by the CIDR syntax.

            This option is useful when pushing images containing
            nondistributable artifacts to a registry on an air-gapped network so
            hosts on that network can pull the images without connecting to
            another server.

            > **Warning**: Nondistributable artifacts typically have restrictions
            > on how and where they can be distributed and shared. Only use this
            > feature to push artifacts to private registries and ensure that you
            > are in compliance with any terms that cover redistributing
            > nondistributable artifacts.
          example:
          - ::1/128
          - 127.0.0.0/8
          items:
            type: string
          type: array
        AllowNondistributableArtifactsHostnames:
          description: |
            List of registry hostnames to which nondistributable artifacts can be
            pushed, using the format `<hostname>[:<port>]` or `<IP address>[:<port>]`.

            Some images (for example, Windows base images) contain artifacts
            whose distribution is restricted by license. When these images are
            pushed to a registry, restricted artifacts are not included.

            This configuration override this behavior for the specified
            registries.

            This option is useful when pushing images containing
            nondistributable artifacts to a registry on an air-gapped network so
            hosts on that network can pull the images without connecting to
            another server.

            > **Warning**: Nondistributable artifacts typically have restrictions
            > on how and where they can be distributed and shared. Only use this
            > feature to push artifacts to private registries and ensure that you
            > are in compliance with any terms that cover redistributing
            > nondistributable artifacts.
          example:
          - registry.internal.corp.example.com:3000
          - '[2001:db8:a0b:12f0::1]:443'
          items:
            type: string
          type: array
        InsecureRegistryCIDRs:
          description: |
            List of IP ranges of insecure registries, using the CIDR syntax
            ([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries
            accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates
            from unknown CAs) communication.

            By default, local registries (`127.0.0.0/8`) are configured as
            insecure. All other registries are secure. Communicating with an
            insecure registry is not possible if the daemon assumes that registry
            is secure.

            This configuration override this behavior, insecure communication with
            registries whose resolved IP address is within the subnet described by
            the CIDR syntax.

            Registries can also be marked insecure by hostname. Those registries
            are listed under `IndexConfigs` and have their `Secure` field set to
            `false`.

            > **Warning**: Using this option can be useful when running a local
            > registry, but introduces security vulnerabilities. This option
            > should therefore ONLY be used for testing purposes. For increased
            > security, users should add their CA to their system's list of trusted
            > CAs instead of enabling this option.
          example:
          - ::1/128
          - 127.0.0.0/8
          items:
            type: string
          type: array
        IndexConfigs:
          additionalProperties:
            $ref: '#/components/schemas/IndexInfo'
          example:
            "127.0.0.1:5000":
              Name: 127.0.0.1:5000
              Mirrors: []
              Secure: false
              Official: false
            '[2001:db8:a0b:12f0::1]:80':
              Name: '[2001:db8:a0b:12f0::1]:80'
              Mirrors: []
              Secure: false
              Official: false
            docker.io:
              Name: docker.io
              Mirrors:
              - https://hub-mirror.corp.example.com:5000/
              Secure: true
              Official: true
            registry.internal.corp.example.com:3000:
              Name: registry.internal.corp.example.com:3000
              Mirrors: []
              Secure: false
              Official: false
          type: object
        Mirrors:
          description: |
            List of registry URLs that act as a mirror for the official
            (`docker.io`) registry.
          example:
          - https://hub-mirror.corp.example.com:5000/
          - https://[2001:db8:a0b:12f0::1]/
          items:
            type: string
          type: array
      type: object
      x-nullable: true
    IndexInfo:
      description: IndexInfo contains information about a registry.
      nullable: true
      properties:
        Name:
          description: |
            Name of the registry, such as "docker.io".
          example: docker.io
          type: string
        Mirrors:
          description: |
            List of mirrors, expressed as URIs.
          example:
          - https://hub-mirror.corp.example.com:5000/
          - https://registry-2.docker.io/
          - https://registry-3.docker.io/
          items:
            type: string
          type: array
        Secure:
          description: |
            Indicates if the registry is part of the list of insecure
            registries.

            If `false`, the registry is insecure. Insecure registries accept
            un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from
            unknown CAs) communication.

            > **Warning**: Insecure registries can be useful when running a local
            > registry. However, because its use creates security vulnerabilities
            > it should ONLY be enabled for testing purposes. For increased
            > security, users should add their CA to their system's list of
            > trusted CAs instead of enabling this option.
          example: true
          type: boolean
        Official:
          description: |
            Indicates whether this is an official registry (i.e., Docker Hub / docker.io)
          example: true
          type: boolean
      type: object
      x-nullable: true
    Runtime:
      description: |
        Runtime describes an [OCI compliant](https://github.com/opencontainers/runtime-spec)
        runtime.

        The runtime is invoked by the daemon via the `containerd` daemon. OCI
        runtimes act as an interface to the Linux kernel namespaces, cgroups,
        and SELinux.
      properties:
        path:
          description: |
            Name and, optional, path, of the OCI executable binary.

            If the path is omitted, the daemon searches the host's `$PATH` for the
            binary and uses the first result.
          example: /usr/local/bin/my-oci-runtime
          type: string
        runtimeArgs:
          description: |
            List of command-line arguments to pass to the runtime when invoked.
          example:
          - --debug
          - --systemd-cgroup=false
          items:
            type: string
          nullable: true
          type: array
      type: object
    Commit:
      description: |
        Commit holds the Git-commit (SHA1) that a binary was built from, as
        reported in the version-string of external tools, such as `containerd`,
        or `runC`.
      example:
        Expected: 2d41c047c83e09a6d61d464906feb2a2f3c52aa4
        ID: cfb82a876ecc11b5ca0977d1733adbe58599088a
      properties:
        ID:
          description: Actual commit ID of external tool.
          example: cfb82a876ecc11b5ca0977d1733adbe58599088a
          type: string
        Expected:
          description: |
            Commit ID of external tool expected by dockerd as set at build time.
          example: 2d41c047c83e09a6d61d464906feb2a2f3c52aa4
          type: string
      type: object
    SwarmInfo:
      description: |
        Represents generic information about swarm.
      example:
        NodeAddr: 10.0.0.46
        Managers: 3
        NodeID: k67qz4598weg5unwwffg6z1m1
        Error: Error
        Cluster:
          DefaultAddrPool:
          - ""
          - ""
          RootRotationInProgress: false
          SubnetSize: 24
          Version:
            Index: 373531
          CreatedAt: 2016-08-18T10:44:24.496525531Z
          TLSInfo:
            TrustRoot: |
              -----BEGIN CERTIFICATE-----
              MIIBajCCARCgAwIBAgIUbYqrLSOSQHoxD8CwG6Bi2PJi9c8wCgYIKoZIzj0EAwIw
              EzERMA8GA1UEAxMIc3dhcm0tY2EwHhcNMTcwNDI0MjE0MzAwWhcNMzcwNDE5MjE0
              MzAwWjATMREwDwYDVQQDEwhzd2FybS1jYTBZMBMGByqGSM49AgEGCCqGSM49AwEH
              A0IABJk/VyMPYdaqDXJb/VXh5n/1Yuv7iNrxV3Qb3l06XD46seovcDWs3IZNV1lf
              3Skyr0ofcchipoiHkXBODojJydSjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMB
              Af8EBTADAQH/MB0GA1UdDgQWBBRUXxuRcnFjDfR/RIAUQab8ZV/n4jAKBggqhkjO
              PQQDAgNIADBFAiAy+JTe6Uc3KyLCMiqGl2GyWGQqQDEcO3/YG36x7om65AIhAJvz
              pxv6zFeVEkAEEkqIYi0omA9+CjanB/6Bz4n1uw8H
              -----END CERTIFICATE-----
            CertIssuerSubject: MBMxETAPBgNVBAMTCHN3YXJtLWNh
            CertIssuerPublicKey: MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEmT9XIw9h1qoNclv9VeHmf/Vi6/uI2vFXdBveXTpcPjqx6i9wNazchk1XWV/dKTKvSh9xyGKmiIeRcE4OiMnJ1A==
          DataPathPort: 4789
          ID: abajmipo7b4xz5ip2nrla6b11
          Spec:
            Orchestration:
              TaskHistoryRetentionLimit: 10
            CAConfig:
              SigningCACert: SigningCACert
              ExternalCAs:
              - Options:
                  key: Options
                CACert: CACert
                Protocol: cfssl
                URL: URL
              - Options:
                  key: Options
                CACert: CACert
                Protocol: cfssl
                URL: URL
              ForceRotate: 6
              NodeCertExpiry: 7776000000000000
              SigningCAKey: SigningCAKey
            Labels:
              com.example.corp.type: production
              com.example.corp.department: engineering
            Raft:
              SnapshotInterval: 10000
              LogEntriesForSlowFollowers: 500
              KeepOldSnapshots: 0
              ElectionTick: 3
              HeartbeatTick: 1
            Dispatcher:
              HeartbeatPeriod: 5000000000
            TaskDefaults:
              LogDriver:
                Options:
                  max-file: "10"
                  max-size: 100m
                Name: json-file
            EncryptionConfig:
              AutoLockManagers: false
            Name: default
          UpdatedAt: 2017-08-09T07:09:37.632105588Z
        ControlAvailable: true
        LocalNodeState: active
        Nodes: 4
        RemoteManagers:
        - NodeID: 71izy0goik036k48jg985xnds
          Addr: 10.0.0.158:2377
        - NodeID: 79y6h1o4gv8n120drcprv5nmc
          Addr: 10.0.0.159:2377
        - NodeID: k67qz4598weg5unwwffg6z1m1
          Addr: 10.0.0.46:2377
      properties:
        NodeID:
          default: ""
          description: Unique identifier of for this node in the swarm.
          example: k67qz4598weg5unwwffg6z1m1
          type: string
        NodeAddr:
          default: ""
          description: |
            IP address at which this node can be reached by other nodes in the
            swarm.
          example: 10.0.0.46
          type: string
        LocalNodeState:
          $ref: '#/components/schemas/LocalNodeState'
        ControlAvailable:
          default: false
          example: true
          type: boolean
        Error:
          default: ""
          type: string
        RemoteManagers:
          description: |
            List of ID's and addresses of other managers in the swarm.
          example:
          - NodeID: 71izy0goik036k48jg985xnds
            Addr: 10.0.0.158:2377
          - NodeID: 79y6h1o4gv8n120drcprv5nmc
            Addr: 10.0.0.159:2377
          - NodeID: k67qz4598weg5unwwffg6z1m1
            Addr: 10.0.0.46:2377
          items:
            $ref: '#/components/schemas/PeerNode'
          nullable: true
          type: array
        Nodes:
          description: Total number of nodes in the swarm.
          example: 4
          nullable: true
          type: integer
        Managers:
          description: Total number of managers in the swarm.
          example: 3
          nullable: true
          type: integer
        Cluster:
          $ref: '#/components/schemas/ClusterInfo'
      type: object
    LocalNodeState:
      default: ""
      description: Current local status of this node.
      enum:
      - ""
      - inactive
      - pending
      - active
      - error
      - locked
      example: active
      type: string
    PeerNode:
      description: Represents a peer-node in the swarm
      properties:
        NodeID:
          description: Unique identifier of for this node in the swarm.
          type: string
        Addr:
          description: |
            IP address and ports at which this node can be reached.
          type: string
      type: object
    NetworkAttachmentConfig:
      description: |
        Specifies how a service should be attached to a particular network.
      properties:
        Target:
          description: |
            The target network for attachment. Must be a network name or ID.
          type: string
        Aliases:
          description: |
            Discoverable alternate names for the service on this network.
          items:
            type: string
          type: array
        DriverOpts:
          additionalProperties:
            type: string
          description: |
            Driver attachment options for the network target.
          type: object
      type: object
    EventActor:
      description: |
        Actor describes something that generates events, like a container, network,
        or a volume.
      example:
        Attributes:
          com.example.some-label: some-label-value
          image: alpine:latest
          name: my-container
        ID: ede54ee1afda366ab42f824e8a5ffd195155d853ceaec74a927f249ea270c743
      properties:
        ID:
          description: The ID of the object emitting the event
          example: ede54ee1afda366ab42f824e8a5ffd195155d853ceaec74a927f249ea270c743
          type: string
        Attributes:
          additionalProperties:
            type: string
          description: |
            Various key/value attributes of the object, depending on its type.
          example:
            com.example.some-label: some-label-value
            image: alpine:latest
            name: my-container
          type: object
      type: object
    EventMessage:
      description: |
        EventMessage represents the information an event contains.
      example:
        Type: container
        Action: create
        Actor:
          Attributes:
            com.example.some-label: some-label-value
            image: alpine:latest
            name: my-container
          ID: ede54ee1afda366ab42f824e8a5ffd195155d853ceaec74a927f249ea270c743
        scope: local
        timeNano: 1629574695515050031
        time: 1629574695
      properties:
        Type:
          description: The type of object emitting the event
          enum:
          - builder
          - config
          - container
          - daemon
          - image
          - network
          - node
          - plugin
          - secret
          - service
          - volume
          example: container
          type: string
        Action:
          description: The type of event
          example: create
          type: string
        Actor:
          $ref: '#/components/schemas/EventActor'
        scope:
          description: |
            Scope of the event. Engine events are `local` scope. Cluster (Swarm)
            events are `swarm` scope.
          enum:
          - local
          - swarm
          type: string
        time:
          description: Timestamp of event
          example: 1629574695
          format: int64
          type: integer
        timeNano:
          description: Timestamp of event, with nanosecond accuracy
          example: 1629574695515050031
          format: int64
          type: integer
      title: SystemEventsResponse
      type: object
    OCIDescriptor:
      description: |
        A descriptor struct containing digest, media type, and size, as defined in
        the [OCI Content Descriptors Specification](https://github.com/opencontainers/image-spec/blob/v1.0.1/descriptor.md).
      example:
        size: 3987495
        digest: sha256:c0537ff6a5218ef531ece93d4984efc99bbf3f7497c0a7726c88e2bb7584dc96
        mediaType: application/vnd.docker.distribution.manifest.v2+json
      properties:
        mediaType:
          description: |
            The media type of the object this schema refers to.
          example: application/vnd.docker.distribution.manifest.v2+json
          type: string
        digest:
          description: |
            The digest of the targeted content.
          example: sha256:c0537ff6a5218ef531ece93d4984efc99bbf3f7497c0a7726c88e2bb7584dc96
          type: string
        size:
          description: |
            The size in bytes of the blob.
          example: 3987495
          format: int64
          type: integer
      type: object
      x-go-name: Descriptor
    OCIPlatform:
      description: |
        Describes the platform which the image in the manifest runs on, as defined
        in the [OCI Image Index Specification](https://github.com/opencontainers/image-spec/blob/v1.0.1/image-index.md).
      example:
        os: windows
        os.features:
        - win32k
        variant: v7
        architecture: arm
        os.version: 10.0.19041.1165
      properties:
        architecture:
          description: |
            The CPU architecture, for example `amd64` or `ppc64`.
          example: arm
          type: string
        os:
          description: |
            The operating system, for example `linux` or `windows`.
          example: windows
          type: string
        os.version:
          description: |
            Optional field specifying the operating system version, for example on
            Windows `10.0.19041.1165`.
          example: 10.0.19041.1165
          type: string
        os.features:
          description: |
            Optional field specifying an array of strings, each listing a required
            OS feature (for example on Windows `win32k`).
          example:
          - win32k
          items:
            type: string
          type: array
        variant:
          description: |
            Optional field specifying a variant of the CPU, for example `v7` to
            specify ARMv7 when architecture is `arm`.
          example: v7
          type: string
      type: object
      x-go-name: Platform
    DistributionInspect:
      description: |
        Describes the result obtained from contacting the registry to retrieve
        image metadata.
      example:
        Platforms:
        - os: windows
          os.features:
          - win32k
          variant: v7
          architecture: arm
          os.version: 10.0.19041.1165
        - os: windows
          os.features:
          - win32k
          variant: v7
          architecture: arm
          os.version: 10.0.19041.1165
        Descriptor:
          size: 3987495
          digest: sha256:c0537ff6a5218ef531ece93d4984efc99bbf3f7497c0a7726c88e2bb7584dc96
          mediaType: application/vnd.docker.distribution.manifest.v2+json
      properties:
        Descriptor:
          $ref: '#/components/schemas/OCIDescriptor'
        Platforms:
          description: |
            An array containing all platforms supported by the image.
          items:
            $ref: '#/components/schemas/OCIPlatform'
          type: array
      required:
      - Descriptor
      - Platforms
      title: DistributionInspectResponse
      type: object
      x-go-name: DistributionInspect
    ContainerCreateResponse:
      description: OK response to ContainerCreate operation
      example:
        Id: Id
        Warnings:
        - Warnings
        - Warnings
      properties:
        Id:
          description: The ID of the created container
          nullable: false
          type: string
        Warnings:
          description: Warnings encountered when creating the container
          items:
            type: string
          nullable: false
          type: array
      required:
      - Id
      - Warnings
      title: ContainerCreateResponse
      type: object
    ContainerInspectResponse:
      example:
        Platform: Platform
        Config:
          User: User
          OpenStdin: false
          Env:
          - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          Image: example-image:1.0
          StdinOnce: false
          AttachStdout: true
          Shell:
          - /bin/sh
          - -c
          Volumes:
            key: '{}'
          Domainname: Domainname
          AttachStdin: false
          Tty: false
          Cmd:
          - /bin/sh
          StopTimeout: 9
          StopSignal: SIGTERM
          Entrypoint: []
          AttachStderr: true
          ArgsEscaped: false
          Hostname: 439f4e91bd1d
          Labels:
            com.example.some-label: some-value
            com.example.some-other-label: some-other-value
          Healthcheck:
            Test:
            - Test
            - Test
            Timeout: 5
            Retries: 2
            Interval: 5
            StartPeriod: 7
          NetworkDisabled: true
          MacAddress: MacAddress
          ExposedPorts:
            "80/tcp": {}
            "443/tcp": {}
          WorkingDir: /public/
          OnBuild: []
        Driver: Driver
        AppArmorProfile: AppArmorProfile
        HostsPath: HostsPath
        HostnamePath: HostnamePath
        Image: Image
        Created: Created
        Name: Name
        MountLabel: MountLabel
        SizeRootFs: 1
        Path: Path
        Args:
        - Args
        - Args
        ProcessLabel: ProcessLabel
        Mounts:
        - Destination: /usr/share/nginx/html/
          Type: volume
          Propagation: ""
          RW: true
          Mode: z
          Driver: local
          Source: /var/lib/docker/volumes/myvolume/_data
          Name: myvolume
        - Destination: /usr/share/nginx/html/
          Type: volume
          Propagation: ""
          RW: true
          Mode: z
          Driver: local
          Source: /var/lib/docker/volumes/myvolume/_data
          Name: myvolume
        SizeRw: 6
        GraphDriver:
          Data:
            MergedDir: /var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/merged
            UpperDir: /var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/diff
            WorkDir: /var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/work
          Name: overlay2
        RestartCount: 0
        NetworkSettings:
          HairpinMode: false
          Networks:
            key:
              GlobalIPv6Address: 2001:db8::5689
              IPPrefixLen: 16
              GlobalIPv6PrefixLen: 64
              Aliases:
              - server_x
              - server_y
              NetworkID: 08754567f1f40222263eab4102e1c733ae697e8e354aa9cd6e18d7402835292a
              MacAddress: 02:42:ac:11:00:04
              IPAMConfig:
                LinkLocalIPs:
                - 169.254.34.68
                - fe80::3468
                IPv6Address: 2001:db8:abcd::3033
                IPv4Address: 172.20.30.33
              DriverOpts:
                com.example.some-label: some-value
                com.example.some-other-label: some-other-value
              Gateway: 172.17.0.1
              EndpointID: b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b
              Links:
              - container_1
              - container_2
              IPv6Gateway: 2001:db8:2::100
              IPAddress: 172.17.0.4
          SandboxKey: /var/run/docker/netns/8ab54b426c38
          GlobalIPv6Address: 2001:db8::5689
          Ports:
            "443/tcp":
            - HostIp: 127.0.0.1
              HostPort: "4443"
            "80/tcp":
            - HostIp: 0.0.0.0
              HostPort: "80"
            - HostIp: 0.0.0.0
              HostPort: "8080"
            "80/udp":
            - HostIp: 0.0.0.0
              HostPort: "80"
            "53/udp":
            - HostIp: 0.0.0.0
              HostPort: "53"
          GlobalIPv6PrefixLen: 64
          IPPrefixLen: 16
          MacAddress: 02:42:ac:11:00:04
          SandboxID: 9d12daf2c33f5959c8bf90aa513e4f65b561738661003029ec84830cd503a0c3
          LinkLocalIPv6Address: fe80::42:acff:fe11:1
          LinkLocalIPv6PrefixLen: 64
          Gateway: 172.17.0.1
          EndpointID: b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b
          SecondaryIPv6Addresses:
          - PrefixLen: 3
            Addr: Addr
          - PrefixLen: 3
            Addr: Addr
          IPv6Gateway: 2001:db8:2::100
          SecondaryIPAddresses:
          - PrefixLen: 3
            Addr: Addr
          - PrefixLen: 3
            Addr: Addr
          IPAddress: 172.17.0.4
          Bridge: docker0
        State:
          Status: running
          Restarting: false
          Dead: false
          Health:
            Status: healthy
            Log:
            - Start: 2020-01-04T10:44:24.496525531Z
              ExitCode: 0
              Output: Output
              End: 2020-01-04T10:45:21.364524523Z
            - Start: 2020-01-04T10:44:24.496525531Z
              ExitCode: 0
              Output: Output
              End: 2020-01-04T10:45:21.364524523Z
            FailingStreak: 0
          ExitCode: 0
          Running: true
          Error: Error
          FinishedAt: 2020-01-06T09:07:59.461876391Z
          OOMKilled: false
          Pid: 1234
          StartedAt: 2020-01-06T09:06:59.461876391Z
          Paused: false
        ResolvConfPath: ResolvConfPath
        ExecIDs:
        - ExecIDs
        - ExecIDs
        Id: Id
        LogPath: LogPath
      properties:
        Id:
          description: The ID of the container
          type: string
        Created:
          description: The time the container was created
          type: string
        Path:
          description: The path to the command being run
          type: string
        Args:
          description: The arguments to the command being run
          items:
            type: string
          type: array
        State:
          $ref: '#/components/schemas/ContainerState'
        Image:
          description: The container's image ID
          type: string
        ResolvConfPath:
          type: string
        HostnamePath:
          type: string
        HostsPath:
          type: string
        LogPath:
          type: string
        Name:
          type: string
        RestartCount:
          type: integer
        Driver:
          type: string
        Platform:
          type: string
        MountLabel:
          type: string
        ProcessLabel:
          type: string
        AppArmorProfile:
          type: string
        ExecIDs:
          description: IDs of exec instances that are running in the container.
          items:
            type: string
          nullable: true
          type: array
        HostConfig:
          $ref: '#/components/schemas/HostConfig'
        GraphDriver:
          $ref: '#/components/schemas/GraphDriverData'
        SizeRw:
          description: |
            The size of files that have been created or changed by this
            container.
          format: int64
          type: integer
        SizeRootFs:
          description: The total size of all the files in this container.
          format: int64
          type: integer
        Mounts:
          items:
            $ref: '#/components/schemas/MountPoint'
          type: array
        Config:
          $ref: '#/components/schemas/ContainerConfig'
        NetworkSettings:
          $ref: '#/components/schemas/NetworkSettings'
      title: ContainerInspectResponse
      type: object
    ContainerTopResponse:
      description: OK response to ContainerTop operation
      example:
        Processes:
        - - Processes
          - Processes
        - - Processes
          - Processes
        Titles:
        - Titles
        - Titles
      properties:
        Titles:
          description: The ps column titles
          items:
            type: string
          type: array
        Processes:
          description: |
            Each process running in the container, where each is process
            is an array of values corresponding to the titles.
          items:
            items:
              type: string
            type: array
          type: array
      title: ContainerTopResponse
      type: object
    ContainerChangeResponseItem:
      description: change item in response to ContainerChanges operation
      example:
        Path: Path
        Kind: 0
      properties:
        Path:
          description: Path to file that has changed
          nullable: false
          type: string
        Kind:
          description: Kind of change
          format: uint8
          nullable: false
          type: integer
      required:
      - Kind
      - Path
      title: ContainerChangeResponseItem
      type: object
      x-go-name: ContainerChangeResponseItem
    ContainerUpdateResponse:
      description: OK response to ContainerUpdate operation
      example:
        Warnings:
        - Warnings
        - Warnings
      properties:
        Warnings:
          items:
            type: string
          type: array
      title: ContainerUpdateResponse
      type: object
    ContainerPruneResponse:
      example:
        SpaceReclaimed: 0
        ContainersDeleted:
        - ContainersDeleted
        - ContainersDeleted
      properties:
        ContainersDeleted:
          description: Container IDs that were deleted
          items:
            type: string
          type: array
        SpaceReclaimed:
          description: Disk space reclaimed in bytes
          format: int64
          type: integer
      title: ContainerPruneResponse
      type: object
    BuildPruneResponse:
      example:
        CachesDeleted:
        - CachesDeleted
        - CachesDeleted
        SpaceReclaimed: 0
      properties:
        CachesDeleted:
          items:
            description: ID of build cache object
            type: string
          type: array
        SpaceReclaimed:
          description: Disk space reclaimed in bytes
          format: int64
          type: integer
      title: BuildPruneResponse
      type: object
    HistoryResponseItem:
      description: individual image layer information in response to ImageHistory
        operation
      example:
        Comment: Comment
        CreatedBy: CreatedBy
        Size: 6
        Id: Id
        Tags:
        - Tags
        - Tags
        Created: 0
      properties:
        Id:
          nullable: false
          type: string
        Created:
          format: int64
          nullable: false
          type: integer
        CreatedBy:
          nullable: false
          type: string
        Tags:
          items:
            type: string
          type: array
        Size:
          format: int64
          nullable: false
          type: integer
        Comment:
          nullable: false
          type: string
      required:
      - Comment
      - Created
      - CreatedBy
      - Id
      - Size
      - Tags
      title: HistoryResponseItem
      type: object
      x-go-name: HistoryResponseItem
    ImageSearchResponseItem:
      example:
        is_official: true
        is_automated: true
        name: name
        description: description
        star_count: 0
      properties:
        description:
          type: string
        is_official:
          type: boolean
        is_automated:
          type: boolean
        name:
          type: string
        star_count:
          type: integer
      title: ImageSearchResponseItem
      type: object
    ImagePruneResponse:
      example:
        SpaceReclaimed: 0
        ImagesDeleted:
        - Deleted: Deleted
          Untagged: Untagged
        - Deleted: Deleted
          Untagged: Untagged
      properties:
        ImagesDeleted:
          description: Images that were deleted
          items:
            $ref: '#/components/schemas/ImageDeleteResponseItem'
          type: array
        SpaceReclaimed:
          description: Disk space reclaimed in bytes
          format: int64
          type: integer
      title: ImagePruneResponse
      type: object
    SystemAuthResponse:
      example:
        Status: Status
        IdentityToken: IdentityToken
      properties:
        Status:
          description: The status of the authentication
          nullable: false
          type: string
        IdentityToken:
          description: An opaque token used to authenticate a user after a successful
            login
          nullable: false
          type: string
      required:
      - Status
      title: SystemAuthResponse
      type: object
    SystemDataUsageResponse:
      example:
        LayersSize: 1092588
        Images:
        - Id: sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749
          ParentId: ""
          RepoTags:
          - busybox:latest
          RepoDigests:
          - busybox@sha256:a59906e33509d14c036c8678d687bd4eec81ed7c4b8ce907b888c607f6a1e0e6
          Created: 1466724217
          Size: 1092588
          SharedSize: 0
          VirtualSize: 1092588
          Labels: {}
          Containers: 1
        Containers:
        - Id: e575172ed11dc01bfce087fb27bee502db149e1a0fad7c296ad300bbff178148
          Names:
          - /top
          Image: busybox
          ImageID: sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749
          Command: top
          Created: 1472592424
          Ports: []
          SizeRootFs: 1092588
          Labels: {}
          State: exited
          Status: Exited (0) 56 minutes ago
          HostConfig:
            NetworkMode: default
          NetworkSettings:
            Networks:
              bridge:
                NetworkID: d687bc59335f0e5c9ee8193e5612e8aee000c8c62ea170cfb99c098f95899d92
                EndpointID: 8ed5115aeaad9abb174f68dcf135b49f11daf597678315231a32ca28441dec6a
                Gateway: 172.18.0.1
                IPAddress: 172.18.0.2
                IPPrefixLen: 16
                IPv6Gateway: ""
                GlobalIPv6Address: ""
                GlobalIPv6PrefixLen: 0
                MacAddress: 02:42:ac:12:00:02
          Mounts: []
        Volumes:
        - Name: my-volume
          Driver: local
          Mountpoint: /var/lib/docker/volumes/my-volume/_data
          Scope: local
          UsageData:
            Size: 10920104
            RefCount: 2
      properties:
        LayersSize:
          format: int64
          type: integer
        Images:
          items:
            $ref: '#/components/schemas/ImageSummary'
          type: array
        Containers:
          items:
            $ref: '#/components/schemas/ContainerSummary'
          type: array
        Volumes:
          items:
            $ref: '#/components/schemas/Volume'
          type: array
        BuildCache:
          items:
            $ref: '#/components/schemas/BuildCache'
          type: array
      title: SystemDataUsageResponse
      type: object
    ExecConfig:
      example:
        AttachStdin: false
        AttachStdout: true
        AttachStderr: true
        DetachKeys: ctrl-p,ctrl-q
        Tty: false
        Cmd:
        - date
        Env:
        - FOO=bar
        - BAZ=quux
      properties:
        AttachStdin:
          description: Attach to `stdin` of the exec command.
          type: boolean
        AttachStdout:
          description: Attach to `stdout` of the exec command.
          type: boolean
        AttachStderr:
          description: Attach to `stderr` of the exec command.
          type: boolean
        DetachKeys:
          description: |
            Override the key sequence for detaching a container. Format is
            a single character `[a-Z]` or `ctrl-<value>` where `<value>`
            is one of: `a-z`, `@`, `^`, `[`, `,` or `_`.
          type: string
        Tty:
          description: Allocate a pseudo-TTY.
          type: boolean
        Env:
          description: |
            A list of environment variables in the form `["VAR=value", ...]`.
          items:
            type: string
          type: array
        Cmd:
          description: Command to run, as a string or array of strings.
          items:
            type: string
          type: array
        Privileged:
          default: false
          description: Runs the exec process with extended privileges.
          type: boolean
        User:
          description: |
            The user, and optionally, group to run the exec process inside
            the container. Format is one of: `user`, `user:group`, `uid`,
            or `uid:gid`.
          type: string
        WorkingDir:
          description: |
            The working directory for the exec process inside the container.
          type: string
      title: ExecConfig
      type: object
    ExecStartConfig:
      example:
        Detach: false
        Tty: false
      properties:
        Detach:
          description: Detach from the command.
          type: boolean
        Tty:
          description: Allocate a pseudo-TTY.
          type: boolean
      title: ExecStartConfig
      type: object
    ExecInspectResponse:
      example:
        DetachKeys: DetachKeys
        ProcessConfig:
          privileged: true
          entrypoint: entrypoint
          tty: true
          arguments:
          - arguments
          - arguments
          user: user
        ContainerID: ContainerID
        ExitCode: 0
        OpenStdout: true
        Running: true
        OpenStdin: true
        Pid: 6
        ID: ID
        CanRemove: true
        OpenStderr: true
      properties:
        CanRemove:
          type: boolean
        DetachKeys:
          type: string
        ID:
          type: string
        Running:
          type: boolean
        ExitCode:
          type: integer
        ProcessConfig:
          $ref: '#/components/schemas/ProcessConfig'
        OpenStdin:
          type: boolean
        OpenStderr:
          type: boolean
        OpenStdout:
          type: boolean
        ContainerID:
          type: string
        Pid:
          description: The system process ID for the exec process.
          type: integer
      title: ExecInspectResponse
      type: object
    VolumeListResponse:
      description: Volume list response
      example:
        Volumes:
        - Status:
            hello: world
          Options:
            device: tmpfs
            o: size=100m,uid=1000
            type: tmpfs
          Scope: local
          UsageData:
            RefCount: 6
            Size: 0
          CreatedAt: 2016-06-07T20:31:11.853781916Z
          Driver: custom
          Labels:
            com.example.some-label: some-value
            com.example.some-other-label: some-other-value
          Mountpoint: /var/lib/docker/volumes/tardis
          Name: tardis
        - Status:
            hello: world
          Options:
            device: tmpfs
            o: size=100m,uid=1000
            type: tmpfs
          Scope: local
          UsageData:
            RefCount: 6
            Size: 0
          CreatedAt: 2016-06-07T20:31:11.853781916Z
          Driver: custom
          Labels:
            com.example.some-label: some-value
            com.example.some-other-label: some-other-value
          Mountpoint: /var/lib/docker/volumes/tardis
          Name: tardis
        Warnings:
        - Warnings
        - Warnings
      properties:
        Volumes:
          description: List of volumes
          items:
            $ref: '#/components/schemas/Volume'
          nullable: false
          type: array
        Warnings:
          description: |
            Warnings that occurred when fetching the list of volumes.
          items:
            type: string
          nullable: false
          type: array
      required:
      - Volumes
      - Warnings
      title: VolumeListResponse
      type: object
    VolumePruneResponse:
      example:
        SpaceReclaimed: 0
        VolumesDeleted:
        - VolumesDeleted
        - VolumesDeleted
      properties:
        VolumesDeleted:
          description: Volumes that were deleted
          items:
            type: string
          type: array
        SpaceReclaimed:
          description: Disk space reclaimed in bytes
          format: int64
          type: integer
      title: VolumePruneResponse
      type: object
    NetworkCreateRequest:
      example:
        Name: isolated_nw
        CheckDuplicate: false
        Driver: bridge
        EnableIPv6: true
        IPAM:
          Driver: default
          Config:
          - Subnet: 172.20.0.0/16
            IPRange: 172.20.10.0/24
            Gateway: 172.20.10.11
          - Subnet: 2001:db8:abcd::/64
            Gateway: 2001:db8:abcd::1011
          Options:
            foo: bar
        Internal: true
        Attachable: false
        Ingress: false
        Options:
          com.docker.network.bridge.default_bridge: "true"
          com.docker.network.bridge.enable_icc: "true"
          com.docker.network.bridge.enable_ip_masquerade: "true"
          com.docker.network.bridge.host_binding_ipv4: 0.0.0.0
          com.docker.network.bridge.name: docker0
          com.docker.network.driver.mtu: "1500"
        Labels:
          com.example.some-label: some-value
          com.example.some-other-label: some-other-value
      properties:
        Name:
          description: The network's name.
          type: string
        CheckDuplicate:
          description: |
            Check for networks with duplicate names. Since Network is
            primarily keyed based on a random ID and not on the name, and
            network name is strictly a user-friendly alias to the network
            which is uniquely identified using ID, there is no guaranteed
            way to check for duplicates. CheckDuplicate is there to provide
            a best effort checking of any networks which has the same name
            but it is not guaranteed to catch all name collisions.
          type: boolean
        Driver:
          default: bridge
          description: Name of the network driver plugin to use.
          type: string
        Internal:
          description: Restrict external access to the network.
          type: boolean
        Attachable:
          description: |
            Globally scoped network is manually attachable by regular
            containers from workers in swarm mode.
          type: boolean
        Ingress:
          description: |
            Ingress network is the network which provides the routing-mesh
            in swarm mode.
          type: boolean
        IPAM:
          $ref: '#/components/schemas/IPAM'
        EnableIPv6:
          description: Enable IPv6 on the network.
          type: boolean
        Options:
          additionalProperties:
            type: string
          description: Network specific options to be used by the drivers.
          type: object
        Labels:
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          type: object
      required:
      - Name
      title: NetworkCreateRequest
      type: object
    NetworkCreateResponse:
      example:
        Id: 22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30
        Warning: ""
      properties:
        Id:
          description: The ID of the created network.
          type: string
        Warning:
          type: string
      title: NetworkCreateResponse
      type: object
    NetworkDisconnectRequest:
      example:
        Container: 3613f73ba0e4
        EndpointConfig:
          IPAMConfig:
            IPv4Address: 172.24.56.89
            IPv6Address: 2001:db8::5689
      properties:
        Container:
          description: The ID or name of the container to connect to the network.
          type: string
        EndpointConfig:
          $ref: '#/components/schemas/EndpointSettings'
      title: NetworkDisconnectRequest
      type: object
    NetworkConnectRequest:
      example:
        Container: Container
        Force: true
      properties:
        Container:
          description: |
            The ID or name of the container to disconnect from the network.
          type: string
        Force:
          description: |
            Force the container to disconnect from the network.
          type: boolean
      title: NetworkConnectRequest
      type: object
    NetworkPruneResponse:
      example:
        NetworksDeleted:
        - NetworksDeleted
        - NetworksDeleted
      properties:
        NetworksDeleted:
          description: Networks that were deleted
          items:
            type: string
          type: array
      title: NetworkPruneResponse
      type: object
    SwarmInitRequest:
      example:
        ListenAddr: 0.0.0.0:2377
        AdvertiseAddr: 192.168.1.1:2377
        DataPathPort: 4789
        DefaultAddrPool:
        - 10.10.0.0/8
        - 20.20.0.0/8
        SubnetSize: 24
        ForceNewCluster: false
        Spec:
          Orchestration: {}
          Raft: {}
          Dispatcher: {}
          CAConfig: {}
          EncryptionConfig:
            AutoLockManagers: false
      properties:
        ListenAddr:
          description: |
            Listen address used for inter-manager communication, as well
            as determining the networking interface used for the VXLAN
            Tunnel Endpoint (VTEP). This can either be an address/port
            combination in the form `192.168.1.1:4567`, or an interface
            followed by a port number, like `eth0:4567`. If the port number
            is omitted, the default swarm listening port is used.
          type: string
        AdvertiseAddr:
          description: |
            Externally reachable address advertised to other nodes. This
            can either be an address/port combination in the form
            `192.168.1.1:4567`, or an interface followed by a port number,
            like `eth0:4567`. If the port number is omitted, the port
            number from the listen address is used. If `AdvertiseAddr` is
            not specified, it will be automatically detected when possible.
          type: string
        DataPathAddr:
          description: |
            Address or interface to use for data path traffic (format:
            `<ip|interface>`), for example,  `192.168.1.1`, or an interface,
            like `eth0`. If `DataPathAddr` is unspecified, the same address
            as `AdvertiseAddr` is used.

            The `DataPathAddr` specifies the address that global scope
            network drivers will publish towards other  nodes in order to
            reach the containers running on this node. Using this parameter
            it is possible to separate the container data traffic from the
            management traffic of the cluster.
          type: string
        DataPathPort:
          description: |
            DataPathPort specifies the data path port number for data traffic.
            Acceptable port range is 1024 to 49151.
            if no port is set or is set to 0, default port 4789 will be used.
          format: uint32
          type: integer
        DefaultAddrPool:
          description: |
            Default Address Pool specifies default subnet pools for global
            scope networks.
          items:
            example: ""
            type: string
          type: array
        ForceNewCluster:
          description: Force creation of a new swarm.
          type: boolean
        SubnetSize:
          description: |
            SubnetSize specifies the subnet size of the networks created
            from the default subnet pool.
          format: uint32
          type: integer
        Spec:
          $ref: '#/components/schemas/SwarmSpec'
      title: SwarmInitRequest
      type: object
    SwarmJoinRequest:
      example:
        ListenAddr: 0.0.0.0:2377
        AdvertiseAddr: 192.168.1.1:2377
        RemoteAddrs:
        - node1:2377
        JoinToken: SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2
      properties:
        ListenAddr:
          description: |
            Listen address used for inter-manager communication if the node
            gets promoted to manager, as well as determining the networking
            interface used for the VXLAN Tunnel Endpoint (VTEP).
          type: string
        AdvertiseAddr:
          description: |
            Externally reachable address advertised to other nodes. This
            can either be an address/port combination in the form
            `192.168.1.1:4567`, or an interface followed by a port number,
            like `eth0:4567`. If the port number is omitted, the port
            number from the listen address is used. If `AdvertiseAddr` is
            not specified, it will be automatically detected when possible.
          type: string
        DataPathAddr:
          description: |
            Address or interface to use for data path traffic (format:
            `<ip|interface>`), for example,  `192.168.1.1`, or an interface,
            like `eth0`. If `DataPathAddr` is unspecified, the same addres
            as `AdvertiseAddr` is used.

            The `DataPathAddr` specifies the address that global scope
            network drivers will publish towards other nodes in order to
            reach the containers running on this node. Using this parameter
            it is possible to separate the container data traffic from the
            management traffic of the cluster.
          type: string
        RemoteAddrs:
          description: |
            Addresses of manager nodes already participating in the swarm.
          items:
            type: string
          type: array
        JoinToken:
          description: Secret token for joining this swarm.
          type: string
      title: SwarmJoinRequest
      type: object
    UnlockKeyResponse:
      example:
        UnlockKey: SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8
      properties:
        UnlockKey:
          description: The swarm's unlock key.
          type: string
      title: UnlockKeyResponse
      type: object
    SwarmUnlockRequest:
      example:
        UnlockKey: SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8
      properties:
        UnlockKey:
          description: The swarm's unlock key.
          type: string
      title: SwarmUnlockRequest
      type: object
    ServiceCreateResponse:
      example:
        ID: ak7w3gjqoa3kuz8xcpnyy0pvl
        Warning: 'unable to pin image doesnotexist:latest to digest: image library/doesnotexist:latest
          not found'
      properties:
        ID:
          description: The ID of the created service.
          type: string
        Warning:
          description: Optional warning message
          type: string
      title: ServiceCreateResponse
      type: object
    Mount_BindOptions:
      description: Optional configuration for the `bind` type.
      properties:
        Propagation:
          description: A propagation mode with the value `[r]private`, `[r]shared`,
            or `[r]slave`.
          enum:
          - private
          - rprivate
          - shared
          - rshared
          - slave
          - rslave
          type: string
        NonRecursive:
          default: false
          description: Disable recursive bind mount.
          type: boolean
      type: object
    Mount_VolumeOptions_DriverConfig:
      description: Map of driver specific options
      properties:
        Name:
          description: Name of the driver to use to create the volume.
          type: string
        Options:
          additionalProperties:
            type: string
          description: key/value map of driver specific options.
          type: object
      type: object
    Mount_VolumeOptions:
      description: Optional configuration for the `volume` type.
      properties:
        NoCopy:
          default: false
          description: Populate volume with data from the target.
          type: boolean
        Labels:
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
          type: object
        DriverConfig:
          $ref: '#/components/schemas/Mount_VolumeOptions_DriverConfig'
      type: object
    Mount_TmpfsOptions:
      description: Optional configuration for the `tmpfs` type.
      properties:
        SizeBytes:
          description: The size for the tmpfs mount in bytes.
          format: int64
          type: integer
        Mode:
          description: The permission mode for the tmpfs mount in an integer.
          type: integer
      type: object
    Resources_BlkioWeightDevice:
      properties:
        Path:
          type: string
        Weight:
          minimum: 0
          type: integer
      type: object
    Resources_Ulimits:
      properties:
        Name:
          description: Name of ulimit
          type: string
        Soft:
          description: Soft limit
          type: integer
        Hard:
          description: Hard limit
          type: integer
      type: object
    HostConfig_allOf_LogConfig:
      description: The logging configuration for this container
      properties:
        Type:
          enum:
          - json-file
          - syslog
          - journald
          - gelf
          - fluentd
          - awslogs
          - splunk
          - etwlogs
          - none
          type: string
        Config:
          additionalProperties:
            type: string
          type: object
      type: object
    HostConfig_allOf:
      properties:
        Binds:
          description: |
            A list of volume bindings for this container. Each volume binding
            is a string in one of these forms:

            - `host-src:container-dest[:options]` to bind-mount a host path
              into the container. Both `host-src`, and `container-dest` must
              be an _absolute_ path.
            - `volume-name:container-dest[:options]` to bind-mount a volume
              managed by a volume driver into the container. `container-dest`
              must be an _absolute_ path.

            `options` is an optional, comma-delimited list of:

            - `nocopy` disables automatic copying of data from the container
              path to the volume. The `nocopy` flag only applies to named volumes.
            - `[ro|rw]` mounts a volume read-only or read-write, respectively.
              If omitted or set to `rw`, volumes are mounted read-write.
            - `[z|Z]` applies SELinux labels to allow or deny multiple containers
              to read and write to the same volume.
                - `z`: a _shared_ content label is applied to the content. This
                  label indicates that multiple containers can share the volume
                  content, for both reading and writing.
                - `Z`: a _private unshared_ label is applied to the content.
                  This label indicates that only the current container can use
                  a private volume. Labeling systems such as SELinux require
                  proper labels to be placed on volume content that is mounted
                  into a container. Without a label, the security system can
                  prevent a container's processes from using the content. By
                  default, the labels set by the host operating system are not
                  modified.
            - `[[r]shared|[r]slave|[r]private]` specifies mount
              [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).
              This only applies to bind-mounted volumes, not internal volumes
              or named volumes. Mount propagation requires the source mount
              point (the location where the source directory is mounted in the
              host operating system) to have the correct propagation properties.
              For shared volumes, the source mount point must be set to `shared`.
              For slave volumes, the mount must be set to either `shared` or
              `slave`.
          items:
            type: string
          type: array
        ContainerIDFile:
          description: Path to a file where the container ID is written
          type: string
        LogConfig:
          $ref: '#/components/schemas/HostConfig_allOf_LogConfig'
        NetworkMode:
          description: |
            Network mode to use for this container. Supported standard values
            are: `bridge`, `host`, `none`, and `container:<name|id>`. Any
            other value is taken as a custom network's name to which this
            container should connect to.
          type: string
        PortBindings:
          additionalProperties:
            items:
              $ref: '#/components/schemas/PortBinding'
            nullable: true
            type: array
          description: |
            PortMap describes the mapping of container ports to host ports, using the
            container's port-number and protocol as key in the format `<port>/<protocol>`,
            for example, `80/udp`.

            If a container's port is mapped for multiple protocols, separate entries
            are added to the mapping table.
          example:
            "443/tcp":
            - HostIp: 127.0.0.1
              HostPort: "4443"
            "80/tcp":
            - HostIp: 0.0.0.0
              HostPort: "80"
            - HostIp: 0.0.0.0
              HostPort: "8080"
            "80/udp":
            - HostIp: 0.0.0.0
              HostPort: "80"
            "53/udp":
            - HostIp: 0.0.0.0
              HostPort: "53"
          type: object
        RestartPolicy:
          $ref: '#/components/schemas/RestartPolicy'
        AutoRemove:
          description: |
            Automatically remove the container when the container's process
            exits. This has no effect if `RestartPolicy` is set.
          type: boolean
        VolumeDriver:
          description: Driver that this container uses to mount volumes.
          type: string
        VolumesFrom:
          description: |
            A list of volumes to inherit from another container, specified in
            the form `<container name>[:<ro|rw>]`.
          items:
            type: string
          type: array
        Mounts:
          description: |
            Specification for mounts to be added to the container.
          items:
            $ref: '#/components/schemas/Mount'
          type: array
        CapAdd:
          description: |
            A list of kernel capabilities to add to the container. Conflicts
            with option 'Capabilities'.
          items:
            type: string
          type: array
        CapDrop:
          description: |
            A list of kernel capabilities to drop from the container. Conflicts
            with option 'Capabilities'.
          items:
            type: string
          type: array
        CgroupnsMode:
          description: |
            cgroup namespace mode for the container. Possible values are:

            - `"private"`: the container runs in its own private cgroup namespace
            - `"host"`: use the host system's cgroup namespace

            If not specified, the daemon default is used, which can either be `"private"`
            or `"host"`, depending on daemon version, kernel support and configuration.
          enum:
          - private
          - host
          type: string
        Dns:
          description: A list of DNS servers for the container to use.
          items:
            type: string
          type: array
        DnsOptions:
          description: A list of DNS options.
          items:
            type: string
          type: array
        DnsSearch:
          description: A list of DNS search domains.
          items:
            type: string
          type: array
        ExtraHosts:
          description: |
            A list of hostnames/IP mappings to add to the container's `/etc/hosts`
            file. Specified in the form `["hostname:IP"]`.
          items:
            type: string
          type: array
        GroupAdd:
          description: |
            A list of additional groups that the container process will run as.
          items:
            type: string
          type: array
        IpcMode:
          description: |
            IPC sharing mode for the container. Possible values are:

            - `"none"`: own private IPC namespace, with /dev/shm not mounted
            - `"private"`: own private IPC namespace
            - `"shareable"`: own private IPC namespace, with a possibility to share it with other containers
            - `"container:<name|id>"`: join another (shareable) container's IPC namespace
            - `"host"`: use the host system's IPC namespace

            If not specified, daemon default is used, which can either be `"private"`
            or `"shareable"`, depending on daemon version and configuration.
          type: string
        Cgroup:
          description: Cgroup to use for the container.
          type: string
        Links:
          description: |
            A list of links for the container in the form `container_name:alias`.
          items:
            type: string
          type: array
        OomScoreAdj:
          description: |
            An integer value containing the score given to the container in
            order to tune OOM killer preferences.
          example: 500
          type: integer
        PidMode:
          description: |
            Set the PID (Process) Namespace mode for the container. It can be
            either:

            - `"container:<name|id>"`: joins another container's PID namespace
            - `"host"`: use the host's PID namespace inside the container
          type: string
        Privileged:
          description: Gives the container full access to the host.
          type: boolean
        PublishAllPorts:
          description: |
            Allocates an ephemeral host port for all of a container's
            exposed ports.

            Ports are de-allocated when the container stops and allocated when
            the container starts. The allocated port might be changed when
            restarting the container.

            The port is selected from the ephemeral port range that depends on
            the kernel. For example, on Linux the range is defined by
            `/proc/sys/net/ipv4/ip_local_port_range`.
          type: boolean
        ReadonlyRootfs:
          description: Mount the container's root filesystem as read only.
          type: boolean
        SecurityOpt:
          description: |
            A list of string values to customize labels for MLS systems, such
            as SELinux.
          items:
            type: string
          type: array
        StorageOpt:
          additionalProperties:
            type: string
          description: |
            Storage driver options for this container, in the form `{"size": "120G"}`.
          type: object
        Tmpfs:
          additionalProperties:
            type: string
          description: |
            A map of container directories which should be replaced by tmpfs
            mounts, and their corresponding mount options. For example:

            ```
            { "/run": "rw,noexec,nosuid,size=65536k" }
            ```
          type: object
        UTSMode:
          description: UTS namespace to use for the container.
          type: string
        UsernsMode:
          description: |
            Sets the usernamespace mode for the container when usernamespace
            remapping option is enabled.
          type: string
        ShmSize:
          description: |
            Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.
          minimum: 0
          type: integer
        Sysctls:
          additionalProperties:
            type: string
          description: |
            A list of kernel parameters (sysctls) to set in the container.
            For example:

            ```
            {"net.ipv4.ip_forward": "1"}
            ```
          type: object
        Runtime:
          description: Runtime to use with this container.
          type: string
        ConsoleSize:
          description: |
            Initial console size, as an `[height, width]` array. (Windows only)
          items:
            minimum: 0
            type: integer
          maxItems: 2
          minItems: 2
          type: array
        Isolation:
          description: |
            Isolation technology of the container. (Windows only)
          enum:
          - default
          - process
          - hyperv
          type: string
        MaskedPaths:
          description: |
            The list of paths to be masked inside the container (this overrides
            the default set of paths).
          items:
            type: string
          type: array
        ReadonlyPaths:
          description: |
            The list of paths to be set as read-only inside the container
            (this overrides the default set of paths).
          items:
            type: string
          type: array
      type: object
    ImageInspect_RootFS:
      description: |
        Information about the image's RootFS, including the layer IDs.
      example:
        Type: layers
        Layers:
        - sha256:1834950e52ce4d5a88a1bbd131c537f4d0e56d10ff0dd69e66be3b7dfa9df7e6
        - sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef
      properties:
        Type:
          example: layers
          nullable: false
          type: string
        Layers:
          example:
          - sha256:1834950e52ce4d5a88a1bbd131c537f4d0e56d10ff0dd69e66be3b7dfa9df7e6
          - sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef
          items:
            type: string
          type: array
      required:
      - Type
      type: object
    ImageInspect_Metadata:
      description: |
        Additional metadata of the image in the local cache. This information
        is local to the daemon, and not part of the image itself.
      example:
        LastTagTime: 2022-02-28T14:40:02.623929178Z
      properties:
        LastTagTime:
          description: |
            Date and time at which the image was last tagged in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.

            This information is only available if the image was tagged locally,
            and omitted otherwise.
          example: 2022-02-28T14:40:02.623929178Z
          format: dateTime
          nullable: true
          type: string
      type: object
    Volume_UsageData:
      description: |
        Usage details about the volume. This information is used by the
        `GET /system/df` endpoint, and omitted in other endpoints.
      example:
        RefCount: 6
        Size: 0
      nullable: true
      properties:
        Size:
          description: |
            Amount of disk space used by the volume (in bytes). This information
            is only available for volumes created with the `"local"` volume
            driver. For volumes created with other volume drivers, this field
            is set to `-1` ("not available")
          nullable: false
          type: integer
        RefCount:
          description: |
            The number of containers referencing this volume. This field
            is set to `-1` if the reference-count is not available.
          nullable: false
          type: integer
      required:
      - RefCount
      - Size
      type: object
    Plugin_Settings:
      description: Settings that can be modified by users.
      example:
        Mounts:
        - Destination: /mnt/state
          Options:
          - rbind
          - rw
          Type: bind
          Description: This is a mount that's used by the plugin.
          Settable:
          - Settable
          - Settable
          Source: /var/lib/docker/plugins/
          Name: some-mount
        - Destination: /mnt/state
          Options:
          - rbind
          - rw
          Type: bind
          Description: This is a mount that's used by the plugin.
          Settable:
          - Settable
          - Settable
          Source: /var/lib/docker/plugins/
          Name: some-mount
        Args:
        - Args
        - Args
        Env:
        - DEBUG=0
        Devices:
        - Path: /dev/fuse
          Description: Description
          Settable:
          - Settable
          - Settable
          Name: Name
        - Path: /dev/fuse
          Description: Description
          Settable:
          - Settable
          - Settable
          Name: Name
      nullable: false
      properties:
        Mounts:
          items:
            $ref: '#/components/schemas/PluginMount'
          type: array
        Env:
          example:
          - DEBUG=0
          items:
            type: string
          type: array
        Args:
          items:
            type: string
          type: array
        Devices:
          items:
            $ref: '#/components/schemas/PluginDevice'
          type: array
      required:
      - Args
      - Devices
      - Env
      - Mounts
      type: object
    Plugin_Config_Interface:
      description: The interface between Docker and the plugin
      example:
        Types:
        - docker.volumedriver/1.0
        ProtocolScheme: some.protocol/v1.0
        Socket: plugins.sock
      nullable: false
      properties:
        Types:
          example:
          - docker.volumedriver/1.0
          items:
            $ref: '#/components/schemas/PluginInterfaceType'
          type: array
        Socket:
          example: plugins.sock
          nullable: false
          type: string
        ProtocolScheme:
          description: Protocol to use for clients connecting to the plugin.
          enum:
          - ""
          - moby.plugins.http/v1
          example: some.protocol/v1.0
          type: string
      required:
      - Socket
      - Types
      type: object
    Plugin_Config_User:
      example:
        UID: 1000
        GID: 1000
      nullable: false
      properties:
        UID:
          example: 1000
          format: uint32
          type: integer
        GID:
          example: 1000
          format: uint32
          type: integer
      type: object
    Plugin_Config_Network:
      example:
        Type: host
      nullable: false
      properties:
        Type:
          example: host
          nullable: false
          type: string
      required:
      - Type
      type: object
    Plugin_Config_Linux:
      example:
        Capabilities:
        - CAP_SYS_ADMIN
        - CAP_SYSLOG
        Devices:
        - Path: /dev/fuse
          Description: Description
          Settable:
          - Settable
          - Settable
          Name: Name
        - Path: /dev/fuse
          Description: Description
          Settable:
          - Settable
          - Settable
          Name: Name
        AllowAllDevices: false
      nullable: false
      properties:
        Capabilities:
          example:
          - CAP_SYS_ADMIN
          - CAP_SYSLOG
          items:
            type: string
          type: array
        AllowAllDevices:
          example: false
          nullable: false
          type: boolean
        Devices:
          items:
            $ref: '#/components/schemas/PluginDevice'
          type: array
      required:
      - AllowAllDevices
      - Capabilities
      - Devices
      type: object
    Plugin_Config_Args:
      example:
        Description: command line arguments
        Settable:
        - Settable
        - Settable
        Value:
        - Value
        - Value
        Name: args
      nullable: false
      properties:
        Name:
          example: args
          nullable: false
          type: string
        Description:
          example: command line arguments
          nullable: false
          type: string
        Settable:
          items:
            type: string
          type: array
        Value:
          items:
            type: string
          type: array
      required:
      - Description
      - Name
      - Settable
      - Value
      type: object
    Plugin_Config_rootfs:
      example:
        diff_ids:
        - sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887
        - sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8
        type: layers
      properties:
        type:
          example: layers
          type: string
        diff_ids:
          example:
          - sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887
          - sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8
          items:
            type: string
          type: array
      type: object
    Plugin_Config:
      description: The config of a plugin.
      example:
        Mounts:
        - Destination: /mnt/state
          Options:
          - rbind
          - rw
          Type: bind
          Description: This is a mount that's used by the plugin.
          Settable:
          - Settable
          - Settable
          Source: /var/lib/docker/plugins/
          Name: some-mount
        - Destination: /mnt/state
          Options:
          - rbind
          - rw
          Type: bind
          Description: This is a mount that's used by the plugin.
          Settable:
          - Settable
          - Settable
          Source: /var/lib/docker/plugins/
          Name: some-mount
        Args:
          Description: command line arguments
          Settable:
          - Settable
          - Settable
          Value:
          - Value
          - Value
          Name: args
        Description: A sample volume plugin for Docker
        User:
          UID: 1000
          GID: 1000
        Entrypoint:
        - /usr/bin/sample-volume-plugin
        - /data
        Documentation: /engine/extend/plugins/
        Env:
        - Name: DEBUG
          Description: If set, prints debug messages
          Value: "0"
        PropagatedMount: /mnt/volumes
        PidHost: false
        DockerVersion: 17.06.0-ce
        Linux:
          Capabilities:
          - CAP_SYS_ADMIN
          - CAP_SYSLOG
          Devices:
          - Path: /dev/fuse
            Description: Description
            Settable:
            - Settable
            - Settable
            Name: Name
          - Path: /dev/fuse
            Description: Description
            Settable:
            - Settable
            - Settable
            Name: Name
          AllowAllDevices: false
        Network:
          Type: host
        rootfs:
          diff_ids:
          - sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887
          - sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8
          type: layers
        WorkDir: /bin/
        Interface:
          Types:
          - docker.volumedriver/1.0
          ProtocolScheme: some.protocol/v1.0
          Socket: plugins.sock
        IpcHost: false
      nullable: false
      properties:
        DockerVersion:
          description: Docker Version used to create the plugin
          example: 17.06.0-ce
          nullable: false
          type: string
        Description:
          example: A sample volume plugin for Docker
          nullable: false
          type: string
        Documentation:
          example: /engine/extend/plugins/
          nullable: false
          type: string
        Interface:
          $ref: '#/components/schemas/Plugin_Config_Interface'
        Entrypoint:
          example:
          - /usr/bin/sample-volume-plugin
          - /data
          items:
            type: string
          type: array
        WorkDir:
          example: /bin/
          nullable: false
          type: string
        User:
          $ref: '#/components/schemas/Plugin_Config_User'
        Network:
          $ref: '#/components/schemas/Plugin_Config_Network'
        Linux:
          $ref: '#/components/schemas/Plugin_Config_Linux'
        PropagatedMount:
          example: /mnt/volumes
          nullable: false
          type: string
        IpcHost:
          example: false
          nullable: false
          type: boolean
        PidHost:
          example: false
          nullable: false
          type: boolean
        Mounts:
          items:
            $ref: '#/components/schemas/PluginMount'
          type: array
        Env:
          example:
          - Name: DEBUG
            Description: If set, prints debug messages
            Value: "0"
          items:
            $ref: '#/components/schemas/PluginEnv'
          type: array
        Args:
          $ref: '#/components/schemas/Plugin_Config_Args'
        rootfs:
          $ref: '#/components/schemas/Plugin_Config_rootfs'
      required:
      - Args
      - Description
      - Documentation
      - Entrypoint
      - Env
      - Interface
      - IpcHost
      - Linux
      - Mounts
      - Network
      - PidHost
      - PropagatedMount
      - WorkDir
      type: object
    EngineDescription_Plugins:
      properties:
        Type:
          type: string
        Name:
          type: string
      type: object
    SwarmSpec_Orchestration:
      description: Orchestration configuration.
      example:
        TaskHistoryRetentionLimit: 10
      nullable: true
      properties:
        TaskHistoryRetentionLimit:
          description: |
            The number of historic tasks to keep per instance or node. If
            negative, never remove completed or failed tasks.
          example: 10
          format: int64
          type: integer
      type: object
    SwarmSpec_Raft:
      description: Raft configuration.
      example:
        SnapshotInterval: 10000
        LogEntriesForSlowFollowers: 500
        KeepOldSnapshots: 0
        ElectionTick: 3
        HeartbeatTick: 1
      properties:
        SnapshotInterval:
          description: The number of log entries between snapshots.
          example: 10000
          format: uint64
          type: integer
        KeepOldSnapshots:
          description: |
            The number of snapshots to keep beyond the current snapshot.
          format: uint64
          type: integer
        LogEntriesForSlowFollowers:
          description: |
            The number of log entries to keep around to sync up slow followers
            after a snapshot is created.
          example: 500
          format: uint64
          type: integer
        ElectionTick:
          description: |
            The number of ticks that a follower will wait for a message from
            the leader before becoming a candidate and starting an election.
            `ElectionTick` must be greater than `HeartbeatTick`.

            A tick currently defaults to one second, so these translate
            directly to seconds currently, but this is NOT guaranteed.
          example: 3
          type: integer
        HeartbeatTick:
          description: |
            The number of ticks between heartbeats. Every HeartbeatTick ticks,
            the leader will send a heartbeat to the followers.

            A tick currently defaults to one second, so these translate
            directly to seconds currently, but this is NOT guaranteed.
          example: 1
          type: integer
      type: object
    SwarmSpec_Dispatcher:
      description: Dispatcher configuration.
      example:
        HeartbeatPeriod: 5000000000
      nullable: true
      properties:
        HeartbeatPeriod:
          description: |
            The delay for an agent to send a heartbeat to the dispatcher.
          example: 5000000000
          format: int64
          type: integer
      type: object
    SwarmSpec_CAConfig_ExternalCAs:
      example:
        Options:
          key: Options
        CACert: CACert
        Protocol: cfssl
        URL: URL
      properties:
        Protocol:
          default: cfssl
          description: |
            Protocol for communication with the external CA (currently
            only `cfssl` is supported).
          enum:
          - cfssl
          type: string
        URL:
          description: |
            URL where certificate signing requests should be sent.
          type: string
        Options:
          additionalProperties:
            type: string
          description: |
            An object with key/value pairs that are interpreted as
            protocol-specific options for the external CA driver.
          type: object
        CACert:
          description: |
            The root CA certificate (in PEM format) this external CA uses
            to issue TLS certificates (assumed to be to the current swarm
            root CA certificate if not provided).
          type: string
      type: object
    SwarmSpec_CAConfig:
      description: CA configuration.
      example:
        SigningCACert: SigningCACert
        ExternalCAs:
        - Options:
            key: Options
          CACert: CACert
          Protocol: cfssl
          URL: URL
        - Options:
            key: Options
          CACert: CACert
          Protocol: cfssl
          URL: URL
        ForceRotate: 6
        NodeCertExpiry: 7776000000000000
        SigningCAKey: SigningCAKey
      nullable: true
      properties:
        NodeCertExpiry:
          description: The duration node certificates are issued for.
          example: 7776000000000000
          format: int64
          type: integer
        ExternalCAs:
          description: |
            Configuration for forwarding signing requests to an external
            certificate authority.
          items:
            $ref: '#/components/schemas/SwarmSpec_CAConfig_ExternalCAs'
          type: array
        SigningCACert:
          description: |
            The desired signing CA certificate for all swarm node TLS leaf
            certificates, in PEM format.
          type: string
        SigningCAKey:
          description: |
            The desired signing CA key for all swarm node TLS leaf certificates,
            in PEM format.
          type: string
        ForceRotate:
          description: |
            An integer whose purpose is to force swarm to generate a new
            signing CA certificate and key, if none have been specified in
            `SigningCACert` and `SigningCAKey`
          format: uint64
          type: integer
      type: object
    SwarmSpec_EncryptionConfig:
      description: Parameters related to encryption-at-rest.
      example:
        AutoLockManagers: false
      properties:
        AutoLockManagers:
          description: |
            If set, generate a key and use it to lock data stored on the
            managers.
          example: false
          type: boolean
      type: object
    SwarmSpec_TaskDefaults_LogDriver:
      description: |
        The log driver to use for tasks created in the orchestrator if
        unspecified by a service.

        Updating this value only affects new tasks. Existing tasks continue
        to use their previously configured log driver until recreated.
      example:
        Options:
          max-file: "10"
          max-size: 100m
        Name: json-file
      properties:
        Name:
          description: |
            The log driver to use as a default for new tasks.
          example: json-file
          type: string
        Options:
          additionalProperties:
            type: string
          description: |
            Driver-specific options for the selectd log driver, specified
            as key/value pairs.
          example:
            max-file: "10"
            max-size: 100m
          type: object
      type: object
    SwarmSpec_TaskDefaults:
      description: Defaults for creating tasks in this cluster.
      example:
        LogDriver:
          Options:
            max-file: "10"
            max-size: 100m
          Name: json-file
      properties:
        LogDriver:
          $ref: '#/components/schemas/SwarmSpec_TaskDefaults_LogDriver'
      type: object
    Swarm_allOf:
      properties:
        JoinTokens:
          $ref: '#/components/schemas/JoinTokens'
      type: object
    TaskSpec_PluginSpec:
      description: |
        Plugin spec for the service.  *(Experimental release only.)*

        <p><br /></p>

        > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
        > mutually exclusive. PluginSpec is only used when the Runtime field
        > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
        > field is set to `attachment`.
      properties:
        Name:
          description: The name or 'alias' to use for the plugin.
          type: string
        Remote:
          description: The plugin image reference to use.
          type: string
        Disabled:
          description: Disable the plugin once scheduled.
          type: boolean
        PluginPrivilege:
          items:
            $ref: '#/components/schemas/PluginPrivilege'
          type: array
      type: object
    TaskSpec_ContainerSpec_Privileges_CredentialSpec:
      description: CredentialSpec for managed service account (Windows only)
      properties:
        Config:
          description: |
            Load credential spec from a Swarm Config with the given ID.
            The specified config must also be present in the Configs
            field with the Runtime property set.

            <p><br /></p>


            > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,
            > and `CredentialSpec.Config` are mutually exclusive.
          example: 0bt9dmxjvjiqermk6xrop3ekq
          type: string
        File:
          description: |
            Load credential spec from this file. The file is read by
            the daemon, and must be present in the `CredentialSpecs`
            subdirectory in the docker data directory, which defaults
            to `C:\ProgramData\Docker\` on Windows.

            For example, specifying `spec.json` loads
            `C:\ProgramData\Docker\CredentialSpecs\spec.json`.

            <p><br /></p>

            > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,
            > and `CredentialSpec.Config` are mutually exclusive.
          example: spec.json
          type: string
        Registry:
          description: |
            Load credential spec from this value in the Windows
            registry. The specified registry value must be located in:

            `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Virtualization\Containers\CredentialSpecs`

            <p><br /></p>


            > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,
            > and `CredentialSpec.Config` are mutually exclusive.
          type: string
      type: object
    TaskSpec_ContainerSpec_Privileges_SELinuxContext:
      description: SELinux labels of the container
      properties:
        Disable:
          description: Disable SELinux
          type: boolean
        User:
          description: SELinux user label
          type: string
        Role:
          description: SELinux role label
          type: string
        Type:
          description: SELinux type label
          type: string
        Level:
          description: SELinux level label
          type: string
      type: object
    TaskSpec_ContainerSpec_Privileges:
      description: Security options for the container
      properties:
        CredentialSpec:
          $ref: '#/components/schemas/TaskSpec_ContainerSpec_Privileges_CredentialSpec'
        SELinuxContext:
          $ref: '#/components/schemas/TaskSpec_ContainerSpec_Privileges_SELinuxContext'
      type: object
    TaskSpec_ContainerSpec_DNSConfig:
      description: |
        Specification for DNS related configurations in resolver configuration
        file (`resolv.conf`).
      properties:
        Nameservers:
          description: The IP addresses of the name servers.
          items:
            type: string
          type: array
        Search:
          description: A search list for host-name lookup.
          items:
            type: string
          type: array
        Options:
          description: |
            A list of internal resolver variables to be modified (e.g.,
            `debug`, `ndots:3`, etc.).
          items:
            type: string
          type: array
      type: object
    TaskSpec_ContainerSpec_File:
      description: |
        File represents a specific target that is backed by a file.
      properties:
        Name:
          description: |
            Name represents the final filename in the filesystem.
          type: string
        UID:
          description: UID represents the file UID.
          type: string
        GID:
          description: GID represents the file GID.
          type: string
        Mode:
          description: Mode represents the FileMode of the file.
          format: uint32
          type: integer
      type: object
    TaskSpec_ContainerSpec_Secrets:
      properties:
        File:
          $ref: '#/components/schemas/TaskSpec_ContainerSpec_File'
        SecretID:
          description: |
            SecretID represents the ID of the specific secret that we're
            referencing.
          type: string
        SecretName:
          description: |
            SecretName is the name of the secret that this references,
            but this is just provided for lookup/display purposes. The
            secret in the reference will be identified by its ID.
          type: string
      type: object
    TaskSpec_ContainerSpec_File_1:
      description: |
        File represents a specific target that is backed by a file.

        <p><br /><p>

        > **Note**: `Configs.File` and `Configs.Runtime` are mutually exclusive
      properties:
        Name:
          description: |
            Name represents the final filename in the filesystem.
          type: string
        UID:
          description: UID represents the file UID.
          type: string
        GID:
          description: GID represents the file GID.
          type: string
        Mode:
          description: Mode represents the FileMode of the file.
          format: uint32
          type: integer
      type: object
    TaskSpec_ContainerSpec_Configs:
      properties:
        File:
          $ref: '#/components/schemas/TaskSpec_ContainerSpec_File_1'
        Runtime:
          description: |
            Runtime represents a target that is not mounted into the
            container but is used by the task

            <p><br /><p>

            > **Note**: `Configs.File` and `Configs.Runtime` are mutually
            > exclusive
          properties: {}
          type: object
        ConfigID:
          description: |
            ConfigID represents the ID of the specific config that we're
            referencing.
          type: string
        ConfigName:
          description: |
            ConfigName is the name of the config that this references,
            but this is just provided for lookup/display purposes. The
            config in the reference will be identified by its ID.
          type: string
      type: object
    TaskSpec_ContainerSpec:
      description: |
        Container spec for the service.

        <p><br /></p>

        > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
        > mutually exclusive. PluginSpec is only used when the Runtime field
        > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
        > field is set to `attachment`.
      properties:
        Image:
          description: The image name to use for the container
          type: string
        Labels:
          additionalProperties:
            type: string
          description: User-defined key/value data.
          type: object
        Command:
          description: The command to be run in the image.
          items:
            type: string
          type: array
        Args:
          description: Arguments to the command.
          items:
            type: string
          type: array
        Hostname:
          description: |
            The hostname to use for the container, as a valid
            [RFC 1123](https://tools.ietf.org/html/rfc1123) hostname.
          type: string
        Env:
          description: |
            A list of environment variables in the form `VAR=value`.
          items:
            type: string
          type: array
        Dir:
          description: The working directory for commands to run in.
          type: string
        User:
          description: The user inside the container.
          type: string
        Groups:
          description: |
            A list of additional groups that the container process will run as.
          items:
            type: string
          type: array
        Privileges:
          $ref: '#/components/schemas/TaskSpec_ContainerSpec_Privileges'
        TTY:
          description: Whether a pseudo-TTY should be allocated.
          type: boolean
        OpenStdin:
          description: Open `stdin`
          type: boolean
        ReadOnly:
          description: Mount the container's root filesystem as read only.
          type: boolean
        Mounts:
          description: |
            Specification for mounts to be added to containers created as part
            of the service.
          items:
            $ref: '#/components/schemas/Mount'
          type: array
        StopSignal:
          description: Signal to stop the container.
          type: string
        StopGracePeriod:
          description: |
            Amount of time to wait for the container to terminate before
            forcefully killing it.
          format: int64
          type: integer
        HealthCheck:
          $ref: '#/components/schemas/HealthConfig'
        Hosts:
          description: |
            A list of hostname/IP mappings to add to the container's `hosts`
            file. The format of extra hosts is specified in the
            [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html)
            man page:

                IP_address canonical_hostname [aliases...]
          items:
            type: string
          type: array
        DNSConfig:
          $ref: '#/components/schemas/TaskSpec_ContainerSpec_DNSConfig'
        Secrets:
          description: |
            Secrets contains references to zero or more secrets that will be
            exposed to the service.
          items:
            $ref: '#/components/schemas/TaskSpec_ContainerSpec_Secrets'
          type: array
        Configs:
          description: |
            Configs contains references to zero or more configs that will be
            exposed to the service.
          items:
            $ref: '#/components/schemas/TaskSpec_ContainerSpec_Configs'
          type: array
        Isolation:
          description: |
            Isolation technology of the containers running the service.
            (Windows only)
          enum:
          - default
          - process
          - hyperv
          type: string
        Init:
          description: |
            Run an init inside the container that forwards signals and reaps
            processes. This field is omitted if empty, and the default (as
            configured on the daemon) is used.
          nullable: true
          type: boolean
        Sysctls:
          additionalProperties:
            type: string
          description: |
            Set kernel namedspaced parameters (sysctls) in the container.
            The Sysctls option on services accepts the same sysctls as the
            are supported on containers. Note that while the same sysctls are
            supported, no guarantees or checks are made about their
            suitability for a clustered environment, and it's up to the user
            to determine whether a given sysctl will work properly in a
            Service.
          type: object
        CapabilityAdd:
          description: |
            A list of kernel capabilities to add to the default set
            for the container.
          example:
          - CAP_NET_RAW
          - CAP_SYS_ADMIN
          - CAP_SYS_CHROOT
          - CAP_SYSLOG
          items:
            type: string
          type: array
        CapabilityDrop:
          description: |
            A list of kernel capabilities to drop from the default set
            for the container.
          example:
          - CAP_NET_RAW
          items:
            type: string
          type: array
        Ulimits:
          description: |
            A list of resource limits to set in the container. For example: `{"Name": "nofile", "Soft": 1024, "Hard": 2048}`"
          items:
            $ref: '#/components/schemas/Resources_Ulimits'
          type: array
      type: object
    TaskSpec_NetworkAttachmentSpec:
      description: |
        Read-only spec type for non-swarm containers attached to swarm overlay
        networks.

        <p><br /></p>

        > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
        > mutually exclusive. PluginSpec is only used when the Runtime field
        > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
        > field is set to `attachment`.
      properties:
        ContainerID:
          description: ID of the container represented by this task
          type: string
      type: object
    TaskSpec_Resources:
      description: |
        Resource requirements which apply to each individual container created
        as part of the service.
      properties:
        Limits:
          $ref: '#/components/schemas/Limit'
        Reservation:
          $ref: '#/components/schemas/ResourceObject'
      type: object
    TaskSpec_RestartPolicy:
      description: |
        Specification for the restart policy which applies to containers
        created as part of this service.
      properties:
        Condition:
          description: Condition for restart.
          enum:
          - none
          - on-failure
          - any
          type: string
        Delay:
          description: Delay between restart attempts.
          format: int64
          type: integer
        MaxAttempts:
          default: 0
          description: |
            Maximum attempts to restart a given container before giving up
            (default value is 0, which is ignored).
          format: int64
          type: integer
        Window:
          default: 0
          description: |
            Windows is the time window used to evaluate the restart policy
            (default value is 0, which is unbounded).
          format: int64
          type: integer
      type: object
    TaskSpec_Placement_Spread:
      properties:
        SpreadDescriptor:
          description: |
            label descriptor, such as `engine.labels.az`.
          type: string
      type: object
    TaskSpec_Placement_Preferences:
      properties:
        Spread:
          $ref: '#/components/schemas/TaskSpec_Placement_Spread'
      type: object
    TaskSpec_Placement:
      properties:
        Constraints:
          description: |
            An array of constraint expressions to limit the set of nodes where
            a task can be scheduled. Constraint expressions can either use a
            _match_ (`==`) or _exclude_ (`!=`) rule. Multiple constraints find
            nodes that satisfy every expression (AND match). Constraints can
            match node or Docker Engine labels as follows:

            node attribute       | matches                        | example
            ---------------------|--------------------------------|-----------------------------------------------
            `node.id`            | Node ID                        | `node.id==2ivku8v2gvtg4`
            `node.hostname`      | Node hostname                  | `node.hostname!=node-2`
            `node.role`          | Node role (`manager`/`worker`) | `node.role==manager`
            `node.platform.os`   | Node operating system          | `node.platform.os==windows`
            `node.platform.arch` | Node architecture              | `node.platform.arch==x86_64`
            `node.labels`        | User-defined node labels       | `node.labels.security==high`
            `engine.labels`      | Docker Engine's labels         | `engine.labels.operatingsystem==ubuntu-14.04`

            `engine.labels` apply to Docker Engine labels like operating system,
            drivers, etc. Swarm administrators add `node.labels` for operational
            purposes by using the [`node update endpoint`](#operation/NodeUpdate).
          example:
          - node.hostname!=node3.corp.example.com
          - node.role!=manager
          - node.labels.type==production
          - node.platform.os==linux
          - node.platform.arch==x86_64
          items:
            type: string
          type: array
        Preferences:
          description: |
            Preferences provide a way to make the scheduler aware of factors
            such as topology. They are provided in order from highest to
            lowest precedence.
          example:
          - Spread:
              SpreadDescriptor: node.labels.datacenter
          - Spread:
              SpreadDescriptor: node.labels.rack
          items:
            $ref: '#/components/schemas/TaskSpec_Placement_Preferences'
          type: array
        MaxReplicas:
          default: 0
          description: |
            Maximum number of replicas for per node (default value is 0, which
            is unlimited)
          format: int64
          type: integer
        Platforms:
          description: |
            Platforms stores all the platforms that the service's image can
            run on. This field is used in the platform filter for scheduling.
            If empty, then the platform filter is off, meaning there are no
            scheduling restrictions.
          items:
            $ref: '#/components/schemas/Platform'
          type: array
      type: object
    TaskSpec_LogDriver:
      description: |
        Specifies the log driver to use for tasks created from this spec. If
        not present, the default one for the swarm will be used, finally
        falling back to the engine default if not specified.
      properties:
        Name:
          type: string
        Options:
          additionalProperties:
            type: string
          type: object
      type: object
    Task_Status_ContainerStatus:
      properties:
        ContainerID:
          type: string
        PID:
          type: integer
        ExitCode:
          type: integer
      type: object
    Task_Status:
      properties:
        Timestamp:
          format: dateTime
          type: string
        State:
          $ref: '#/components/schemas/TaskState'
        Message:
          type: string
        Err:
          type: string
        ContainerStatus:
          $ref: '#/components/schemas/Task_Status_ContainerStatus'
      type: object
    ServiceSpec_Mode_Replicated:
      properties:
        Replicas:
          format: int64
          type: integer
      type: object
    ServiceSpec_Mode_ReplicatedJob:
      description: |
        The mode used for services with a finite number of tasks that run
        to a completed state.
      properties:
        MaxConcurrent:
          default: 1
          description: |
            The maximum number of replicas to run simultaneously.
          format: int64
          type: integer
        TotalCompletions:
          description: |
            The total number of replicas desired to reach the Completed
            state. If unset, will default to the value of `MaxConcurrent`
          format: int64
          type: integer
      type: object
    ServiceSpec_Mode:
      description: Scheduling mode for the service.
      properties:
        Replicated:
          $ref: '#/components/schemas/ServiceSpec_Mode_Replicated'
        Global:
          properties: {}
          type: object
        ReplicatedJob:
          $ref: '#/components/schemas/ServiceSpec_Mode_ReplicatedJob'
        GlobalJob:
          description: |
            The mode used for services which run a task to the completed state
            on each valid node.
          properties: {}
          type: object
      type: object
    ServiceSpec_UpdateConfig:
      description: Specification for the update strategy of the service.
      properties:
        Parallelism:
          description: |
            Maximum number of tasks to be updated in one iteration (0 means
            unlimited parallelism).
          format: int64
          type: integer
        Delay:
          description: Amount of time between updates, in nanoseconds.
          format: int64
          type: integer
        FailureAction:
          description: |
            Action to take if an updated task fails to run, or stops running
            during the update.
          enum:
          - continue
          - pause
          - rollback
          type: string
        Monitor:
          description: |
            Amount of time to monitor each updated task for failures, in
            nanoseconds.
          format: int64
          type: integer
        MaxFailureRatio:
          description: |
            The fraction of tasks that may fail during an update before the
            failure action is invoked, specified as a floating point number
            between 0 and 1.
          type: number
        Order:
          description: |
            The order of operations when rolling out an updated task. Either
            the old task is shut down before the new task is started, or the
            new task is started before the old task is shut down.
          enum:
          - stop-first
          - start-first
          type: string
      type: object
    ServiceSpec_RollbackConfig:
      description: Specification for the rollback strategy of the service.
      properties:
        Parallelism:
          description: |
            Maximum number of tasks to be rolled back in one iteration (0 means
            unlimited parallelism).
          format: int64
          type: integer
        Delay:
          description: |
            Amount of time between rollback iterations, in nanoseconds.
          format: int64
          type: integer
        FailureAction:
          description: |
            Action to take if an rolled back task fails to run, or stops
            running during the rollback.
          enum:
          - continue
          - pause
          type: string
        Monitor:
          description: |
            Amount of time to monitor each rolled back task for failures, in
            nanoseconds.
          format: int64
          type: integer
        MaxFailureRatio:
          description: |
            The fraction of tasks that may fail during a rollback before the
            failure action is invoked, specified as a floating point number
            between 0 and 1.
          type: number
        Order:
          description: |
            The order of operations when rolling back a task. Either the old
            task is shut down before the new task is started, or the new task
            is started before the old task is shut down.
          enum:
          - stop-first
          - start-first
          type: string
      type: object
    Service_Endpoint_VirtualIPs:
      properties:
        NetworkID:
          type: string
        Addr:
          type: string
      type: object
    Service_Endpoint:
      properties:
        Spec:
          $ref: '#/components/schemas/EndpointSpec'
        Ports:
          items:
            $ref: '#/components/schemas/EndpointPortConfig'
          type: array
        VirtualIPs:
          items:
            $ref: '#/components/schemas/Service_Endpoint_VirtualIPs'
          type: array
      type: object
    Service_UpdateStatus:
      description: The status of a service update.
      properties:
        State:
          enum:
          - updating
          - paused
          - completed
          type: string
        StartedAt:
          format: dateTime
          type: string
        CompletedAt:
          format: dateTime
          type: string
        Message:
          type: string
      type: object
    Service_ServiceStatus:
      description: |
        The status of the service's tasks. Provided only when requested as
        part of a ServiceList operation.
      properties:
        RunningTasks:
          description: |
            The number of tasks for the service currently in the Running state.
          example: 7
          format: uint64
          type: integer
        DesiredTasks:
          description: |
            The number of tasks for the service desired to be running.
            For replicated services, this is the replica count from the
            service spec. For global services, this is computed by taking
            count of all tasks for the service with a Desired State other
            than Shutdown.
          example: 10
          format: uint64
          type: integer
        CompletedTasks:
          description: |
            The number of tasks for a job that are in the Completed state.
            This field must be cross-referenced with the service type, as the
            value of 0 may mean the service is not in a job mode, or it may
            mean the job-mode service has no tasks yet Completed.
          format: uint64
          type: integer
      type: object
    Service_JobStatus:
      description: |
        The status of the service when it is in one of ReplicatedJob or
        GlobalJob modes. Absent on Replicated and Global mode services. The
        JobIteration is an ObjectVersion, but unlike the Service's version,
        does not need to be sent with an update request.
      properties:
        JobIteration:
          $ref: '#/components/schemas/ObjectVersion'
        LastExecution:
          description: |
            The last time, as observed by the server, that this job was
            started.
          format: dateTime
          type: string
      type: object
    ContainerSummary_HostConfig:
      example:
        NetworkMode: NetworkMode
      properties:
        NetworkMode:
          type: string
      type: object
    ContainerSummary_NetworkSettings:
      description: A summary of the container's network settings
      example:
        Networks:
          key:
            GlobalIPv6Address: 2001:db8::5689
            IPPrefixLen: 16
            GlobalIPv6PrefixLen: 64
            Aliases:
            - server_x
            - server_y
            NetworkID: 08754567f1f40222263eab4102e1c733ae697e8e354aa9cd6e18d7402835292a
            MacAddress: 02:42:ac:11:00:04
            IPAMConfig:
              LinkLocalIPs:
              - 169.254.34.68
              - fe80::3468
              IPv6Address: 2001:db8:abcd::3033
              IPv4Address: 172.20.30.33
            DriverOpts:
              com.example.some-label: some-value
              com.example.some-other-label: some-other-value
            Gateway: 172.17.0.1
            EndpointID: b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b
            Links:
            - container_1
            - container_2
            IPv6Gateway: 2001:db8:2::100
            IPAddress: 172.17.0.4
      properties:
        Networks:
          additionalProperties:
            $ref: '#/components/schemas/EndpointSettings'
          type: object
      type: object
    SystemVersion_Platform:
      example:
        Name: Name
      properties:
        Name:
          type: string
      required:
      - Name
      type: object
    SystemVersion_Components:
      example:
        Details: '{}'
        Version: 19.03.12
        Name: Engine
      properties:
        Name:
          description: |
            Name of the component
          example: Engine
          type: string
        Version:
          description: |
            Version of the component
          example: 19.03.12
          nullable: false
          type: string
        Details:
          description: |
            Key/value pairs of strings with additional information about the
            component. These values are intended for informational purposes
            only, and their content is not defined, and not part of the API
            specification.

            These messages can be printed by the client as information to the user.
          nullable: true
          properties: {}
          type: object
      required:
      - Name
      - Version
      type: object
      x-go-name: ComponentVersion
    SystemInfo_DefaultAddressPools:
      example:
        Size: 24
        Base: 10.10.0.0/16
      properties:
        Base:
          description: The network address in CIDR format
          example: 10.10.0.0/16
          type: string
        Size:
          description: The network pool size
          example: 24
          type: integer
      type: object
x-original-swagger-version: "2.0"
